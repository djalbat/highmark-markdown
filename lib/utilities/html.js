"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    postProcess: function() {
        return postProcess;
    }
});
function postProcess(divisionMarkdownNodes, context) {
// const footnoteReplacementMap = prepareFootnotes(divisionMarkdownNodes, context),
//       markdownNodes = paginate(divisionMarkdownNodes, context);
//
// divisionMarkdownNodes = divisionMarkdownNodesFromMarkdownNodes(markdownNodes);  ///
//
// createFootnotes(divisionMarkdownNodes, footnoteReplacementMap, context);
//
// createContents(divisionMarkdownNodes, context);
//
// createIndex(divisionMarkdownNodes, context);
}
function paginate(divisionMarkdownNodes, context) {
    var pageNumber = 1, markdownNOdes = [];
    Object.assign(context, {
        pageNumber: pageNumber
    });
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.paginate(markdownNOdes, context);
    });
    delete context.pageNumber;
    return markdownNOdes;
}
function createIndex(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var indexCreated = divisionMarkdownNode.createIndex(divisionMarkdownNodes, context);
        if (indexCreated) {
            return true;
        }
    });
}
function createContents(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var contentsCreated = divisionMarkdownNode.createContents(divisionMarkdownNodes, context);
        if (contentsCreated) {
            return true;
        }
    });
}
function createFootnotes(divisionMarkdownNodes, footnoteReplacementMap, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.createFootnotes(footnoteReplacementMap, context);
    });
}
function prepareFootnotes(divisionMarkdownNodes, context) {
    var footnoteReplacementMap = {};
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.prepareFootnotes(footnoteReplacementMap, context);
    });
    return footnoteReplacementMap;
}
var _default = {
    postProcess: postProcess
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHRtbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RQcm9jZXNzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCkge1xuICAvLyBjb25zdCBmb290bm90ZVJlcGxhY2VtZW50TWFwID0gcHJlcGFyZUZvb3Rub3RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpLFxuICAvLyAgICAgICBtYXJrZG93bk5vZGVzID0gcGFnaW5hdGUoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcbiAgLy9cbiAgLy8gZGl2aXNpb25NYXJrZG93bk5vZGVzID0gZGl2aXNpb25NYXJrZG93bk5vZGVzRnJvbU1hcmtkb3duTm9kZXMobWFya2Rvd25Ob2Rlcyk7ICAvLy9cbiAgLy9cbiAgLy8gY3JlYXRlRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgZm9vdG5vdGVSZXBsYWNlbWVudE1hcCwgY29udGV4dCk7XG4gIC8vXG4gIC8vIGNyZWF0ZUNvbnRlbnRzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG4gIC8vXG4gIC8vIGNyZWF0ZUluZGV4KGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIHBhZ2luYXRlKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCkge1xuICBjb25zdCBwYWdlTnVtYmVyID0gMSxcbiAgICAgICAgbWFya2Rvd25OT2RlcyA9IFtdO1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIHBhZ2VOdW1iZXJcbiAgfSk7XG5cbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGUucGFnaW5hdGUobWFya2Rvd25OT2RlcywgY29udGV4dCk7XG4gIH0pO1xuXG4gIGRlbGV0ZSBjb250ZXh0LnBhZ2VOdW1iZXI7XG5cbiAgcmV0dXJuIG1hcmtkb3duTk9kZXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUluZGV4KGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCkge1xuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuc29tZSgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICBjb25zdCBpbmRleENyZWF0ZWQgPSBkaXZpc2lvbk1hcmtkb3duTm9kZS5jcmVhdGVJbmRleChkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gICAgaWYgKGluZGV4Q3JlYXRlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5zb21lKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzQ3JlYXRlZCA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUNvbnRlbnRzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgICBpZiAoY29udGVudHNDcmVhdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGb290bm90ZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBmb290bm90ZVJlcGxhY2VtZW50TWFwLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUZvb3Rub3Rlcyhmb290bm90ZVJlcGxhY2VtZW50TWFwLCBjb250ZXh0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVGb290bm90ZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGZvb3Rub3RlUmVwbGFjZW1lbnRNYXAgPSB7fTtcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZS5wcmVwYXJlRm9vdG5vdGVzKGZvb3Rub3RlUmVwbGFjZW1lbnRNYXAsIGNvbnRleHQpO1xuICB9KTtcblxuICByZXR1cm4gZm9vdG5vdGVSZXBsYWNlbWVudE1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwb3N0UHJvY2Vzc1xufSJdLCJuYW1lcyI6WyJwb3N0UHJvY2VzcyIsImRpdmlzaW9uTWFya2Rvd25Ob2RlcyIsImNvbnRleHQiLCJwYWdpbmF0ZSIsInBhZ2VOdW1iZXIiLCJtYXJrZG93bk5PZGVzIiwiT2JqZWN0IiwiYXNzaWduIiwiZm9yRWFjaCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiY3JlYXRlSW5kZXgiLCJzb21lIiwiaW5kZXhDcmVhdGVkIiwiY3JlYXRlQ29udGVudHMiLCJjb250ZW50c0NyZWF0ZWQiLCJjcmVhdGVGb290bm90ZXMiLCJmb290bm90ZVJlcGxhY2VtZW50TWFwIiwicHJlcGFyZUZvb3Rub3RlcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBb0VBLE9BRUM7ZUFGRDs7SUFsRWdCQSxXQUFXO2VBQVhBOzs7QUFBVCxTQUFTQSxZQUFZQyxxQkFBcUIsRUFBRUMsT0FBTztBQUN4RCxtRkFBbUY7QUFDbkYsa0VBQWtFO0FBQ2xFLEVBQUU7QUFDRixzRkFBc0Y7QUFDdEYsRUFBRTtBQUNGLDJFQUEyRTtBQUMzRSxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRiwrQ0FBK0M7QUFDakQ7QUFFQSxTQUFTQyxTQUFTRixxQkFBcUIsRUFBRUMsT0FBTztJQUM5QyxJQUFNRSxhQUFhLEdBQ2JDLGdCQUFnQixFQUFFO0lBRXhCQyxPQUFPQyxNQUFNLENBQUNMLFNBQVM7UUFDckJFLFlBQUFBO0lBQ0Y7SUFFQUgsc0JBQXNCTyxPQUFPLENBQUMsU0FBQ0M7UUFDN0JBLHFCQUFxQk4sUUFBUSxDQUFDRSxlQUFlSDtJQUMvQztJQUVBLE9BQU9BLFFBQVFFLFVBQVU7SUFFekIsT0FBT0M7QUFDVDtBQUVBLFNBQVNLLFlBQVlULHFCQUFxQixFQUFFQyxPQUFPO0lBQ2pERCxzQkFBc0JVLElBQUksQ0FBQyxTQUFDRjtRQUMxQixJQUFNRyxlQUFlSCxxQkFBcUJDLFdBQVcsQ0FBQ1QsdUJBQXVCQztRQUU3RSxJQUFJVSxjQUFjO1lBQ2hCLE9BQU87UUFDVDtJQUNGO0FBQ0Y7QUFFQSxTQUFTQyxlQUFlWixxQkFBcUIsRUFBRUMsT0FBTztJQUNwREQsc0JBQXNCVSxJQUFJLENBQUMsU0FBQ0Y7UUFDMUIsSUFBTUssa0JBQWtCTCxxQkFBcUJJLGNBQWMsQ0FBQ1osdUJBQXVCQztRQUVuRixJQUFJWSxpQkFBaUI7WUFDbkIsT0FBTztRQUNUO0lBQ0Y7QUFDRjtBQUVBLFNBQVNDLGdCQUFnQmQscUJBQXFCLEVBQUVlLHNCQUFzQixFQUFFZCxPQUFPO0lBQzdFRCxzQkFBc0JPLE9BQU8sQ0FBQyxTQUFDQztRQUM3QkEscUJBQXFCTSxlQUFlLENBQUNDLHdCQUF3QmQ7SUFDL0Q7QUFDRjtBQUVBLFNBQVNlLGlCQUFpQmhCLHFCQUFxQixFQUFFQyxPQUFPO0lBQ3RELElBQU1jLHlCQUF5QixDQUFDO0lBRWhDZixzQkFBc0JPLE9BQU8sQ0FBQyxTQUFDQztRQUM3QkEscUJBQXFCUSxnQkFBZ0IsQ0FBQ0Qsd0JBQXdCZDtJQUNoRTtJQUVBLE9BQU9jO0FBQ1Q7SUFFQSxXQUFlO0lBQ2JoQixhQUFBQTtBQUNGIn0=