"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    leadingIndexFromNodeAndTokens: function() {
        return leadingIndexFromNodeAndTokens;
    },
    trailingIndexFromNodeAndTokens: function() {
        return trailingIndexFromNodeAndTokens;
    }
});
var _necessary = require("necessary");
var forwardsSome = _necessary.arrayUtilities.forwardsSome, backwardsSome = _necessary.arrayUtilities.backwardsSome;
function leadingIndexFromNodeAndTokens(node, tokens) {
    var leadingIndex;
    var nodeTerminalNode = node.isTerminalNode();
    if (nodeTerminalNode) {
        var terminalNode = node; ///
        leadingIndex = leadingIndexFromTerminalNodeAndTokens(terminalNode, tokens);
    } else {
        var nonTerminalNode = node; ///
        leadingIndex = leadingIndexFromNonTerminalNodeAndTokens(nonTerminalNode, tokens);
    }
    return leadingIndex;
}
function trailingIndexFromNodeAndTokens(node, tokens) {
    var trailingIndex;
    var nodeTerminalNode = node.isTerminalNode();
    if (nodeTerminalNode) {
        var terminalNode = node; ///
        trailingIndex = trailingIndexFromTerminalNodeAndTokens(terminalNode, tokens);
    } else {
        var nonTerminalNode = node; ///
        trailingIndex = trailingIndexFromNonTerminalNodeAndTokens(nonTerminalNode, tokens);
    }
    return trailingIndex;
}
function leadingIndexFromTerminalNodeAndTokens(terminalNode, tokens) {
    var leadingIndex;
    var significantToken = terminalNode.getSignificantToken();
    if (significantToken === null) {
        leadingIndex = -1;
    } else {
        var significantTokenIndex = tokens.indexOf(significantToken);
        leadingIndex = significantTokenIndex; ///
    }
    return leadingIndex;
}
function trailingIndexFromTerminalNodeAndTokens(terminalNode, tokens) {
    var trailingIndex;
    var significantToken = terminalNode.getSignificantToken();
    if (significantToken === null) {
        trailingIndex = -1;
    } else {
        var significantTokenIndex = tokens.indexOf(significantToken);
        trailingIndex = significantTokenIndex; ///
    }
    return trailingIndex;
}
function leadingIndexFromNonTerminalNodeAndTokens(nonTerminalNode, tokens) {
    var leadingIndex;
    var childNodes = nonTerminalNode.getChildNodes();
    forwardsSome(childNodes, function(childNode) {
        var node = childNode;
        leadingIndex = leadingIndexFromNodeAndTokens(node, tokens);
        if (leadingIndex !== -1) {
            return true;
        }
    });
    return leadingIndex;
}
function trailingIndexFromNonTerminalNodeAndTokens(nonTerminalNode, tokens) {
    var trailingIndex;
    var childNodes = nonTerminalNode.getChildNodes();
    backwardsSome(childNodes, function(childNode) {
        var node = childNode;
        trailingIndex = trailingIndexFromNodeAndTokens(node, tokens);
        if (trailingIndex !== -1) {
            return true;
        }
    });
    return trailingIndex;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgZm9yd2FyZHNTb21lLCBiYWNrd2FyZHNTb21lIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGxlYWRpbmdJbmRleEZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucykge1xuICBsZXQgbGVhZGluZ0luZGV4O1xuXG4gIGNvbnN0IG5vZGVUZXJtaW5hbE5vZGUgPSBub2RlLmlzVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVUZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCB0ZXJtaW5hbE5vZGUgPSBub2RlOyAgLy8vXG5cbiAgICBsZWFkaW5nSW5kZXggPSBsZWFkaW5nSW5kZXhGcm9tVGVybWluYWxOb2RlQW5kVG9rZW5zKHRlcm1pbmFsTm9kZSwgdG9rZW5zKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlOyAgLy8vXG5cbiAgICBsZWFkaW5nSW5kZXggPSBsZWFkaW5nSW5kZXhGcm9tTm9uVGVybWluYWxOb2RlQW5kVG9rZW5zKG5vblRlcm1pbmFsTm9kZSwgdG9rZW5zKTtcbiAgfVxuXG4gIHJldHVybiBsZWFkaW5nSW5kZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFpbGluZ0luZGV4RnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKSB7XG4gIGxldCB0cmFpbGluZ0luZGV4O1xuXG4gIGNvbnN0IG5vZGVUZXJtaW5hbE5vZGUgPSBub2RlLmlzVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVUZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCB0ZXJtaW5hbE5vZGUgPSBub2RlOyAgLy8vXG5cbiAgICB0cmFpbGluZ0luZGV4ID0gdHJhaWxpbmdJbmRleEZyb21UZXJtaW5hbE5vZGVBbmRUb2tlbnModGVybWluYWxOb2RlLCB0b2tlbnMpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG5vZGU7ICAvLy9cblxuICAgIHRyYWlsaW5nSW5kZXggPSB0cmFpbGluZ0luZGV4RnJvbU5vblRlcm1pbmFsTm9kZUFuZFRva2Vucyhub25UZXJtaW5hbE5vZGUsIHRva2Vucyk7XG4gIH1cblxuICByZXR1cm4gdHJhaWxpbmdJbmRleDtcbn1cblxuZnVuY3Rpb24gbGVhZGluZ0luZGV4RnJvbVRlcm1pbmFsTm9kZUFuZFRva2Vucyh0ZXJtaW5hbE5vZGUsIHRva2Vucykge1xuICBsZXQgbGVhZGluZ0luZGV4O1xuXG4gIGNvbnN0IHNpZ25pZmljYW50VG9rZW4gPSB0ZXJtaW5hbE5vZGUuZ2V0U2lnbmlmaWNhbnRUb2tlbigpO1xuXG4gIGlmIChzaWduaWZpY2FudFRva2VuID09PSBudWxsKSB7XG4gICAgbGVhZGluZ0luZGV4ID0gLTE7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2lnbmlmaWNhbnRUb2tlbkluZGV4ID0gdG9rZW5zLmluZGV4T2Yoc2lnbmlmaWNhbnRUb2tlbik7XG5cbiAgICBsZWFkaW5nSW5kZXggPSBzaWduaWZpY2FudFRva2VuSW5kZXg7IC8vL1xuICB9XG5cbiAgcmV0dXJuIGxlYWRpbmdJbmRleDtcbn1cblxuZnVuY3Rpb24gdHJhaWxpbmdJbmRleEZyb21UZXJtaW5hbE5vZGVBbmRUb2tlbnModGVybWluYWxOb2RlLCB0b2tlbnMpIHtcbiAgbGV0IHRyYWlsaW5nSW5kZXg7XG5cbiAgY29uc3Qgc2lnbmlmaWNhbnRUb2tlbiA9IHRlcm1pbmFsTm9kZS5nZXRTaWduaWZpY2FudFRva2VuKCk7XG5cbiAgaWYgKHNpZ25pZmljYW50VG9rZW4gPT09IG51bGwpIHtcbiAgICB0cmFpbGluZ0luZGV4ID0gLTE7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2lnbmlmaWNhbnRUb2tlbkluZGV4ID0gdG9rZW5zLmluZGV4T2Yoc2lnbmlmaWNhbnRUb2tlbik7XG5cbiAgICB0cmFpbGluZ0luZGV4ID0gc2lnbmlmaWNhbnRUb2tlbkluZGV4OyAvLy9cbiAgfVxuXG4gIHJldHVybiB0cmFpbGluZ0luZGV4O1xufVxuXG5mdW5jdGlvbiBsZWFkaW5nSW5kZXhGcm9tTm9uVGVybWluYWxOb2RlQW5kVG9rZW5zKG5vblRlcm1pbmFsTm9kZSwgdG9rZW5zKSB7XG4gIGxldCBsZWFkaW5nSW5kZXg7XG5cbiAgY29uc3QgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgZm9yd2FyZHNTb21lKGNoaWxkTm9kZXMsIChjaGlsZE5vZGUpID0+IHtcbiAgICBjb25zdCBub2RlID0gY2hpbGROb2RlO1xuXG4gICAgbGVhZGluZ0luZGV4ID0gbGVhZGluZ0luZGV4RnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKTtcblxuICAgIGlmIChsZWFkaW5nSW5kZXggIT09IC0xKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsZWFkaW5nSW5kZXg7XG59XG5cbmZ1bmN0aW9uIHRyYWlsaW5nSW5kZXhGcm9tTm9uVGVybWluYWxOb2RlQW5kVG9rZW5zKG5vblRlcm1pbmFsTm9kZSwgdG9rZW5zKSB7XG4gIGxldCB0cmFpbGluZ0luZGV4O1xuXG4gIGNvbnN0IGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gIGJhY2t3YXJkc1NvbWUoY2hpbGROb2RlcywgKGNoaWxkTm9kZSkgPT4ge1xuICAgIGNvbnN0IG5vZGUgPSBjaGlsZE5vZGU7XG5cbiAgICB0cmFpbGluZ0luZGV4ID0gdHJhaWxpbmdJbmRleEZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgICBpZiAodHJhaWxpbmdJbmRleCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRyYWlsaW5nSW5kZXg7XG59XG5cbiJdLCJuYW1lcyI6WyJsZWFkaW5nSW5kZXhGcm9tTm9kZUFuZFRva2VucyIsInRyYWlsaW5nSW5kZXhGcm9tTm9kZUFuZFRva2VucyIsImZvcndhcmRzU29tZSIsImFycmF5VXRpbGl0aWVzIiwiYmFja3dhcmRzU29tZSIsIm5vZGUiLCJ0b2tlbnMiLCJsZWFkaW5nSW5kZXgiLCJub2RlVGVybWluYWxOb2RlIiwiaXNUZXJtaW5hbE5vZGUiLCJ0ZXJtaW5hbE5vZGUiLCJsZWFkaW5nSW5kZXhGcm9tVGVybWluYWxOb2RlQW5kVG9rZW5zIiwibm9uVGVybWluYWxOb2RlIiwibGVhZGluZ0luZGV4RnJvbU5vblRlcm1pbmFsTm9kZUFuZFRva2VucyIsInRyYWlsaW5nSW5kZXgiLCJ0cmFpbGluZ0luZGV4RnJvbVRlcm1pbmFsTm9kZUFuZFRva2VucyIsInRyYWlsaW5nSW5kZXhGcm9tTm9uVGVybWluYWxOb2RlQW5kVG9rZW5zIiwic2lnbmlmaWNhbnRUb2tlbiIsImdldFNpZ25pZmljYW50VG9rZW4iLCJzaWduaWZpY2FudFRva2VuSW5kZXgiLCJpbmRleE9mIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJjaGlsZE5vZGUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQU1nQkEsNkJBQTZCO2VBQTdCQTs7SUFrQkFDLDhCQUE4QjtlQUE5QkE7Ozt5QkF0QmU7QUFFL0IsSUFBUUMsZUFBZ0NDLHlCQUFjLENBQTlDRCxjQUFjRSxnQkFBa0JELHlCQUFjLENBQWhDQztBQUVmLFNBQVNKLDhCQUE4QkssSUFBSSxFQUFFQyxNQUFNO0lBQ3hELElBQUlDO0lBRUosSUFBTUMsbUJBQW1CSCxLQUFLSSxjQUFjO0lBRTVDLElBQUlELGtCQUFrQjtRQUNwQixJQUFNRSxlQUFlTCxNQUFPLEdBQUc7UUFFL0JFLGVBQWVJLHNDQUFzQ0QsY0FBY0o7SUFDckUsT0FBTztRQUNMLElBQU1NLGtCQUFrQlAsTUFBTyxHQUFHO1FBRWxDRSxlQUFlTSx5Q0FBeUNELGlCQUFpQk47SUFDM0U7SUFFQSxPQUFPQztBQUNUO0FBRU8sU0FBU04sK0JBQStCSSxJQUFJLEVBQUVDLE1BQU07SUFDekQsSUFBSVE7SUFFSixJQUFNTixtQkFBbUJILEtBQUtJLGNBQWM7SUFFNUMsSUFBSUQsa0JBQWtCO1FBQ3BCLElBQU1FLGVBQWVMLE1BQU8sR0FBRztRQUUvQlMsZ0JBQWdCQyx1Q0FBdUNMLGNBQWNKO0lBQ3ZFLE9BQU87UUFDTCxJQUFNTSxrQkFBa0JQLE1BQU8sR0FBRztRQUVsQ1MsZ0JBQWdCRSwwQ0FBMENKLGlCQUFpQk47SUFDN0U7SUFFQSxPQUFPUTtBQUNUO0FBRUEsU0FBU0gsc0NBQXNDRCxZQUFZLEVBQUVKLE1BQU07SUFDakUsSUFBSUM7SUFFSixJQUFNVSxtQkFBbUJQLGFBQWFRLG1CQUFtQjtJQUV6RCxJQUFJRCxxQkFBcUIsTUFBTTtRQUM3QlYsZUFBZSxDQUFDO0lBQ2xCLE9BQU87UUFDTCxJQUFNWSx3QkFBd0JiLE9BQU9jLE9BQU8sQ0FBQ0g7UUFFN0NWLGVBQWVZLHVCQUF1QixHQUFHO0lBQzNDO0lBRUEsT0FBT1o7QUFDVDtBQUVBLFNBQVNRLHVDQUF1Q0wsWUFBWSxFQUFFSixNQUFNO0lBQ2xFLElBQUlRO0lBRUosSUFBTUcsbUJBQW1CUCxhQUFhUSxtQkFBbUI7SUFFekQsSUFBSUQscUJBQXFCLE1BQU07UUFDN0JILGdCQUFnQixDQUFDO0lBQ25CLE9BQU87UUFDTCxJQUFNSyx3QkFBd0JiLE9BQU9jLE9BQU8sQ0FBQ0g7UUFFN0NILGdCQUFnQkssdUJBQXVCLEdBQUc7SUFDNUM7SUFFQSxPQUFPTDtBQUNUO0FBRUEsU0FBU0QseUNBQXlDRCxlQUFlLEVBQUVOLE1BQU07SUFDdkUsSUFBSUM7SUFFSixJQUFNYyxhQUFhVCxnQkFBZ0JVLGFBQWE7SUFFaERwQixhQUFhbUIsWUFBWSxTQUFDRTtRQUN4QixJQUFNbEIsT0FBT2tCO1FBRWJoQixlQUFlUCw4QkFBOEJLLE1BQU1DO1FBRW5ELElBQUlDLGlCQUFpQixDQUFDLEdBQUc7WUFDdkIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUO0FBRUEsU0FBU1MsMENBQTBDSixlQUFlLEVBQUVOLE1BQU07SUFDeEUsSUFBSVE7SUFFSixJQUFNTyxhQUFhVCxnQkFBZ0JVLGFBQWE7SUFFaERsQixjQUFjaUIsWUFBWSxTQUFDRTtRQUN6QixJQUFNbEIsT0FBT2tCO1FBRWJULGdCQUFnQmIsK0JBQStCSSxNQUFNQztRQUVyRCxJQUFJUSxrQkFBa0IsQ0FBQyxHQUFHO1lBQ3hCLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBT0E7QUFDVCJ9