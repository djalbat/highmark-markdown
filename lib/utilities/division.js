"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    footnoteItemHTMLTransformsFromLineHTMLTransforms: function() {
        return footnoteItemHTMLTransformsFromLineHTMLTransforms;
    },
    groupHTMLNodes: function() {
        return groupHTMLNodes;
    },
    lineHTMLTransformsFromFootnoteHTMLTransforms: function() {
        return lineHTMLTransformsFromFootnoteHTMLTransforms;
    },
    numberFootnoteLinkHTMLNodes: function() {
        return numberFootnoteLinkHTMLNodes;
    },
    paginateGroupedHTMLNodes: function() {
        return paginateGroupedHTMLNodes;
    },
    removeFootnoteHTMLNodes: function() {
        return removeFootnoteHTMLNodes;
    },
    removeFootnotesDirectiveHTMLNode: function() {
        return removeFootnotesDirectiveHTMLNode;
    },
    removeHTMLNodes: function() {
        return removeHTMLNodes;
    },
    removeNestedFootnoteLinkHTMLNodes: function() {
        return removeNestedFootnoteLinkHTMLNodes;
    },
    removePageNumberDirectiveHTMLNode: function() {
        return removePageNumberDirectiveHTMLNode;
    },
    reorderFootnoteHTMLNodes: function() {
        return reorderFootnoteHTMLNodes;
    }
});
var _necessary = require("necessary");
var _html = /*#__PURE__*/ _interop_require_default(require("../transform/html"));
var _footnote = /*#__PURE__*/ _interop_require_default(require("../node/html/footnote"));
var _line = /*#__PURE__*/ _interop_require_default(require("../transform/html/line"));
var _footnote1 = /*#__PURE__*/ _interop_require_default(require("../transform/html/footnote"));
var _footnoteItem = /*#__PURE__*/ _interop_require_default(require("../transform/html/footnoteItem"));
var _footnoteLink = /*#__PURE__*/ _interop_require_default(require("../transform/html/footnoteLink"));
var _nestedFootnoteLink = /*#__PURE__*/ _interop_require_default(require("../transform/html/nestedFootnoteLink"));
var _footnotes = /*#__PURE__*/ _interop_require_default(require("../transform/html/directive/footnotes"));
var _pageNumber = /*#__PURE__*/ _interop_require_default(require("../transform/html/directive/pageNumber"));
var _constants = require("../constants");
var _html1 = require("../utilities/html");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var backwardsForEach = _necessary.arrayUtilities.backwardsForEach;
function groupHTMLNodes(htmlNodes) {
    var groupedHTMLNodesArray = [];
    var groupedHTMLNodes = [];
    htmlNodes.forEach(function(htmlNode) {
        var htmlNodeFootnoteHTMLNode = _instanceof(htmlNode, _footnote.default);
        if (!htmlNodeFootnoteHTMLNode) {
            var groupedHTMLNodeLength = groupedHTMLNodes.length;
            if (groupedHTMLNodeLength > 0) {
                groupedHTMLNodesArray.push(groupedHTMLNodes);
                groupedHTMLNodes = [];
            }
        }
        var groupedHTMLNode = htmlNode; ///
        groupedHTMLNodes.push(groupedHTMLNode);
    });
    var groupedHTMLNodeLength = groupedHTMLNodes.length;
    if (groupedHTMLNodeLength) {
        groupedHTMLNodesArray.push(groupedHTMLNodes);
    }
    return groupedHTMLNodesArray;
}
function removeHTMLNodes(node) {
    var htmlNodes = (0, _html1.htmlNodesFromNode)(node);
    htmlNodes.forEach(function(htmlNode) {
        var htmlTransform = _html.default.fromHTNLNOde(htmlNode);
        htmlTransform.remove();
    });
    return htmlNodes;
}
function removeFootnoteHTMLNodes(footnoteHTMLNodes) {
    var footnoteHTMLTransforms = footnoteHTMLTransformsFromFootnoteHTMLNodes(footnoteHTMLNodes);
    footnoteHTMLTransforms.forEach(function(footnoteHTMLTransform) {
        footnoteHTMLTransform.remove();
    });
    return footnoteHTMLTransforms;
}
function paginateGroupedHTMLNodes(groupedHTMLNodesArray, context) {
    var paginatedHTMLNodesArray = [];
    var _context_maximumPageLines = context.maximumPageLines, maximumPageLines = _context_maximumPageLines === void 0 ? _constants.DEFAULT_MAXIMUM_PAGE_LINES : _context_maximumPageLines;
    var pageLines = 0, paginatedHTMLNodes = [];
    groupedHTMLNodesArray.forEach(function(groupedHTMLNodes) {
        var _paginatedHTMLNodes;
        var groupLines = groupedHTMLNodes.reduce(function(groupLines, groupedHTMLNode) {
            var lines = groupedHTMLNode.lines(context);
            groupLines += lines;
            return groupLines;
        }, 0);
        var paginatedHTMLNodesLength = paginatedHTMLNodes.length;
        if (paginatedHTMLNodesLength > 0) {
            if (pageLines + groupLines > maximumPageLines) {
                paginatedHTMLNodesArray.push(paginatedHTMLNodes);
                pageLines = 0;
                paginatedHTMLNodes = [];
            }
        }
        (_paginatedHTMLNodes = paginatedHTMLNodes).push.apply(_paginatedHTMLNodes, _to_consumable_array(groupedHTMLNodes));
        pageLines += groupLines;
    });
    var paginatedHTMLNodesLength = paginatedHTMLNodes.length;
    if (paginatedHTMLNodesLength) {
        paginatedHTMLNodesArray.push(paginatedHTMLNodes);
    }
    return paginatedHTMLNodesArray;
}
function reorderFootnoteHTMLNodes(footnoteLinkHTMLNodes, footnoteHTMLTransforms, context) {
    var footnoteLinkHTMLTransforms = footnoteLinkHTMLTransformsFromFootnoteLinkHTMLNodes(footnoteLinkHTMLNodes);
    backwardsForEach(footnoteLinkHTMLTransforms, function(footnoteLinkHTMLTransform) {
        var identifier = footnoteLinkHTMLTransform.identifier(context), footnoteHTMLTransform = footnoteHTMLTransforms.find(function(footnoteHTMLTransform) {
            var identifierMatches = footnoteHTMLTransform.matchIdentifier(identifier, context);
            if (identifierMatches) {
                return true;
            }
        }) || null;
        if (footnoteHTMLTransform !== null) {
            footnoteHTMLTransform.addAfterFootnoteLinkHTMLTransform(footnoteLinkHTMLTransform);
        }
    });
}
function numberFootnoteLinkHTMLNodes(footnoteHTMLNodes, footnoteLinkHTMLNodes, identifierMap, context) {
    var identifiers = Object.keys(identifierMap), identifiersLength = identifiers.length, start = identifiersLength + 1;
    footnoteHTMLNodes.forEach(function(footnoteHTMLNode, index) {
        var identifier = footnoteHTMLNode.identifier(context), number = start + index;
        identifierMap[identifier] = number;
    });
    footnoteLinkHTMLNodes.forEach(function(footnoteLinkHTMLNode) {
        var identifier = footnoteLinkHTMLNode.identifier(context), number = identifierMap[identifier];
        footnoteLinkHTMLNode.setNumber(number);
    });
    return start;
}
function removeFootnotesDirectiveHTMLNode(footnotesDirectiveHTMLNode) {
    var footnotesDirectiveHTMLTransform = _footnotes.default.fromFootnotesDirectiveHTMLNode(footnotesDirectiveHTMLNode);
    footnotesDirectiveHTMLTransform.remove();
}
function removePageNumberDirectiveHTMLNode(node) {
    var pageNumbers = false;
    var pageNumberDirectiveHTMLNode = (0, _html1.pageNumberDirectiveHTMLNodeFromNode)(node);
    if (pageNumberDirectiveHTMLNode !== null) {
        var pageNumberDirectiveHTNLTransform = _pageNumber.default.fromPageNumberDirectiveHTMLNode(pageNumberDirectiveHTMLNode);
        pageNumberDirectiveHTNLTransform.remove();
        pageNumbers = true;
    }
    return pageNumbers;
}
function removeNestedFootnoteLinkHTMLNodes(node) {
    var nestedFootnoteLinkHTMLNodes = (0, _html1.nestedFootnoteLinkHTMLNodesFromNode)(node), nestedFootnoteLinkHTMLTransforms = nestedFootnoteLinkHTMLTransformsFromNestedFootnoteLinkHTMLNodes(nestedFootnoteLinkHTMLNodes);
    nestedFootnoteLinkHTMLTransforms.forEach(function(nestedFootnoteLinkHTMLTransform) {
        nestedFootnoteLinkHTMLTransform.remove();
    });
}
function lineHTMLTransformsFromFootnoteHTMLTransforms(footnoteHTMLTransforms) {
    var lineHTMLTransforms = footnoteHTMLTransforms.map(function(footnoteHTMLTransform) {
        var lineHTMLTransform = _line.default.fromFootnoteHTMLTransform(footnoteHTMLTransform);
        return lineHTMLTransform;
    });
    return lineHTMLTransforms;
}
function footnoteItemHTMLTransformsFromLineHTMLTransforms(lineHTMLTransforms, identifierMap, start) {
    var numbers = Object.values(identifierMap), identifiers = Object.keys(identifierMap), footnoteItemHTMLTransforms = lineHTMLTransforms.map(function(lineHTMLTransform, index) {
        var number = start + index;
        index = numbers.indexOf(number);
        var identifier = identifiers[index], footnoteItemHTMLTransform = _footnoteItem.default.fromLineTMLTransformAndIdentifier(lineHTMLTransform, identifier);
        return footnoteItemHTMLTransform;
    });
    return footnoteItemHTMLTransforms;
}
function footnoteHTMLTransformsFromFootnoteHTMLNodes(footnoteHTMLNodes) {
    var footnoteHTMLTransforms = footnoteHTMLNodes.map(function(footnoteHTMLNode) {
        var footnoteHTMLTransform = _footnote1.default.fromFootnoteHTMLNode(footnoteHTMLNode);
        return footnoteHTMLTransform;
    });
    return footnoteHTMLTransforms;
}
function footnoteLinkHTMLTransformsFromFootnoteLinkHTMLNodes(footnoteLinkHTMLNodes) {
    var footnoteLinkHTMLTransforms = footnoteLinkHTMLNodes.map(function(footnoteLinkHTMLNode) {
        var footnoteLinkHTMLTransform = _footnoteLink.default.fromFootnoteLinkHTMLNode(footnoteLinkHTMLNode);
        return footnoteLinkHTMLTransform;
    });
    return footnoteLinkHTMLTransforms;
}
function nestedFootnoteLinkHTMLTransformsFromNestedFootnoteLinkHTMLNodes(nestedFootnoteLinkHTMLNodes) {
    var nestedFootnoteLinkHTMLTransforms = nestedFootnoteLinkHTMLNodes.map(function(nestedFootnoteLinkHTMLNode) {
        var nestedFootnoteLinkHTMLTransform = _nestedFootnoteLink.default.fromNestedFootnoteLinkHTMLNode(nestedFootnoteLinkHTMLNode);
        return nestedFootnoteLinkHTMLTransform;
    });
    return nestedFootnoteLinkHTMLTransforms;
}

//# sourceMappingURL=data:application/json;base64,