"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    footnotesListMarkdownNodeFromFootnotesListDOMElement: function() {
        return footnotesListMarkdownNodeFromFootnotesListDOMElement;
    },
    renumberFootnoteLinkMarkdownNodes: function() {
        return renumberFootnoteLinkMarkdownNodes;
    }
});
var _footnotesList = /*#__PURE__*/ _interop_require_default(require("../node/markdown/footnotesList"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function renumberFootnoteLinkMarkdownNodes(divisionMarkdownNode, footnoteReplacementMap, context) {
    var node = divisionMarkdownNode, footnoteLinkMarkdownNodes = (0, _query.footnoteLinkMarkdownNodesFromNode)(node);
    footnoteLinkMarkdownNodes.forEach(function(footnoteLinkMarkdownNode) {
        var identifier = footnoteLinkMarkdownNode.identifier(context), footnoteReplacement = footnoteReplacementMap[identifier] || null, number = footnoteReplacement !== null ? footnoteReplacement.getNumber() : null;
        footnoteLinkMarkdownNode.renumber(number);
    });
}
function footnotesListMarkdownNodeFromFootnotesListDOMElement(footnotesListDOMElement) {
    var domElement = footnotesListDOMElement, footnotesListMarkdownNode = _footnotesList.default.fromDOMElement(domElement);
    return footnotesListMarkdownNode;
}
var _default = {
    renumberFootnoteLinkMarkdownNodes: renumberFootnoteLinkMarkdownNodes,
    footnotesListMarkdownNodeFromFootnotesListDOMElement: footnotesListMarkdownNodeFromFootnotesListDOMElement
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZm9vdG5vdGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgRm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSBmcm9tIFwiLi4vbm9kZS9tYXJrZG93bi9mb290bm90ZXNMaXN0XCI7XG5cbmltcG9ydCB7IGZvb3Rub3RlTGlua01hcmtkb3duTm9kZXNGcm9tTm9kZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbnVtYmVyRm9vdG5vdGVMaW5rTWFya2Rvd25Ob2RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgZm9vdG5vdGVSZXBsYWNlbWVudE1hcCwgY29udGV4dCkge1xuICBjb25zdCBub2RlID0gZGl2aXNpb25NYXJrZG93bk5vZGUsICAvLy9cbiAgICAgICAgZm9vdG5vdGVMaW5rTWFya2Rvd25Ob2RlcyA9IGZvb3Rub3RlTGlua01hcmtkb3duTm9kZXNGcm9tTm9kZShub2RlKTtcblxuICBmb290bm90ZUxpbmtNYXJrZG93bk5vZGVzLmZvckVhY2goKGZvb3Rub3RlTGlua01hcmtkb3duTm9kZSkgPT4ge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSBmb290bm90ZUxpbmtNYXJrZG93bk5vZGUuaWRlbnRpZmllcihjb250ZXh0KSxcbiAgICAgICAgICBmb290bm90ZVJlcGxhY2VtZW50ID0gZm9vdG5vdGVSZXBsYWNlbWVudE1hcFtpZGVudGlmaWVyXSB8fCBudWxsLFxuICAgICAgICAgIG51bWJlciA9IChmb290bm90ZVJlcGxhY2VtZW50ICE9PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgICAgICBmb290bm90ZVJlcGxhY2VtZW50LmdldE51bWJlcigpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGw7XG5cbiAgICBmb290bm90ZUxpbmtNYXJrZG93bk5vZGUucmVudW1iZXIobnVtYmVyKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlRnJvbUZvb3Rub3Rlc0xpc3RET01FbGVtZW50KGZvb3Rub3Rlc0xpc3RET01FbGVtZW50KSB7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSBmb290bm90ZXNMaXN0RE9NRWxlbWVudCwgLy8vXG4gICAgICAgIGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUgPSBGb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlLmZyb21ET01FbGVtZW50KGRvbUVsZW1lbnQpO1xuXG4gIHJldHVybiBmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlbnVtYmVyRm9vdG5vdGVMaW5rTWFya2Rvd25Ob2RlcyxcbiAgZm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZUZyb21Gb290bm90ZXNMaXN0RE9NRWxlbWVudFxufTtcbiJdLCJuYW1lcyI6WyJmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlRnJvbUZvb3Rub3Rlc0xpc3RET01FbGVtZW50IiwicmVudW1iZXJGb290bm90ZUxpbmtNYXJrZG93bk5vZGVzIiwiZGl2aXNpb25NYXJrZG93bk5vZGUiLCJmb290bm90ZVJlcGxhY2VtZW50TWFwIiwiY29udGV4dCIsIm5vZGUiLCJmb290bm90ZUxpbmtNYXJrZG93bk5vZGVzIiwiZm9vdG5vdGVMaW5rTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlIiwiZm9yRWFjaCIsImZvb3Rub3RlTGlua01hcmtkb3duTm9kZSIsImlkZW50aWZpZXIiLCJmb290bm90ZVJlcGxhY2VtZW50IiwibnVtYmVyIiwiZ2V0TnVtYmVyIiwicmVudW1iZXIiLCJmb290bm90ZXNMaXN0RE9NRWxlbWVudCIsImRvbUVsZW1lbnQiLCJmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlIiwiRm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSIsImZyb21ET01FbGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUE0QkEsT0FHRTtlQUhGOztJQVBnQkEsb0RBQW9EO2VBQXBEQTs7SUFmQUMsaUNBQWlDO2VBQWpDQTs7O29FQUpzQjtxQkFFWTs7Ozs7O0FBRTNDLFNBQVNBLGtDQUFrQ0Msb0JBQW9CLEVBQUVDLHNCQUFzQixFQUFFQyxPQUFPO0lBQ3JHLElBQU1DLE9BQU9ILHNCQUNQSSw0QkFBNEJDLElBQUFBLHdDQUFpQyxFQUFDRjtJQUVwRUMsMEJBQTBCRSxPQUFPLENBQUMsU0FBQ0M7UUFDakMsSUFBTUMsYUFBYUQseUJBQXlCQyxVQUFVLENBQUNOLFVBQ2pETyxzQkFBc0JSLHNCQUFzQixDQUFDTyxXQUFXLElBQUksTUFDNURFLFNBQVMsQUFBQ0Qsd0JBQXdCLE9BQ3ZCQSxvQkFBb0JFLFNBQVMsS0FDMUI7UUFFcEJKLHlCQUF5QkssUUFBUSxDQUFDRjtJQUNwQztBQUNGO0FBRU8sU0FBU1oscURBQXFEZSx1QkFBdUI7SUFDMUYsSUFBTUMsYUFBYUQseUJBQ2JFLDRCQUE0QkMsc0JBQXlCLENBQUNDLGNBQWMsQ0FBQ0g7SUFFM0UsT0FBT0M7QUFDVDtJQUVBLFdBQWU7SUFDYmhCLG1DQUFBQTtJQUNBRCxzREFBQUE7QUFDRiJ9