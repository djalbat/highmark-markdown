"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    appendFootnotesListMarkdownNodeHTML: function() {
        return appendFootnotesListMarkdownNodeHTML;
    },
    default: function() {
        return _default;
    },
    renumberLinkMarkdownNodes: function() {
        return renumberLinkMarkdownNodes;
    },
    renumberLinkMarkdownNodesHTML: function() {
        return renumberLinkMarkdownNodesHTML;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
var strlen = _necessary.stringUtilities.strlen, indexOf = _necessary.stringUtilities.indexOf;
function appendFootnotesListMarkdownNodeHTML(childNodesHTML, footnotesListMarkdownNode, indent, context) {
    var footnotesListMarkdownNodeHTML = footnotesListMarkdownNode.asHTML(indent, context);
    childNodesHTML = "".concat(childNodesHTML).concat(footnotesListMarkdownNodeHTML);
    return childNodesHTML;
}
function renumberLinkMarkdownNodesHTML(childNodesHTML, divisionMarkdownNode, footnotesListMarkdownNode, context) {
    var number = 1;
    var identifiers = footnotesListMarkdownNode.identifiers(), linkMarkdownNodes = (0, _query.linkMarkdownNodesFromNode)(divisionMarkdownNode);
    linkMarkdownNodes.forEach(function(linkMarkdownNode) {
        var indent = null, identifier = linkMarkdownNode.identifier(context), identifiersIncludesIdentifier = identifiers.includes(identifier), linkMarkdownNodeHTML = linkMarkdownNode.asHTML(indent, context), index = indexOf(childNodesHTML, linkMarkdownNodeHTML), length = strlen(linkMarkdownNodeHTML), start = index, deleteCount = length; ///
        if (identifiersIncludesIdentifier) {
            var linkMarkdownNodeHTML1 = linkMarkdownNode.asHTML(indent, context, number);
            childNodesHTML = (0, _string.splice)(childNodesHTML, start, deleteCount, linkMarkdownNodeHTML1);
            number++;
        } else {
            childNodesHTML = (0, _string.chop)(childNodesHTML, start, deleteCount);
        }
    });
    return childNodesHTML;
}
function renumberLinkMarkdownNodes(divisionMarkdownNode, footnotesListMarkdownNode, context) {
    var number = 1;
    var identifiers = footnotesListMarkdownNode.identifiers(), linkMarkdownNodes = (0, _query.linkMarkdownNodesFromNode)(divisionMarkdownNode);
    linkMarkdownNodes.forEach(function(linkMarkdownNode) {
        var identifier = linkMarkdownNode.identifier(context), linkMarkdownNodeDOMElement = linkMarkdownNode.getDOMElement(), identifiersIncludesIdentifier = identifiers.includes(identifier);
        var innerHTML;
        if (identifiersIncludesIdentifier) {
            innerHTML = "".concat(number);
            number++;
        } else {
            innerHTML = _constants.EMPTY_STRING;
        }
        Object.assign(linkMarkdownNodeDOMElement, {
            innerHTML: innerHTML
        });
    });
}
var _default = {
    renumberLinkMarkdownNodes: renumberLinkMarkdownNodes
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZm9vdG5vdGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzdHJpbmdVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGNob3AsIHNwbGljZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvc3RyaW5nXCI7XG5pbXBvcnQgeyBsaW5rTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCB7IHN0cmxlbiwgaW5kZXhPZiB9ID0gc3RyaW5nVXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kRm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZUhUTUwoY2hpbGROb2Rlc0hUTUwsIGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUsIGluZGVudCwgY29udGV4dCkge1xuICBjb25zdCBmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlSFRNTCA9IGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUuYXNIVE1MKGluZGVudCwgY29udGV4dCk7XG5cbiAgY2hpbGROb2Rlc0hUTUwgPSBgJHtjaGlsZE5vZGVzSFRNTH0ke2Zvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGVIVE1MfWA7XG5cbiAgcmV0dXJuIGNoaWxkTm9kZXNIVE1MO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVudW1iZXJMaW5rTWFya2Rvd25Ob2Rlc0hUTUwoY2hpbGROb2Rlc0hUTUwsIGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlLCBjb250ZXh0KSB7XG4gIGxldCBudW1iZXIgPSAxO1xuXG4gIGNvbnN0IGlkZW50aWZpZXJzID0gZm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZS5pZGVudGlmaWVycygpLFxuICAgICAgICBsaW5rTWFya2Rvd25Ob2RlcyA9IGxpbmtNYXJrZG93bk5vZGVzRnJvbU5vZGUoZGl2aXNpb25NYXJrZG93bk5vZGUpO1xuXG4gIGxpbmtNYXJrZG93bk5vZGVzLmZvckVhY2goKGxpbmtNYXJrZG93bk5vZGUpID0+IHtcbiAgICBjb25zdCBpbmRlbnQgPSBudWxsLFxuICAgICAgICAgIGlkZW50aWZpZXIgPSBsaW5rTWFya2Rvd25Ob2RlLmlkZW50aWZpZXIoY29udGV4dCksXG4gICAgICAgICAgaWRlbnRpZmllcnNJbmNsdWRlc0lkZW50aWZpZXIgPSBpZGVudGlmaWVycy5pbmNsdWRlcyhpZGVudGlmaWVyKSxcbiAgICAgICAgICBsaW5rTWFya2Rvd25Ob2RlSFRNTCA9IGxpbmtNYXJrZG93bk5vZGUuYXNIVE1MKGluZGVudCwgY29udGV4dCksXG4gICAgICAgICAgaW5kZXggPSBpbmRleE9mKGNoaWxkTm9kZXNIVE1MLCBsaW5rTWFya2Rvd25Ob2RlSFRNTCksXG4gICAgICAgICAgbGVuZ3RoID0gc3RybGVuKGxpbmtNYXJrZG93bk5vZGVIVE1MKSxcbiAgICAgICAgICBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSBsZW5ndGg7IC8vL1xuXG4gICAgaWYgKGlkZW50aWZpZXJzSW5jbHVkZXNJZGVudGlmaWVyKSB7XG4gICAgICBjb25zdCBsaW5rTWFya2Rvd25Ob2RlSFRNTCA9IGxpbmtNYXJrZG93bk5vZGUuYXNIVE1MKGluZGVudCwgY29udGV4dCwgbnVtYmVyKTtcblxuICAgICAgY2hpbGROb2Rlc0hUTUwgPSBzcGxpY2UoY2hpbGROb2Rlc0hUTUwsIHN0YXJ0LCBkZWxldGVDb3VudCwgbGlua01hcmtkb3duTm9kZUhUTUwpO1xuXG4gICAgICBudW1iZXIrKztcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGROb2Rlc0hUTUwgPSBjaG9wKGNoaWxkTm9kZXNIVE1MLCBzdGFydCwgZGVsZXRlQ291bnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNoaWxkTm9kZXNIVE1MO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVudW1iZXJMaW5rTWFya2Rvd25Ob2RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgZm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSwgY29udGV4dCkge1xuICBsZXQgbnVtYmVyID0gMTtcblxuICBjb25zdCBpZGVudGlmaWVycyA9IGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUuaWRlbnRpZmllcnMoKSxcbiAgICAgICAgbGlua01hcmtkb3duTm9kZXMgPSBsaW5rTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlKGRpdmlzaW9uTWFya2Rvd25Ob2RlKTtcblxuICBsaW5rTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChsaW5rTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3QgaWRlbnRpZmllciA9IGxpbmtNYXJrZG93bk5vZGUuaWRlbnRpZmllcihjb250ZXh0KSxcbiAgICAgICAgICBsaW5rTWFya2Rvd25Ob2RlRE9NRWxlbWVudCA9IGxpbmtNYXJrZG93bk5vZGUuZ2V0RE9NRWxlbWVudCgpLFxuICAgICAgICAgIGlkZW50aWZpZXJzSW5jbHVkZXNJZGVudGlmaWVyID0gaWRlbnRpZmllcnMuaW5jbHVkZXMoaWRlbnRpZmllcik7XG5cbiAgICBsZXQgaW5uZXJIVE1MO1xuXG4gICAgaWYgKGlkZW50aWZpZXJzSW5jbHVkZXNJZGVudGlmaWVyKSB7XG4gICAgICBpbm5lckhUTUwgPSBgJHtudW1iZXJ9YDtcblxuICAgICAgbnVtYmVyKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVySFRNTCA9IEVNUFRZX1NUUklORztcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKGxpbmtNYXJrZG93bk5vZGVET01FbGVtZW50LCB7XG4gICAgICBpbm5lckhUTUxcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVudW1iZXJMaW5rTWFya2Rvd25Ob2Rlc1xufTtcbiJdLCJuYW1lcyI6WyJhcHBlbmRGb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlSFRNTCIsInJlbnVtYmVyTGlua01hcmtkb3duTm9kZXMiLCJyZW51bWJlckxpbmtNYXJrZG93bk5vZGVzSFRNTCIsInN0cmxlbiIsInN0cmluZ1V0aWxpdGllcyIsImluZGV4T2YiLCJjaGlsZE5vZGVzSFRNTCIsImZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUiLCJpbmRlbnQiLCJjb250ZXh0IiwiZm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZUhUTUwiLCJhc0hUTUwiLCJkaXZpc2lvbk1hcmtkb3duTm9kZSIsIm51bWJlciIsImlkZW50aWZpZXJzIiwibGlua01hcmtkb3duTm9kZXMiLCJsaW5rTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlIiwiZm9yRWFjaCIsImxpbmtNYXJrZG93bk5vZGUiLCJpZGVudGlmaWVyIiwiaWRlbnRpZmllcnNJbmNsdWRlc0lkZW50aWZpZXIiLCJpbmNsdWRlcyIsImxpbmtNYXJrZG93bk5vZGVIVE1MIiwiaW5kZXgiLCJsZW5ndGgiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwiY2hvcCIsImxpbmtNYXJrZG93bk5vZGVET01FbGVtZW50IiwiZ2V0RE9NRWxlbWVudCIsImlubmVySFRNTCIsIkVNUFRZX1NUUklORyIsIk9iamVjdCIsImFzc2lnbiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBVWdCQSxtQ0FBbUM7ZUFBbkNBOztJQWlFaEIsT0FFRTtlQUZGOztJQTNCZ0JDLHlCQUF5QjtlQUF6QkE7O0lBOUJBQyw2QkFBNkI7ZUFBN0JBOzs7eUJBaEJnQjt5QkFFSDtzQkFDQTtxQkFDYTtBQUUxQyxJQUFRQyxTQUFvQkMsMEJBQWUsQ0FBbkNELFFBQVFFLFVBQVlELDBCQUFlLENBQTNCQztBQUVULFNBQVNMLG9DQUFvQ00sY0FBYyxFQUFFQyx5QkFBeUIsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQzVHLElBQU1DLGdDQUFnQ0gsMEJBQTBCSSxNQUFNLENBQUNILFFBQVFDO0lBRS9FSCxpQkFBaUIsQUFBQyxHQUFtQkksT0FBakJKLGdCQUErQyxPQUE5Qkk7SUFFckMsT0FBT0o7QUFDVDtBQUVPLFNBQVNKLDhCQUE4QkksY0FBYyxFQUFFTSxvQkFBb0IsRUFBRUwseUJBQXlCLEVBQUVFLE9BQU87SUFDcEgsSUFBSUksU0FBUztJQUViLElBQU1DLGNBQWNQLDBCQUEwQk8sV0FBVyxJQUNuREMsb0JBQW9CQyxJQUFBQSxnQ0FBeUIsRUFBQ0o7SUFFcERHLGtCQUFrQkUsT0FBTyxDQUFDLFNBQUNDO1FBQ3pCLElBQU1WLFNBQVMsTUFDVFcsYUFBYUQsaUJBQWlCQyxVQUFVLENBQUNWLFVBQ3pDVyxnQ0FBZ0NOLFlBQVlPLFFBQVEsQ0FBQ0YsYUFDckRHLHVCQUF1QkosaUJBQWlCUCxNQUFNLENBQUNILFFBQVFDLFVBQ3ZEYyxRQUFRbEIsUUFBUUMsZ0JBQWdCZ0IsdUJBQ2hDRSxTQUFTckIsT0FBT21CLHVCQUNoQkcsUUFBUUYsT0FDUkcsY0FBY0YsUUFBUSxHQUFHO1FBRS9CLElBQUlKLCtCQUErQjtZQUNqQyxJQUFNRSx3QkFBdUJKLGlCQUFpQlAsTUFBTSxDQUFDSCxRQUFRQyxTQUFTSTtZQUV0RVAsaUJBQWlCcUIsSUFBQUEsY0FBTSxFQUFDckIsZ0JBQWdCbUIsT0FBT0MsYUFBYUo7WUFFNURUO1FBQ0YsT0FBTztZQUNMUCxpQkFBaUJzQixJQUFBQSxZQUFJLEVBQUN0QixnQkFBZ0JtQixPQUFPQztRQUMvQztJQUNGO0lBRUEsT0FBT3BCO0FBQ1Q7QUFFTyxTQUFTTCwwQkFBMEJXLG9CQUFvQixFQUFFTCx5QkFBeUIsRUFBRUUsT0FBTztJQUNoRyxJQUFJSSxTQUFTO0lBRWIsSUFBTUMsY0FBY1AsMEJBQTBCTyxXQUFXLElBQ25EQyxvQkFBb0JDLElBQUFBLGdDQUF5QixFQUFDSjtJQUVwREcsa0JBQWtCRSxPQUFPLENBQUMsU0FBQ0M7UUFDekIsSUFBTUMsYUFBYUQsaUJBQWlCQyxVQUFVLENBQUNWLFVBQ3pDb0IsNkJBQTZCWCxpQkFBaUJZLGFBQWEsSUFDM0RWLGdDQUFnQ04sWUFBWU8sUUFBUSxDQUFDRjtRQUUzRCxJQUFJWTtRQUVKLElBQUlYLCtCQUErQjtZQUNqQ1csWUFBWSxBQUFDLEdBQVMsT0FBUGxCO1lBRWZBO1FBQ0YsT0FBTztZQUNMa0IsWUFBWUMsdUJBQVk7UUFDMUI7UUFFQUMsT0FBT0MsTUFBTSxDQUFDTCw0QkFBNEI7WUFDeENFLFdBQUFBO1FBQ0Y7SUFDRjtBQUNGO0lBRUEsV0FBZTtJQUNiOUIsMkJBQUFBO0FBQ0YifQ==