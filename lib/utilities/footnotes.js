"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    footnotesListMarkdownNodeFromFootnotesListDOMElement: function() {
        return footnotesListMarkdownNodeFromFootnotesListDOMElement;
    },
    renumberFootnoteLinkMarkdownNodes: function() {
        return renumberFootnoteLinkMarkdownNodes;
    }
});
var _footnotesList = /*#__PURE__*/ _interop_require_default(require("../node/markdown/footnotesList"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function renumberFootnoteLinkMarkdownNodes(divisionMarkdownNode, footnoteReplacementMap, callback, context) {
    var node = divisionMarkdownNode, footnoteLinkMarkdownNodes = (0, _query.footnoteLinkMarkdownNodesFromNode)(node);
    footnoteLinkMarkdownNodes.forEach(function(footnoteLinkMarkdownNode) {
        var identifier = footnoteLinkMarkdownNode.identifier(context), footnoteReplacement = footnoteReplacementMap[identifier] || null;
        if (footnoteReplacement !== null) {
            var number = footnoteReplacement.getNumber();
            footnoteLinkMarkdownNode.setNumber(number);
            callback(footnoteLinkMarkdownNode);
        }
    });
}
function footnotesListMarkdownNodeFromFootnotesListDOMElement(footnotesListDOMElement) {
    var domElement = footnotesListDOMElement, footnotesListMarkdownNode = _footnotesList.default.fromDOMElement(domElement);
    return footnotesListMarkdownNode;
}
var _default = {
    renumberFootnoteLinkMarkdownNodes: renumberFootnoteLinkMarkdownNodes,
    footnotesListMarkdownNodeFromFootnotesListDOMElement: footnotesListMarkdownNodeFromFootnotesListDOMElement
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZm9vdG5vdGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgRm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSBmcm9tIFwiLi4vbm9kZS9tYXJrZG93bi9mb290bm90ZXNMaXN0XCI7XG5cbmltcG9ydCB7IGZvb3Rub3RlTGlua01hcmtkb3duTm9kZXNGcm9tTm9kZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbnVtYmVyRm9vdG5vdGVMaW5rTWFya2Rvd25Ob2RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgZm9vdG5vdGVSZXBsYWNlbWVudE1hcCwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgY29uc3Qgbm9kZSA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLCAgLy8vXG4gICAgICAgIGZvb3Rub3RlTGlua01hcmtkb3duTm9kZXMgPSBmb290bm90ZUxpbmtNYXJrZG93bk5vZGVzRnJvbU5vZGUobm9kZSk7XG5cbiAgZm9vdG5vdGVMaW5rTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChmb290bm90ZUxpbmtNYXJrZG93bk5vZGUpID0+IHtcbiAgICBjb25zdCBpZGVudGlmaWVyID0gZm9vdG5vdGVMaW5rTWFya2Rvd25Ob2RlLmlkZW50aWZpZXIoY29udGV4dCksXG4gICAgICAgICAgZm9vdG5vdGVSZXBsYWNlbWVudCA9IGZvb3Rub3RlUmVwbGFjZW1lbnRNYXBbaWRlbnRpZmllcl0gfHwgbnVsbDtcblxuICAgIGlmIChmb290bm90ZVJlcGxhY2VtZW50ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBudW1iZXIgPSBmb290bm90ZVJlcGxhY2VtZW50LmdldE51bWJlcigpO1xuXG4gICAgICBmb290bm90ZUxpbmtNYXJrZG93bk5vZGUuc2V0TnVtYmVyKG51bWJlcik7XG5cbiAgICAgIGNhbGxiYWNrKGZvb3Rub3RlTGlua01hcmtkb3duTm9kZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGVGcm9tRm9vdG5vdGVzTGlzdERPTUVsZW1lbnQoZm9vdG5vdGVzTGlzdERPTUVsZW1lbnQpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IGZvb3Rub3Rlc0xpc3RET01FbGVtZW50LCAvLy9cbiAgICAgICAgZm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSA9IEZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUuZnJvbURPTUVsZW1lbnQoZG9tRWxlbWVudCk7XG5cbiAgcmV0dXJuIGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVudW1iZXJGb290bm90ZUxpbmtNYXJrZG93bk5vZGVzLFxuICBmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlRnJvbUZvb3Rub3Rlc0xpc3RET01FbGVtZW50XG59O1xuIl0sIm5hbWVzIjpbImZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGVGcm9tRm9vdG5vdGVzTGlzdERPTUVsZW1lbnQiLCJyZW51bWJlckZvb3Rub3RlTGlua01hcmtkb3duTm9kZXMiLCJkaXZpc2lvbk1hcmtkb3duTm9kZSIsImZvb3Rub3RlUmVwbGFjZW1lbnRNYXAiLCJjYWxsYmFjayIsImNvbnRleHQiLCJub2RlIiwiZm9vdG5vdGVMaW5rTWFya2Rvd25Ob2RlcyIsImZvb3Rub3RlTGlua01hcmtkb3duTm9kZXNGcm9tTm9kZSIsImZvckVhY2giLCJmb290bm90ZUxpbmtNYXJrZG93bk5vZGUiLCJpZGVudGlmaWVyIiwiZm9vdG5vdGVSZXBsYWNlbWVudCIsIm51bWJlciIsImdldE51bWJlciIsInNldE51bWJlciIsImZvb3Rub3Rlc0xpc3RET01FbGVtZW50IiwiZG9tRWxlbWVudCIsImZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUiLCJGb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlIiwiZnJvbURPTUVsZW1lbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQStCQSxPQUdFO2VBSEY7O0lBUGdCQSxvREFBb0Q7ZUFBcERBOztJQWxCQUMsaUNBQWlDO2VBQWpDQTs7O29FQUpzQjtxQkFFWTs7Ozs7O0FBRTNDLFNBQVNBLGtDQUFrQ0Msb0JBQW9CLEVBQUVDLHNCQUFzQixFQUFFQyxRQUFRLEVBQUVDLE9BQU87SUFDL0csSUFBTUMsT0FBT0osc0JBQ1BLLDRCQUE0QkMsSUFBQUEsd0NBQWlDLEVBQUNGO0lBRXBFQywwQkFBMEJFLE9BQU8sQ0FBQyxTQUFDQztRQUNqQyxJQUFNQyxhQUFhRCx5QkFBeUJDLFVBQVUsQ0FBQ04sVUFDakRPLHNCQUFzQlQsc0JBQXNCLENBQUNRLFdBQVcsSUFBSTtRQUVsRSxJQUFJQyx3QkFBd0IsTUFBTTtZQUNoQyxJQUFNQyxTQUFTRCxvQkFBb0JFLFNBQVM7WUFFNUNKLHlCQUF5QkssU0FBUyxDQUFDRjtZQUVuQ1QsU0FBU007UUFDWDtJQUNGO0FBQ0Y7QUFFTyxTQUFTVixxREFBcURnQix1QkFBdUI7SUFDMUYsSUFBTUMsYUFBYUQseUJBQ2JFLDRCQUE0QkMsc0JBQXlCLENBQUNDLGNBQWMsQ0FBQ0g7SUFFM0UsT0FBT0M7QUFDVDtJQUVBLFdBQWU7SUFDYmpCLG1DQUFBQTtJQUNBRCxzREFBQUE7QUFDRiJ9