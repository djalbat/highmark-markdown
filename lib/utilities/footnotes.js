"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    footnotesListMarkdownNodeFromFootnotesListDOMElement: function() {
        return footnotesListMarkdownNodeFromFootnotesListDOMElement;
    },
    renumberFootnoteLinkMarkdownNodes: function() {
        return renumberFootnoteLinkMarkdownNodes;
    }
});
var _footnotes = /*#__PURE__*/ _interop_require_default(require("../node/markdown/list/footnotes"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function renumberFootnoteLinkMarkdownNodes(divisionMarkdownNode, footnoteReplacementMap, context) {
    var node = divisionMarkdownNode, footnoteLinkMarkdownNodes = footnoteLinkMarkdownNodesFromNode(node);
    footnoteLinkMarkdownNodes.forEach(function(footnoteLinkMarkdownNode) {
        var identifier = footnoteLinkMarkdownNode.identifier(context), footnoteReplacement = footnoteReplacementMap[identifier] || null, number = footnoteReplacement !== null ? footnoteReplacement.getNumber() : null;
        footnoteLinkMarkdownNode.renumber(number);
    });
}
function footnotesListMarkdownNodeFromFootnotesListDOMElement(footnotesListDOMElement) {
    var domElement = footnotesListDOMElement, footnotesListMarkdownNode = _footnotes.default.fromDOMElement(domElement);
    return footnotesListMarkdownNode;
}
var _default = {
    renumberFootnoteLinkMarkdownNodes: renumberFootnoteLinkMarkdownNodes,
    footnotesListMarkdownNodeFromFootnotesListDOMElement: footnotesListMarkdownNodeFromFootnotesListDOMElement
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZm9vdG5vdGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgRm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSBmcm9tIFwiLi4vbm9kZS9tYXJrZG93bi9saXN0L2Zvb3Rub3Rlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVudW1iZXJGb290bm90ZUxpbmtNYXJrZG93bk5vZGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBmb290bm90ZVJlcGxhY2VtZW50TWFwLCBjb250ZXh0KSB7XG4gIGNvbnN0IG5vZGUgPSBkaXZpc2lvbk1hcmtkb3duTm9kZSwgIC8vL1xuICAgICAgICBmb290bm90ZUxpbmtNYXJrZG93bk5vZGVzID0gZm9vdG5vdGVMaW5rTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlKG5vZGUpO1xuXG4gIGZvb3Rub3RlTGlua01hcmtkb3duTm9kZXMuZm9yRWFjaCgoZm9vdG5vdGVMaW5rTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3QgaWRlbnRpZmllciA9IGZvb3Rub3RlTGlua01hcmtkb3duTm9kZS5pZGVudGlmaWVyKGNvbnRleHQpLFxuICAgICAgICAgIGZvb3Rub3RlUmVwbGFjZW1lbnQgPSBmb290bm90ZVJlcGxhY2VtZW50TWFwW2lkZW50aWZpZXJdIHx8IG51bGwsXG4gICAgICAgICAgbnVtYmVyID0gKGZvb3Rub3RlUmVwbGFjZW1lbnQgIT09IG51bGwpID9cbiAgICAgICAgICAgICAgICAgICAgIGZvb3Rub3RlUmVwbGFjZW1lbnQuZ2V0TnVtYmVyKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDtcblxuICAgIGZvb3Rub3RlTGlua01hcmtkb3duTm9kZS5yZW51bWJlcihudW1iZXIpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGVGcm9tRm9vdG5vdGVzTGlzdERPTUVsZW1lbnQoZm9vdG5vdGVzTGlzdERPTUVsZW1lbnQpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IGZvb3Rub3Rlc0xpc3RET01FbGVtZW50LCAvLy9cbiAgICAgICAgZm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSA9IEZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUuZnJvbURPTUVsZW1lbnQoZG9tRWxlbWVudCk7XG5cbiAgcmV0dXJuIGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVudW1iZXJGb290bm90ZUxpbmtNYXJrZG93bk5vZGVzLFxuICBmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlRnJvbUZvb3Rub3Rlc0xpc3RET01FbGVtZW50XG59O1xuIl0sIm5hbWVzIjpbImZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGVGcm9tRm9vdG5vdGVzTGlzdERPTUVsZW1lbnQiLCJyZW51bWJlckZvb3Rub3RlTGlua01hcmtkb3duTm9kZXMiLCJkaXZpc2lvbk1hcmtkb3duTm9kZSIsImZvb3Rub3RlUmVwbGFjZW1lbnRNYXAiLCJjb250ZXh0Iiwibm9kZSIsImZvb3Rub3RlTGlua01hcmtkb3duTm9kZXMiLCJmb290bm90ZUxpbmtNYXJrZG93bk5vZGVzRnJvbU5vZGUiLCJmb3JFYWNoIiwiZm9vdG5vdGVMaW5rTWFya2Rvd25Ob2RlIiwiaWRlbnRpZmllciIsImZvb3Rub3RlUmVwbGFjZW1lbnQiLCJudW1iZXIiLCJnZXROdW1iZXIiLCJyZW51bWJlciIsImZvb3Rub3Rlc0xpc3RET01FbGVtZW50IiwiZG9tRWxlbWVudCIsImZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUiLCJGb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlIiwiZnJvbURPTUVsZW1lbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQTBCQSxPQUdFO2VBSEY7O0lBUGdCQSxvREFBb0Q7ZUFBcERBOztJQWZBQyxpQ0FBaUM7ZUFBakNBOzs7Z0VBRnNCOzs7Ozs7QUFFL0IsU0FBU0Esa0NBQWtDQyxvQkFBb0IsRUFBRUMsc0JBQXNCLEVBQUVDLE9BQU87SUFDckcsSUFBTUMsT0FBT0gsc0JBQ1BJLDRCQUE0QkMsa0NBQWtDRjtJQUVwRUMsMEJBQTBCRSxPQUFPLENBQUMsU0FBQ0M7UUFDakMsSUFBTUMsYUFBYUQseUJBQXlCQyxVQUFVLENBQUNOLFVBQ2pETyxzQkFBc0JSLHNCQUFzQixDQUFDTyxXQUFXLElBQUksTUFDNURFLFNBQVMsQUFBQ0Qsd0JBQXdCLE9BQ3ZCQSxvQkFBb0JFLFNBQVMsS0FDMUI7UUFFcEJKLHlCQUF5QkssUUFBUSxDQUFDRjtJQUNwQztBQUNGO0FBRU8sU0FBU1oscURBQXFEZSx1QkFBdUI7SUFDMUYsSUFBTUMsYUFBYUQseUJBQ2JFLDRCQUE0QkMsa0JBQXlCLENBQUNDLGNBQWMsQ0FBQ0g7SUFFM0UsT0FBT0M7QUFDVDtJQUVBLFdBQWU7SUFDYmhCLG1DQUFBQTtJQUNBRCxzREFBQUE7QUFDRiJ9