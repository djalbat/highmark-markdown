"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CSSClassFromMarkdownStyleNode () {
        return CSSClassFromMarkdownStyleNode;
    },
    get HTMLClassFromMarkdownNode () {
        return HTMLClassFromMarkdownNode;
    },
    get cssFromMarkdownStyleAndSelectorsString () {
        return cssFromMarkdownStyleAndSelectorsString;
    },
    get default () {
        return _default;
    },
    get markdownNodeFromTokens () {
        return markdownNodeFromTokens;
    },
    get markdownStyleNodeFromTokens () {
        return markdownStyleNodeFromTokens;
    },
    get tokensFromMarkdown () {
        return tokensFromMarkdown;
    },
    get tokensFromMarkdownStyle () {
        return tokensFromMarkdownStyle;
    },
    get topmostCSSNodeFromMarkdownStyleNode () {
        return topmostCSSNodeFromMarkdownStyleNode;
    },
    get topmostCSSNodeFromMarkdownStyleNodes () {
        return topmostCSSNodeFromMarkdownStyleNodes;
    },
    get topmostHTMLNodeFromMarkdownNode () {
        return topmostHTMLNodeFromMarkdownNode;
    },
    get topmostHTMLNodeFromMarkdownNodes () {
        return topmostHTMLNodeFromMarkdownNodes;
    }
});
var _occamdom = require("occam-dom");
var _css = /*#__PURE__*/ _interop_require_default(require("../node/css"));
var _html = /*#__PURE__*/ _interop_require_default(require("../node/html"));
var _css1 = /*#__PURE__*/ _interop_require_default(require("../map/node/css"));
var _html1 = /*#__PURE__*/ _interop_require_default(require("../map/node/html"));
var _lexer = /*#__PURE__*/ _interop_require_default(require("../markdown/lexer"));
var _parser = /*#__PURE__*/ _interop_require_default(require("../markdown/parser"));
var _topmost = /*#__PURE__*/ _interop_require_default(require("../node/css/topmost"));
var _topmost1 = /*#__PURE__*/ _interop_require_default(require("../node/html/topmost"));
var _markdown = /*#__PURE__*/ _interop_require_default(require("../queries/markdown"));
var _lexer1 = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/lexer"));
var _parser1 = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/parser"));
var _markdownStyle = /*#__PURE__*/ _interop_require_default(require("../queries/markdownStyle"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var topmostNodeFromOuterNodes = _occamdom.nodeUtilities.topmostNodeFromOuterNodes;
var markdownLexer = _lexer.default.fromNothing(), markdownParser = _parser.default.fromNothing(), markdownStyleLexer = _lexer1.default.fromNothing(), markdownStyleParser = _parser1.default.fromNothing();
function tokensFromMarkdown(markdown) {
    var lexer = markdownLexer, content = markdown, tokens = lexer.tokenise(content);
    return tokens;
}
function markdownNodeFromTokens(tokens) {
    var parser = markdownParser, startRule = parser.getStartRule(), node = parser.parse(tokens, startRule), markdownNode = node; ///
    return node;
}
function tokensFromMarkdownStyle(markdownStyle) {
    var lexer = markdownStyleLexer, content = markdownStyle, tokens = lexer.tokenise(content);
    return tokens;
}
function HTMLClassFromMarkdownNode(markdownNode) {
    var Class;
    if (markdownNode === null) {
        Class = _topmost1.default; ///
    } else {
        var nonTerminalNode = markdownNode, ruleName = nonTerminalNode.getRuleName();
        Class = _html1.default[ruleName] || _html.default;
    }
    return Class;
}
function markdownStyleNodeFromTokens(tokens) {
    var parser = markdownStyleParser, startRule = parser.getStartRule(), node = parser.parse(tokens, startRule), markdownStyleNode = node; ///
    return markdownStyleNode;
}
function CSSClassFromMarkdownStyleNode(markdownStyleNode) {
    var Class;
    if (markdownStyleNode === null) {
        Class = _topmost.default; ///
    } else {
        var nonTerminalNode = markdownStyleNode, ruleName = nonTerminalNode.getRuleName();
        Class = _css1.default[ruleName] || _css.default;
    }
    return Class;
}
function topmostHTMLNodeFromMarkdownNode(markdownNode) {
    var node = markdownNode, queries = _markdown.default, nodes = (0, _query.nodesFromNodeAndQueries)(node, queries), outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(HTMLClassFromMarkdownNode, outerNodes), topmostHTMLNode = topmostNode; ///
    return topmostHTMLNode;
}
function topmostHTMLNodeFromMarkdownNodes(markdownNodes) {
    var nodes = [], queries = _markdown.default; ///
    markdownNodes.forEach(function(markdownNode) {
        var node = markdownNode; ///
        (0, _query.nodesFromNodeAndQueries)(node, queries, nodes);
    });
    var outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(HTMLClassFromMarkdownNode, outerNodes), topmostHTMLNode = topmostNode; ///
    return topmostHTMLNode;
}
function topmostCSSNodeFromMarkdownStyleNode(markdownStyleNode) {
    var node = markdownStyleNode, queries = _markdownStyle.default, nodes = (0, _query.nodesFromNodeAndQueries)(node, queries), outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(CSSClassFromMarkdownStyleNode, outerNodes), topmostCSSNode = topmostNode; ///
    return topmostCSSNode;
}
function topmostCSSNodeFromMarkdownStyleNodes(markdownStyleNodes) {
    var nodes = [], queries = _markdownStyle.default; ///
    markdownStyleNodes.forEach(function(markdownStyleNode) {
        var node = markdownStyleNode; ///
        (0, _query.nodesFromNodeAndQueries)(node, queries, nodes);
    });
    var outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(CSSClassFromMarkdownStyleNode, outerNodes), topmostCSSNode = topmostNode; ///
    return topmostCSSNode;
}
function cssFromMarkdownStyleAndSelectorsString(markdownStyle, selectorsString) {
    markdownStyle = "".concat(selectorsString, " {\n  ").concat(markdownStyle, "\n}");
    var tokens = tokensFromMarkdownStyle(markdownStyle), markdownStyleNode = markdownStyleNodeFromTokens(tokens), topmostCSSNode = topmostCSSNodeFromMarkdownStyleNode(markdownStyleNode), context = {
        tokens: tokens
    };
    topmostCSSNode.resolve(context);
    var css = topmostCSSNode.asCSS(context);
    return css;
}
var _default = {
    tokensFromMarkdown: tokensFromMarkdown,
    markdownNodeFromTokens: markdownNodeFromTokens,
    tokensFromMarkdownStyle: tokensFromMarkdownStyle,
    HTMLClassFromMarkdownNode: HTMLClassFromMarkdownNode,
    markdownStyleNodeFromTokens: markdownStyleNodeFromTokens,
    CSSClassFromMarkdownStyleNode: CSSClassFromMarkdownStyleNode,
    topmostHTMLNodeFromMarkdownNode: topmostHTMLNodeFromMarkdownNode,
    topmostHTMLNodeFromMarkdownNodes: topmostHTMLNodeFromMarkdownNodes,
    topmostCSSNodeFromMarkdownStyleNode: topmostCSSNodeFromMarkdownStyleNode,
    topmostCSSNodeFromMarkdownStyleNodes: topmostCSSNodeFromMarkdownStyleNodes,
    cssFromMarkdownStyleAndSelectorsString: cssFromMarkdownStyleAndSelectorsString
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZ3JhbW1hci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgbm9kZVV0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1kb21cIjtcblxuaW1wb3J0IENTU05vZGUgZnJvbSBcIi4uL25vZGUvY3NzXCI7XG5pbXBvcnQgSFRNTE5vZGUgZnJvbSBcIi4uL25vZGUvaHRtbFwiO1xuaW1wb3J0IGNzc05vZGVNYXAgZnJvbSBcIi4uL21hcC9ub2RlL2Nzc1wiO1xuaW1wb3J0IGh0bWxOb2RlTWFwIGZyb20gXCIuLi9tYXAvbm9kZS9odG1sXCI7XG5pbXBvcnQgTWFya2Rvd25MZXhlciBmcm9tIFwiLi4vbWFya2Rvd24vbGV4ZXJcIjtcbmltcG9ydCBNYXJrZG93blBhcnNlciBmcm9tIFwiLi4vbWFya2Rvd24vcGFyc2VyXCI7XG5pbXBvcnQgVG9wbW9zdENTU05vZGUgZnJvbSBcIi4uL25vZGUvY3NzL3RvcG1vc3RcIjtcbmltcG9ydCBUb3Btb3N0SFRNTE5vZGUgZnJvbSBcIi4uL25vZGUvaHRtbC90b3Btb3N0XCI7XG5pbXBvcnQgbWFya2Rvd25RdWVyaWVzIGZyb20gXCIuLi9xdWVyaWVzL21hcmtkb3duXCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZUxleGVyIGZyb20gXCIuLi9tYXJrZG93blN0eWxlL2xleGVyXCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZVBhcnNlciBmcm9tIFwiLi4vbWFya2Rvd25TdHlsZS9wYXJzZXJcIjtcbmltcG9ydCBtYXJrZG93blN0eWxlUXVlcmllcyBmcm9tIFwiLi4vcXVlcmllcy9tYXJrZG93blN0eWxlXCI7XG5cbmltcG9ydCB7IG5vZGVzRnJvbU5vZGVBbmRRdWVyaWVzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCB7IHRvcG1vc3ROb2RlRnJvbU91dGVyTm9kZXMgfSA9IG5vZGVVdGlsaXRpZXM7XG5cbmNvbnN0IG1hcmtkb3duTGV4ZXIgPSBNYXJrZG93bkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBtYXJrZG93blBhcnNlciA9IE1hcmtkb3duUGFyc2VyLmZyb21Ob3RoaW5nKCksXG4gICAgICBtYXJrZG93blN0eWxlTGV4ZXIgPSBNYXJrZG93blN0eWxlTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duU3R5bGVQYXJzZXIgPSBNYXJrZG93blN0eWxlUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbnNGcm9tTWFya2Rvd24obWFya2Rvd24pIHtcbiAgY29uc3QgbGV4ZXIgPSBtYXJrZG93bkxleGVyLCAvLy9cbiAgICAgICAgY29udGVudCA9IG1hcmtkb3duLCAgLy8vXG4gICAgICAgIHRva2VucyA9IGxleGVyLnRva2VuaXNlKGNvbnRlbnQpO1xuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXJrZG93bk5vZGVGcm9tVG9rZW5zKHRva2Vucykge1xuICBjb25zdCBwYXJzZXIgPSBtYXJrZG93blBhcnNlciwgLy8vXG4gICAgICAgIHN0YXJ0UnVsZSA9IHBhcnNlci5nZXRTdGFydFJ1bGUoKSxcbiAgICAgICAgbm9kZSA9IHBhcnNlci5wYXJzZSh0b2tlbnMsIHN0YXJ0UnVsZSksXG4gICAgICAgIG1hcmtkb3duTm9kZSA9IG5vZGU7ICAvLy9cblxuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRva2Vuc0Zyb21NYXJrZG93blN0eWxlKG1hcmtkb3duU3R5bGUpIHtcbiAgY29uc3QgbGV4ZXIgPSBtYXJrZG93blN0eWxlTGV4ZXIsIC8vL1xuICAgICAgICBjb250ZW50ID0gbWFya2Rvd25TdHlsZSwgIC8vL1xuICAgICAgICB0b2tlbnMgPSBsZXhlci50b2tlbmlzZShjb250ZW50KTtcblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSFRNTENsYXNzRnJvbU1hcmtkb3duTm9kZShtYXJrZG93bk5vZGUpIHtcbiAgbGV0IENsYXNzO1xuXG4gIGlmIChtYXJrZG93bk5vZGUgPT09IG51bGwpIHtcbiAgICBDbGFzcyA9IFRvcG1vc3RIVE1MTm9kZTsgIC8vL1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG1hcmtkb3duTm9kZSwgIC8vL1xuICAgICAgICAgIHJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCk7XG5cbiAgICBDbGFzcyA9IGh0bWxOb2RlTWFwW3J1bGVOYW1lXSB8fCBIVE1MTm9kZTtcbiAgfVxuXG4gIHJldHVybiBDbGFzcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtkb3duU3R5bGVOb2RlRnJvbVRva2Vucyh0b2tlbnMpIHtcbiAgY29uc3QgcGFyc2VyID0gbWFya2Rvd25TdHlsZVBhcnNlciwgLy8vXG4gICAgICAgIHN0YXJ0UnVsZSA9IHBhcnNlci5nZXRTdGFydFJ1bGUoKSxcbiAgICAgICAgbm9kZSA9IHBhcnNlci5wYXJzZSh0b2tlbnMsIHN0YXJ0UnVsZSksXG4gICAgICAgIG1hcmtkb3duU3R5bGVOb2RlID0gbm9kZTsgLy8vXG5cbiAgcmV0dXJuIG1hcmtkb3duU3R5bGVOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ1NTQ2xhc3NGcm9tTWFya2Rvd25TdHlsZU5vZGUobWFya2Rvd25TdHlsZU5vZGUpIHtcbiAgbGV0IENsYXNzO1xuXG4gIGlmIChtYXJrZG93blN0eWxlTm9kZSA9PT0gbnVsbCkge1xuICAgIENsYXNzID0gVG9wbW9zdENTU05vZGU7ICAvLy9cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBtYXJrZG93blN0eWxlTm9kZSwgIC8vL1xuICAgICAgICAgIHJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCk7XG5cbiAgICBDbGFzcyA9IGNzc05vZGVNYXBbcnVsZU5hbWVdIHx8IENTU05vZGU7XG4gIH1cblxuICByZXR1cm4gQ2xhc3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b3Btb3N0SFRNTE5vZGVGcm9tTWFya2Rvd25Ob2RlKG1hcmtkb3duTm9kZSkge1xuICBjb25zdCBub2RlID0gbWFya2Rvd25Ob2RlLCAgLy8vXG4gICAgICAgIHF1ZXJpZXMgPSBtYXJrZG93blF1ZXJpZXMsIC8vL1xuICAgICAgICBub2RlcyA9IG5vZGVzRnJvbU5vZGVBbmRRdWVyaWVzKG5vZGUsIHF1ZXJpZXMpLFxuICAgICAgICBvdXRlck5vZGVzID0gbm9kZXMsIC8vL1xuICAgICAgICB0b3Btb3N0Tm9kZSA9IHRvcG1vc3ROb2RlRnJvbU91dGVyTm9kZXMoSFRNTENsYXNzRnJvbU1hcmtkb3duTm9kZSwgb3V0ZXJOb2RlcyksXG4gICAgICAgIHRvcG1vc3RIVE1MTm9kZSA9IHRvcG1vc3ROb2RlOyAgLy8vXG5cbiAgcmV0dXJuIHRvcG1vc3RIVE1MTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvcG1vc3RIVE1MTm9kZUZyb21NYXJrZG93bk5vZGVzKG1hcmtkb3duTm9kZXMpIHtcbiAgY29uc3Qgbm9kZXMgPSBbXSxcbiAgICAgICAgcXVlcmllcyA9IG1hcmtkb3duUXVlcmllczsgIC8vL1xuXG4gIG1hcmtkb3duTm9kZXMuZm9yRWFjaCgobWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IG1hcmtkb3duTm9kZTsgIC8vL1xuXG4gICAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJpZXMobm9kZSwgcXVlcmllcywgbm9kZXMpO1xuICB9KTtcblxuICBjb25zdCBvdXRlck5vZGVzID0gbm9kZXMsIC8vL1xuICAgICAgICB0b3Btb3N0Tm9kZSA9IHRvcG1vc3ROb2RlRnJvbU91dGVyTm9kZXMoSFRNTENsYXNzRnJvbU1hcmtkb3duTm9kZSwgb3V0ZXJOb2RlcyksXG4gICAgICAgIHRvcG1vc3RIVE1MTm9kZSA9IHRvcG1vc3ROb2RlOyAgLy8vXG5cbiAgcmV0dXJuIHRvcG1vc3RIVE1MTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvcG1vc3RDU1NOb2RlRnJvbU1hcmtkb3duU3R5bGVOb2RlKG1hcmtkb3duU3R5bGVOb2RlKSB7XG4gIGNvbnN0IG5vZGUgPSBtYXJrZG93blN0eWxlTm9kZSwgIC8vL1xuICAgICAgICBxdWVyaWVzID0gbWFya2Rvd25TdHlsZVF1ZXJpZXMsIC8vL1xuICAgICAgICBub2RlcyA9IG5vZGVzRnJvbU5vZGVBbmRRdWVyaWVzKG5vZGUsIHF1ZXJpZXMpLFxuICAgICAgICBvdXRlck5vZGVzID0gbm9kZXMsIC8vL1xuICAgICAgICB0b3Btb3N0Tm9kZSA9IHRvcG1vc3ROb2RlRnJvbU91dGVyTm9kZXMoQ1NTQ2xhc3NGcm9tTWFya2Rvd25TdHlsZU5vZGUsIG91dGVyTm9kZXMpLFxuICAgICAgICB0b3Btb3N0Q1NTTm9kZSA9IHRvcG1vc3ROb2RlOyAgLy8vXG5cbiAgcmV0dXJuIHRvcG1vc3RDU1NOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9wbW9zdENTU05vZGVGcm9tTWFya2Rvd25TdHlsZU5vZGVzKG1hcmtkb3duU3R5bGVOb2Rlcykge1xuICBjb25zdCBub2RlcyA9IFtdLFxuICAgICAgICBxdWVyaWVzID0gbWFya2Rvd25TdHlsZVF1ZXJpZXM7ICAvLy9cblxuICBtYXJrZG93blN0eWxlTm9kZXMuZm9yRWFjaCgobWFya2Rvd25TdHlsZU5vZGUpID0+IHtcbiAgICBjb25zdCBub2RlID0gbWFya2Rvd25TdHlsZU5vZGU7ICAvLy9cblxuICAgIG5vZGVzRnJvbU5vZGVBbmRRdWVyaWVzKG5vZGUsIHF1ZXJpZXMsIG5vZGVzKTtcbiAgfSk7XG5cbiAgY29uc3Qgb3V0ZXJOb2RlcyA9IG5vZGVzLCAvLy9cbiAgICAgICAgdG9wbW9zdE5vZGUgPSB0b3Btb3N0Tm9kZUZyb21PdXRlck5vZGVzKENTU0NsYXNzRnJvbU1hcmtkb3duU3R5bGVOb2RlLCBvdXRlck5vZGVzKSxcbiAgICAgICAgdG9wbW9zdENTU05vZGUgPSB0b3Btb3N0Tm9kZTsgIC8vL1xuXG4gIHJldHVybiB0b3Btb3N0Q1NTTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzU3RyaW5nKG1hcmtkb3duU3R5bGUsIHNlbGVjdG9yc1N0cmluZykge1xuICBtYXJrZG93blN0eWxlID0gYCR7c2VsZWN0b3JzU3RyaW5nfSB7XG4gICR7bWFya2Rvd25TdHlsZX1cbn1gO1xuXG4gIGNvbnN0IHRva2VucyA9IHRva2Vuc0Zyb21NYXJrZG93blN0eWxlKG1hcmtkb3duU3R5bGUpLFxuICAgICAgICBtYXJrZG93blN0eWxlTm9kZSA9IG1hcmtkb3duU3R5bGVOb2RlRnJvbVRva2Vucyh0b2tlbnMpLFxuICAgICAgICB0b3Btb3N0Q1NTTm9kZSA9IHRvcG1vc3RDU1NOb2RlRnJvbU1hcmtkb3duU3R5bGVOb2RlKG1hcmtkb3duU3R5bGVOb2RlKSxcbiAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICB0b2tlbnNcbiAgICAgICAgfTtcblxuICB0b3Btb3N0Q1NTTm9kZS5yZXNvbHZlKGNvbnRleHQpO1xuXG4gIGNvbnN0IGNzcyA9IHRvcG1vc3RDU1NOb2RlLmFzQ1NTKGNvbnRleHQpO1xuXG4gIHJldHVybiBjc3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdG9rZW5zRnJvbU1hcmtkb3duLFxuICBtYXJrZG93bk5vZGVGcm9tVG9rZW5zLFxuICB0b2tlbnNGcm9tTWFya2Rvd25TdHlsZSxcbiAgSFRNTENsYXNzRnJvbU1hcmtkb3duTm9kZSxcbiAgbWFya2Rvd25TdHlsZU5vZGVGcm9tVG9rZW5zLFxuICBDU1NDbGFzc0Zyb21NYXJrZG93blN0eWxlTm9kZSxcbiAgdG9wbW9zdEhUTUxOb2RlRnJvbU1hcmtkb3duTm9kZSxcbiAgdG9wbW9zdEhUTUxOb2RlRnJvbU1hcmtkb3duTm9kZXMsXG4gIHRvcG1vc3RDU1NOb2RlRnJvbU1hcmtkb3duU3R5bGVOb2RlLFxuICB0b3Btb3N0Q1NTTm9kZUZyb21NYXJrZG93blN0eWxlTm9kZXMsXG4gIGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzU3RyaW5nXG59O1xuIl0sIm5hbWVzIjpbIkNTU0NsYXNzRnJvbU1hcmtkb3duU3R5bGVOb2RlIiwiSFRNTENsYXNzRnJvbU1hcmtkb3duTm9kZSIsImNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzU3RyaW5nIiwibWFya2Rvd25Ob2RlRnJvbVRva2VucyIsIm1hcmtkb3duU3R5bGVOb2RlRnJvbVRva2VucyIsInRva2Vuc0Zyb21NYXJrZG93biIsInRva2Vuc0Zyb21NYXJrZG93blN0eWxlIiwidG9wbW9zdENTU05vZGVGcm9tTWFya2Rvd25TdHlsZU5vZGUiLCJ0b3Btb3N0Q1NTTm9kZUZyb21NYXJrZG93blN0eWxlTm9kZXMiLCJ0b3Btb3N0SFRNTE5vZGVGcm9tTWFya2Rvd25Ob2RlIiwidG9wbW9zdEhUTUxOb2RlRnJvbU1hcmtkb3duTm9kZXMiLCJ0b3Btb3N0Tm9kZUZyb21PdXRlck5vZGVzIiwibm9kZVV0aWxpdGllcyIsIm1hcmtkb3duTGV4ZXIiLCJNYXJrZG93bkxleGVyIiwiZnJvbU5vdGhpbmciLCJtYXJrZG93blBhcnNlciIsIk1hcmtkb3duUGFyc2VyIiwibWFya2Rvd25TdHlsZUxleGVyIiwiTWFya2Rvd25TdHlsZUxleGVyIiwibWFya2Rvd25TdHlsZVBhcnNlciIsIk1hcmtkb3duU3R5bGVQYXJzZXIiLCJtYXJrZG93biIsImxleGVyIiwiY29udGVudCIsInRva2VucyIsInRva2VuaXNlIiwicGFyc2VyIiwic3RhcnRSdWxlIiwiZ2V0U3RhcnRSdWxlIiwibm9kZSIsInBhcnNlIiwibWFya2Rvd25Ob2RlIiwibWFya2Rvd25TdHlsZSIsIkNsYXNzIiwiVG9wbW9zdEhUTUxOb2RlIiwibm9uVGVybWluYWxOb2RlIiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImh0bWxOb2RlTWFwIiwiSFRNTE5vZGUiLCJtYXJrZG93blN0eWxlTm9kZSIsIlRvcG1vc3RDU1NOb2RlIiwiY3NzTm9kZU1hcCIsIkNTU05vZGUiLCJxdWVyaWVzIiwibWFya2Rvd25RdWVyaWVzIiwibm9kZXMiLCJub2Rlc0Zyb21Ob2RlQW5kUXVlcmllcyIsIm91dGVyTm9kZXMiLCJ0b3Btb3N0Tm9kZSIsInRvcG1vc3RIVE1MTm9kZSIsIm1hcmtkb3duTm9kZXMiLCJmb3JFYWNoIiwibWFya2Rvd25TdHlsZVF1ZXJpZXMiLCJ0b3Btb3N0Q1NTTm9kZSIsIm1hcmtkb3duU3R5bGVOb2RlcyIsInNlbGVjdG9yc1N0cmluZyIsImNvbnRleHQiLCJyZXNvbHZlIiwiY3NzIiwiYXNDU1MiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztRQTJFZ0JBO2VBQUFBOztRQXhCQUM7ZUFBQUE7O1FBK0ZBQztlQUFBQTs7UUFtQmhCO2VBQUE7O1FBbklnQkM7ZUFBQUE7O1FBZ0NBQztlQUFBQTs7UUF4Q0FDO2VBQUFBOztRQWlCQUM7ZUFBQUE7O1FBMkVBQztlQUFBQTs7UUFXQUM7ZUFBQUE7O1FBdkNBQztlQUFBQTs7UUFXQUM7ZUFBQUE7Ozt3QkFuR2M7MERBRVY7MkRBQ0M7MkRBQ0U7NERBQ0M7NERBQ0U7NkRBQ0M7OERBQ0E7K0RBQ0M7K0RBQ0E7NkRBQ0c7OERBQ0M7b0VBQ0M7cUJBRU87Ozs7OztBQUV4QyxJQUFNLEFBQUVDLDRCQUE4QkMsdUJBQWEsQ0FBM0NEO0FBRVIsSUFBTUUsZ0JBQWdCQyxjQUFhLENBQUNDLFdBQVcsSUFDekNDLGlCQUFpQkMsZUFBYyxDQUFDRixXQUFXLElBQzNDRyxxQkFBcUJDLGVBQWtCLENBQUNKLFdBQVcsSUFDbkRLLHNCQUFzQkMsZ0JBQW1CLENBQUNOLFdBQVc7QUFFcEQsU0FBU1YsbUJBQW1CaUIsUUFBUTtJQUN6QyxJQUFNQyxRQUFRVixlQUNSVyxVQUFVRixVQUNWRyxTQUFTRixNQUFNRyxRQUFRLENBQUNGO0lBRTlCLE9BQU9DO0FBQ1Q7QUFFTyxTQUFTdEIsdUJBQXVCc0IsTUFBTTtJQUMzQyxJQUFNRSxTQUFTWCxnQkFDVFksWUFBWUQsT0FBT0UsWUFBWSxJQUMvQkMsT0FBT0gsT0FBT0ksS0FBSyxDQUFDTixRQUFRRyxZQUM1QkksZUFBZUYsTUFB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