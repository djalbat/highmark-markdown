"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    renumberLinkMarkdownNodes: function() {
        return renumberLinkMarkdownNodes;
    },
    renumberLinkMarkdownNodesHTML: function() {
        return renumberLinkMarkdownNodesHTML;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
var strlen = _necessary.stringUtilities.strlen, indexOf = _necessary.stringUtilities.indexOf;
function renumberLinkMarkdownNodesHTML(childNodesHTML, divisionMarkdownNode, footnotesListMarkdownNode, context) {
    var number = 1;
    var identifiers = footnotesListMarkdownNode.identifiers(), linkMarkdownNodes = (0, _query.linkMarkdownNodesFromNode)(divisionMarkdownNode);
    linkMarkdownNodes.forEach(function(linkMarkdownNode) {
        var indent = null, identifier = linkMarkdownNode.identifier(context), identifiersIncludesIdentifier = identifiers.includes(identifier), linkMarkdownNodeHTML = linkMarkdownNode.asHTML(indent, context), index = indexOf(childNodesHTML, linkMarkdownNodeHTML), length = strlen(linkMarkdownNodeHTML), start = index, deleteCount = length; ///
        if (identifiersIncludesIdentifier) {
            var linkMarkdownNodeHTML1 = linkMarkdownNode.asHTML(indent, context, number);
            childNodesHTML = (0, _string.splice)(childNodesHTML, start, deleteCount, linkMarkdownNodeHTML1);
            number++;
        } else {
            childNodesHTML = (0, _string.chop)(childNodesHTML, start, deleteCount);
        }
    });
    return childNodesHTML;
}
function renumberLinkMarkdownNodes(divisionMarkdownNode, footnotesListMarkdownNode, context) {
    var number = 1;
    var identifiers = footnotesListMarkdownNode.identifiers(), linkMarkdownNodes = (0, _query.linkMarkdownNodesFromNode)(divisionMarkdownNode);
    linkMarkdownNodes.forEach(function(linkMarkdownNode) {
        linkMarkdownNode.createDOMElement(context, number);
        var identifier = linkMarkdownNode.identifier(context), linkMarkdownNodeDOMElement = linkMarkdownNode.getDOMElement(), identifiersIncludesIdentifier = identifiers.includes(identifier);
        var innerHTML;
        if (identifiersIncludesIdentifier) {
            innerHTML = "".concat(number);
            number++;
        } else {
            innerHTML = _constants.EMPTY_STRING;
        }
        Object.assign(linkMarkdownNodeDOMElement, {
            innerHTML: innerHTML
        });
    });
}
var _default = {
    renumberLinkMarkdownNodes: renumberLinkMarkdownNodes
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbGluay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgc3RyaW5nVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjaG9wLCBzcGxpY2UgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuaW1wb3J0IHsgbGlua01hcmtkb3duTm9kZXNGcm9tTm9kZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgeyBzdHJsZW4sIGluZGV4T2YgfSA9IHN0cmluZ1V0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbnVtYmVyTGlua01hcmtkb3duTm9kZXNIVE1MKGNoaWxkTm9kZXNIVE1MLCBkaXZpc2lvbk1hcmtkb3duTm9kZSwgZm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSwgY29udGV4dCkge1xuICBsZXQgbnVtYmVyID0gMTtcblxuICBjb25zdCBpZGVudGlmaWVycyA9IGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUuaWRlbnRpZmllcnMoKSxcbiAgICAgICAgbGlua01hcmtkb3duTm9kZXMgPSBsaW5rTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlKGRpdmlzaW9uTWFya2Rvd25Ob2RlKTtcblxuICBsaW5rTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChsaW5rTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3QgaW5kZW50ID0gbnVsbCxcbiAgICAgICAgICBpZGVudGlmaWVyID0gbGlua01hcmtkb3duTm9kZS5pZGVudGlmaWVyKGNvbnRleHQpLFxuICAgICAgICAgIGlkZW50aWZpZXJzSW5jbHVkZXNJZGVudGlmaWVyID0gaWRlbnRpZmllcnMuaW5jbHVkZXMoaWRlbnRpZmllciksXG4gICAgICAgICAgbGlua01hcmtkb3duTm9kZUhUTUwgPSBsaW5rTWFya2Rvd25Ob2RlLmFzSFRNTChpbmRlbnQsIGNvbnRleHQpLFxuICAgICAgICAgIGluZGV4ID0gaW5kZXhPZihjaGlsZE5vZGVzSFRNTCwgbGlua01hcmtkb3duTm9kZUhUTUwpLFxuICAgICAgICAgIGxlbmd0aCA9IHN0cmxlbihsaW5rTWFya2Rvd25Ob2RlSFRNTCksXG4gICAgICAgICAgc3RhcnQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgIGRlbGV0ZUNvdW50ID0gbGVuZ3RoOyAvLy9cblxuICAgIGlmIChpZGVudGlmaWVyc0luY2x1ZGVzSWRlbnRpZmllcikge1xuICAgICAgY29uc3QgbGlua01hcmtkb3duTm9kZUhUTUwgPSBsaW5rTWFya2Rvd25Ob2RlLmFzSFRNTChpbmRlbnQsIGNvbnRleHQsIG51bWJlcik7XG5cbiAgICAgIGNoaWxkTm9kZXNIVE1MID0gc3BsaWNlKGNoaWxkTm9kZXNIVE1MLCBzdGFydCwgZGVsZXRlQ291bnQsIGxpbmtNYXJrZG93bk5vZGVIVE1MKTtcblxuICAgICAgbnVtYmVyKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkTm9kZXNIVE1MID0gY2hvcChjaGlsZE5vZGVzSFRNTCwgc3RhcnQsIGRlbGV0ZUNvdW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjaGlsZE5vZGVzSFRNTDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbnVtYmVyTGlua01hcmtkb3duTm9kZXMoZGl2aXNpb25NYXJrZG93bk5vZGUsIGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUsIGNvbnRleHQpIHtcbiAgbGV0IG51bWJlciA9IDE7XG5cbiAgY29uc3QgaWRlbnRpZmllcnMgPSBmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlLmlkZW50aWZpZXJzKCksXG4gICAgICAgIGxpbmtNYXJrZG93bk5vZGVzID0gbGlua01hcmtkb3duTm9kZXNGcm9tTm9kZShkaXZpc2lvbk1hcmtkb3duTm9kZSk7XG5cbiAgbGlua01hcmtkb3duTm9kZXMuZm9yRWFjaCgobGlua01hcmtkb3duTm9kZSkgPT4ge1xuICAgIGxpbmtNYXJrZG93bk5vZGUuY3JlYXRlRE9NRWxlbWVudChjb250ZXh0LCBudW1iZXIpO1xuXG4gICAgY29uc3QgaWRlbnRpZmllciA9IGxpbmtNYXJrZG93bk5vZGUuaWRlbnRpZmllcihjb250ZXh0KSxcbiAgICAgICAgICBsaW5rTWFya2Rvd25Ob2RlRE9NRWxlbWVudCA9IGxpbmtNYXJrZG93bk5vZGUuZ2V0RE9NRWxlbWVudCgpLFxuICAgICAgICAgIGlkZW50aWZpZXJzSW5jbHVkZXNJZGVudGlmaWVyID0gaWRlbnRpZmllcnMuaW5jbHVkZXMoaWRlbnRpZmllcik7XG5cbiAgICBsZXQgaW5uZXJIVE1MO1xuXG4gICAgaWYgKGlkZW50aWZpZXJzSW5jbHVkZXNJZGVudGlmaWVyKSB7XG4gICAgICBpbm5lckhUTUwgPSBgJHtudW1iZXJ9YDtcblxuICAgICAgbnVtYmVyKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVySFRNTCA9IEVNUFRZX1NUUklORztcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKGxpbmtNYXJrZG93bk5vZGVET01FbGVtZW50LCB7XG4gICAgICBpbm5lckhUTUxcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVudW1iZXJMaW5rTWFya2Rvd25Ob2Rlc1xufTtcbiJdLCJuYW1lcyI6WyJyZW51bWJlckxpbmtNYXJrZG93bk5vZGVzIiwicmVudW1iZXJMaW5rTWFya2Rvd25Ob2Rlc0hUTUwiLCJzdHJsZW4iLCJzdHJpbmdVdGlsaXRpZXMiLCJpbmRleE9mIiwiY2hpbGROb2Rlc0hUTUwiLCJkaXZpc2lvbk1hcmtkb3duTm9kZSIsImZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUiLCJjb250ZXh0IiwibnVtYmVyIiwiaWRlbnRpZmllcnMiLCJsaW5rTWFya2Rvd25Ob2RlcyIsImxpbmtNYXJrZG93bk5vZGVzRnJvbU5vZGUiLCJmb3JFYWNoIiwibGlua01hcmtkb3duTm9kZSIsImluZGVudCIsImlkZW50aWZpZXIiLCJpZGVudGlmaWVyc0luY2x1ZGVzSWRlbnRpZmllciIsImluY2x1ZGVzIiwibGlua01hcmtkb3duTm9kZUhUTUwiLCJhc0hUTUwiLCJpbmRleCIsImxlbmd0aCIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiLCJjaG9wIiwiY3JlYXRlRE9NRWxlbWVudCIsImxpbmtNYXJrZG93bk5vZGVET01FbGVtZW50IiwiZ2V0RE9NRWxlbWVudCIsImlubmVySFRNTCIsIkVNUFRZX1NUUklORyIsIk9iamVjdCIsImFzc2lnbiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFxRUEsT0FFRTtlQUZGOztJQTdCZ0JBLHlCQUF5QjtlQUF6QkE7O0lBOUJBQyw2QkFBNkI7ZUFBN0JBOzs7eUJBUmdCO3lCQUVIO3NCQUNBO3FCQUNhO0FBRTFDLElBQVFDLFNBQW9CQywwQkFBZSxDQUFuQ0QsUUFBUUUsVUFBWUQsMEJBQWUsQ0FBM0JDO0FBRVQsU0FBU0gsOEJBQThCSSxjQUFjLEVBQUVDLG9CQUFvQixFQUFFQyx5QkFBeUIsRUFBRUMsT0FBTztJQUNwSCxJQUFJQyxTQUFTO0lBRWIsSUFBTUMsY0FBY0gsMEJBQTBCRyxXQUFXLElBQ25EQyxvQkFBb0JDLElBQUFBLGdDQUF5QixFQUFDTjtJQUVwREssa0JBQWtCRSxPQUFPLENBQUMsU0FBQ0M7UUFDekIsSUFBTUMsU0FBUyxNQUNUQyxhQUFhRixpQkFBaUJFLFVBQVUsQ0FBQ1IsVUFDekNTLGdDQUFnQ1AsWUFBWVEsUUFBUSxDQUFDRixhQUNyREcsdUJBQXVCTCxpQkFBaUJNLE1BQU0sQ0FBQ0wsUUFBUVAsVUFDdkRhLFFBQVFqQixRQUFRQyxnQkFBZ0JjLHVCQUNoQ0csU0FBU3BCLE9BQU9pQix1QkFDaEJJLFFBQVFGLE9BQ1JHLGNBQWNGLFFBQVEsR0FBRztRQUUvQixJQUFJTCwrQkFBK0I7WUFDakMsSUFBTUUsd0JBQXVCTCxpQkFBaUJNLE1BQU0sQ0FBQ0wsUUFBUVAsU0FBU0M7WUFFdEVKLGlCQUFpQm9CLElBQUFBLGNBQU0sRUFBQ3BCLGdCQUFnQmtCLE9BQU9DLGFBQWFMO1lBRTVEVjtRQUNGLE9BQU87WUFDTEosaUJBQWlCcUIsSUFBQUEsWUFBSSxFQUFDckIsZ0JBQWdCa0IsT0FBT0M7UUFDL0M7SUFDRjtJQUVBLE9BQU9uQjtBQUNUO0FBRU8sU0FBU0wsMEJBQTBCTSxvQkFBb0IsRUFBRUMseUJBQXlCLEVBQUVDLE9BQU87SUFDaEcsSUFBSUMsU0FBUztJQUViLElBQU1DLGNBQWNILDBCQUEwQkcsV0FBVyxJQUNuREMsb0JBQW9CQyxJQUFBQSxnQ0FBeUIsRUFBQ047SUFFcERLLGtCQUFrQkUsT0FBTyxDQUFDLFNBQUNDO1FBQ3pCQSxpQkFBaUJhLGdCQUFnQixDQUFDbkIsU0FBU0M7UUFFM0MsSUFBTU8sYUFBYUYsaUJBQWlCRSxVQUFVLENBQUNSLFVBQ3pDb0IsNkJBQTZCZCxpQkFBaUJlLGFBQWEsSUFDM0RaLGdDQUFnQ1AsWUFBWVEsUUFBUSxDQUFDRjtRQUUzRCxJQUFJYztRQUVKLElBQUliLCtCQUErQjtZQUNqQ2EsWUFBWSxBQUFDLEdBQVMsT0FBUHJCO1lBRWZBO1FBQ0YsT0FBTztZQUNMcUIsWUFBWUMsdUJBQVk7UUFDMUI7UUFFQUMsT0FBT0MsTUFBTSxDQUFDTCw0QkFBNEI7WUFDeENFLFdBQUFBO1FBQ0Y7SUFDRjtBQUNGO0lBRUEsV0FBZTtJQUNiOUIsMkJBQUFBO0FBQ0YifQ==