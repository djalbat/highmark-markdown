"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    renumberLinkMarkdownNodes: function() {
        return renumberLinkMarkdownNodes;
    },
    renumberLinkMarkdownNodesHTML: function() {
        return renumberLinkMarkdownNodesHTML;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
var strlen = _necessary.stringUtilities.strlen, indexOf = _necessary.stringUtilities.indexOf;
function renumberLinkMarkdownNodesHTML(childNodesHTML, documentMarkdownNode, footnotesListMarkdownNode, context) {
    var number = 1;
    var identifiers = footnotesListMarkdownNode.identifiers(), linkMarkdownNodes = (0, _query.linkMarkdownNodesFromNode)(documentMarkdownNode);
    linkMarkdownNodes.forEach(function(linkMarkdownNode) {
        var indent = null, identifier = linkMarkdownNode.identifier(context), identifiersIncludesIdentifier = identifiers.includes(identifier), linkMarkdownNodeHTML = linkMarkdownNode.asHTML(indent, context), index = indexOf(childNodesHTML, linkMarkdownNodeHTML), length = strlen(linkMarkdownNodeHTML), start = index, deleteCount = length; ///
        if (identifiersIncludesIdentifier) {
            var linkMarkdownNodeHTML1 = linkMarkdownNode.asHTML(indent, context, number);
            childNodesHTML = (0, _string.splice)(childNodesHTML, start, deleteCount, linkMarkdownNodeHTML1);
            number++;
        } else {
            childNodesHTML = (0, _string.chop)(childNodesHTML, start, deleteCount);
        }
    });
    return childNodesHTML;
}
function renumberLinkMarkdownNodes(documentMarkdownNode, footnotesListMarkdownNode, context) {
    var number = 1;
    var identifiers = footnotesListMarkdownNode.identifiers(), linkMarkdownNodes = (0, _query.linkMarkdownNodesFromNode)(documentMarkdownNode);
    linkMarkdownNodes.forEach(function(linkMarkdownNode) {
        var identifier = linkMarkdownNode.identifier(context), linkMarkdownNodeDOMElement = linkMarkdownNode.getDOMElement(), identifiersIncludesIdentifier = identifiers.includes(identifier);
        var innerHTML;
        if (identifiersIncludesIdentifier) {
            innerHTML = "".concat(number);
            number++;
        } else {
            innerHTML = _constants.EMPTY_STRING;
        }
        Object.assign(linkMarkdownNodeDOMElement, {
            innerHTML: innerHTML
        });
    });
}
var _default = {
    renumberLinkMarkdownNodes: renumberLinkMarkdownNodes
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbGluay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgc3RyaW5nVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjaG9wLCBzcGxpY2UgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuaW1wb3J0IHsgbGlua01hcmtkb3duTm9kZXNGcm9tTm9kZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgeyBzdHJsZW4sIGluZGV4T2YgfSA9IHN0cmluZ1V0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbnVtYmVyTGlua01hcmtkb3duTm9kZXNIVE1MKGNoaWxkTm9kZXNIVE1MLCBkb2N1bWVudE1hcmtkb3duTm9kZSwgZm9vdG5vdGVzTGlzdE1hcmtkb3duTm9kZSwgY29udGV4dCkge1xuICBsZXQgbnVtYmVyID0gMTtcblxuICBjb25zdCBpZGVudGlmaWVycyA9IGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUuaWRlbnRpZmllcnMoKSxcbiAgICAgICAgbGlua01hcmtkb3duTm9kZXMgPSBsaW5rTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlKGRvY3VtZW50TWFya2Rvd25Ob2RlKTtcblxuICBsaW5rTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChsaW5rTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3QgaW5kZW50ID0gbnVsbCxcbiAgICAgICAgICBpZGVudGlmaWVyID0gbGlua01hcmtkb3duTm9kZS5pZGVudGlmaWVyKGNvbnRleHQpLFxuICAgICAgICAgIGlkZW50aWZpZXJzSW5jbHVkZXNJZGVudGlmaWVyID0gaWRlbnRpZmllcnMuaW5jbHVkZXMoaWRlbnRpZmllciksXG4gICAgICAgICAgbGlua01hcmtkb3duTm9kZUhUTUwgPSBsaW5rTWFya2Rvd25Ob2RlLmFzSFRNTChpbmRlbnQsIGNvbnRleHQpLFxuICAgICAgICAgIGluZGV4ID0gaW5kZXhPZihjaGlsZE5vZGVzSFRNTCwgbGlua01hcmtkb3duTm9kZUhUTUwpLFxuICAgICAgICAgIGxlbmd0aCA9IHN0cmxlbihsaW5rTWFya2Rvd25Ob2RlSFRNTCksXG4gICAgICAgICAgc3RhcnQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgIGRlbGV0ZUNvdW50ID0gbGVuZ3RoOyAvLy9cblxuICAgIGlmIChpZGVudGlmaWVyc0luY2x1ZGVzSWRlbnRpZmllcikge1xuICAgICAgY29uc3QgbGlua01hcmtkb3duTm9kZUhUTUwgPSBsaW5rTWFya2Rvd25Ob2RlLmFzSFRNTChpbmRlbnQsIGNvbnRleHQsIG51bWJlcik7XG5cbiAgICAgIGNoaWxkTm9kZXNIVE1MID0gc3BsaWNlKGNoaWxkTm9kZXNIVE1MLCBzdGFydCwgZGVsZXRlQ291bnQsIGxpbmtNYXJrZG93bk5vZGVIVE1MKTtcblxuICAgICAgbnVtYmVyKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkTm9kZXNIVE1MID0gY2hvcChjaGlsZE5vZGVzSFRNTCwgc3RhcnQsIGRlbGV0ZUNvdW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjaGlsZE5vZGVzSFRNTDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbnVtYmVyTGlua01hcmtkb3duTm9kZXMoZG9jdW1lbnRNYXJrZG93bk5vZGUsIGZvb3Rub3Rlc0xpc3RNYXJrZG93bk5vZGUsIGNvbnRleHQpIHtcbiAgbGV0IG51bWJlciA9IDE7XG5cbiAgY29uc3QgaWRlbnRpZmllcnMgPSBmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlLmlkZW50aWZpZXJzKCksXG4gICAgICAgIGxpbmtNYXJrZG93bk5vZGVzID0gbGlua01hcmtkb3duTm9kZXNGcm9tTm9kZShkb2N1bWVudE1hcmtkb3duTm9kZSk7XG5cbiAgbGlua01hcmtkb3duTm9kZXMuZm9yRWFjaCgobGlua01hcmtkb3duTm9kZSkgPT4ge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSBsaW5rTWFya2Rvd25Ob2RlLmlkZW50aWZpZXIoY29udGV4dCksXG4gICAgICAgICAgbGlua01hcmtkb3duTm9kZURPTUVsZW1lbnQgPSBsaW5rTWFya2Rvd25Ob2RlLmdldERPTUVsZW1lbnQoKSxcbiAgICAgICAgICBpZGVudGlmaWVyc0luY2x1ZGVzSWRlbnRpZmllciA9IGlkZW50aWZpZXJzLmluY2x1ZGVzKGlkZW50aWZpZXIpO1xuXG4gICAgbGV0IGlubmVySFRNTDtcblxuICAgIGlmIChpZGVudGlmaWVyc0luY2x1ZGVzSWRlbnRpZmllcikge1xuICAgICAgaW5uZXJIVE1MID0gYCR7bnVtYmVyfWA7XG5cbiAgICAgIG51bWJlcisrO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbm5lckhUTUwgPSBFTVBUWV9TVFJJTkc7XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihsaW5rTWFya2Rvd25Ob2RlRE9NRWxlbWVudCwge1xuICAgICAgaW5uZXJIVE1MXG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlbnVtYmVyTGlua01hcmtkb3duTm9kZXNcbn07XG4iXSwibmFtZXMiOlsicmVudW1iZXJMaW5rTWFya2Rvd25Ob2RlcyIsInJlbnVtYmVyTGlua01hcmtkb3duTm9kZXNIVE1MIiwic3RybGVuIiwic3RyaW5nVXRpbGl0aWVzIiwiaW5kZXhPZiIsImNoaWxkTm9kZXNIVE1MIiwiZG9jdW1lbnRNYXJrZG93bk5vZGUiLCJmb290bm90ZXNMaXN0TWFya2Rvd25Ob2RlIiwiY29udGV4dCIsIm51bWJlciIsImlkZW50aWZpZXJzIiwibGlua01hcmtkb3duTm9kZXMiLCJsaW5rTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlIiwiZm9yRWFjaCIsImxpbmtNYXJrZG93bk5vZGUiLCJpbmRlbnQiLCJpZGVudGlmaWVyIiwiaWRlbnRpZmllcnNJbmNsdWRlc0lkZW50aWZpZXIiLCJpbmNsdWRlcyIsImxpbmtNYXJrZG93bk5vZGVIVE1MIiwiYXNIVE1MIiwiaW5kZXgiLCJsZW5ndGgiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwiY2hvcCIsImxpbmtNYXJrZG93bk5vZGVET01FbGVtZW50IiwiZ2V0RE9NRWxlbWVudCIsImlubmVySFRNTCIsIkVNUFRZX1NUUklORyIsIk9iamVjdCIsImFzc2lnbiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQW1FQSxPQUVFO2VBRkY7O0lBM0JnQkEseUJBQXlCO2VBQXpCQTs7SUE5QkFDLDZCQUE2QjtlQUE3QkE7Ozt5QkFSZ0I7eUJBRUg7c0JBQ0E7cUJBQ2E7QUFFMUMsSUFBUUMsU0FBb0JDLDBCQUFlLENBQW5DRCxRQUFRRSxVQUFZRCwwQkFBZSxDQUEzQkM7QUFFVCxTQUFTSCw4QkFBOEJJLGNBQWMsRUFBRUMsb0JBQW9CLEVBQUVDLHlCQUF5QixFQUFFQyxPQUFPO0lBQ3BILElBQUlDLFNBQVM7SUFFYixJQUFNQyxjQUFjSCwwQkFBMEJHLFdBQVcsSUFDbkRDLG9CQUFvQkMsSUFBQUEsZ0NBQXlCLEVBQUNOO0lBRXBESyxrQkFBa0JFLE9BQU8sQ0FBQyxTQUFDQztRQUN6QixJQUFNQyxTQUFTLE1BQ1RDLGFBQWFGLGlCQUFpQkUsVUFBVSxDQUFDUixVQUN6Q1MsZ0NBQWdDUCxZQUFZUSxRQUFRLENBQUNGLGFBQ3JERyx1QkFBdUJMLGlCQUFpQk0sTUFBTSxDQUFDTCxRQUFRUCxVQUN2RGEsUUFBUWpCLFFBQVFDLGdCQUFnQmMsdUJBQ2hDRyxTQUFTcEIsT0FBT2lCLHVCQUNoQkksUUFBUUYsT0FDUkcsY0FBY0YsUUFBUSxHQUFHO1FBRS9CLElBQUlMLCtCQUErQjtZQUNqQyxJQUFNRSx3QkFBdUJMLGlCQUFpQk0sTUFBTSxDQUFDTCxRQUFRUCxTQUFTQztZQUV0RUosaUJBQWlCb0IsSUFBQUEsY0FBTSxFQUFDcEIsZ0JBQWdCa0IsT0FBT0MsYUFBYUw7WUFFNURWO1FBQ0YsT0FBTztZQUNMSixpQkFBaUJxQixJQUFBQSxZQUFJLEVBQUNyQixnQkFBZ0JrQixPQUFPQztRQUMvQztJQUNGO0lBRUEsT0FBT25CO0FBQ1Q7QUFFTyxTQUFTTCwwQkFBMEJNLG9CQUFvQixFQUFFQyx5QkFBeUIsRUFBRUMsT0FBTztJQUNoRyxJQUFJQyxTQUFTO0lBRWIsSUFBTUMsY0FBY0gsMEJBQTBCRyxXQUFXLElBQ25EQyxvQkFBb0JDLElBQUFBLGdDQUF5QixFQUFDTjtJQUVwREssa0JBQWtCRSxPQUFPLENBQUMsU0FBQ0M7UUFDekIsSUFBTUUsYUFBYUYsaUJBQWlCRSxVQUFVLENBQUNSLFVBQ3pDbUIsNkJBQTZCYixpQkFBaUJjLGFBQWEsSUFDM0RYLGdDQUFnQ1AsWUFBWVEsUUFBUSxDQUFDRjtRQUUzRCxJQUFJYTtRQUVKLElBQUlaLCtCQUErQjtZQUNqQ1ksWUFBWSxBQUFDLEdBQVMsT0FBUHBCO1lBRWZBO1FBQ0YsT0FBTztZQUNMb0IsWUFBWUMsdUJBQVk7UUFDMUI7UUFFQUMsT0FBT0MsTUFBTSxDQUFDTCw0QkFBNEI7WUFDeENFLFdBQUFBO1FBQ0Y7SUFDRjtBQUNGO0lBRUEsV0FBZTtJQUNiN0IsMkJBQUFBO0FBQ0YifQ==