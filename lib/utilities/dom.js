"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    topmostCSSNodeFromMarkdownStyleNode: function() {
        return topmostCSSNodeFromMarkdownStyleNode;
    },
    topmostCSSNodeFromMarkdownStyleNodes: function() {
        return topmostCSSNodeFromMarkdownStyleNodes;
    },
    topmostHTMLNodeFromMarkdownNode: function() {
        return topmostHTMLNodeFromMarkdownNode;
    },
    topmostHTMLNodeFromMarkdownNodes: function() {
        return topmostHTMLNodeFromMarkdownNodes;
    }
});
var _occamdom = require("occam-dom");
var _css = /*#__PURE__*/ _interop_require_default(require("../node/css"));
var _html = /*#__PURE__*/ _interop_require_default(require("../node/html"));
var _css1 = /*#__PURE__*/ _interop_require_default(require("../map/node/css"));
var _html1 = /*#__PURE__*/ _interop_require_default(require("../map/node/html"));
var _topmost = /*#__PURE__*/ _interop_require_default(require("../node/css/topmost"));
var _topmost1 = /*#__PURE__*/ _interop_require_default(require("../node/html/topmost"));
var _markdown = /*#__PURE__*/ _interop_require_default(require("../queries/markdown"));
var _markdownStyle = /*#__PURE__*/ _interop_require_default(require("../queries/markdownStyle"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var topmostNodeFromOuterNodes = _occamdom.nodeUtilities.topmostNodeFromOuterNodes;
function topmostHTMLNodeFromMarkdownNode(markdownNode) {
    var node = markdownNode, queries = _markdown.default, nodes = (0, _query.nodesFromNodeAndQueries)(node, queries), outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(HTMLClassFromOuterNode, outerNodes), topmostHTMLNode = topmostNode; ///
    return topmostHTMLNode;
}
function topmostHTMLNodeFromMarkdownNodes(markdownNodes) {
    var nodes = [], queries = _markdown.default; ///
    markdownNodes.forEach(function(markdownNode) {
        var node = markdownNode; ///
        (0, _query.nodesFromNodeAndQueries)(node, queries, nodes);
    });
    var outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(HTMLClassFromOuterNode, outerNodes), topmostHTMLNode = topmostNode; ///
    return topmostHTMLNode;
}
function topmostCSSNodeFromMarkdownStyleNode(markdownStyleNode) {
    var node = markdownStyleNode, queries = _markdownStyle.default, nodes = (0, _query.nodesFromNodeAndQueries)(node, queries), outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(CSSClassFromOuterNode, outerNodes), topmostCSSNode = topmostNode; ///
    return topmostCSSNode;
}
function topmostCSSNodeFromMarkdownStyleNodes(markdownStyleNodes) {
    var nodes = [], queries = _markdownStyle.default; ///
    markdownStyleNodes.forEach(function(markdownStyleNode) {
        var node = markdownStyleNode; ///
        (0, _query.nodesFromNodeAndQueries)(node, queries, nodes);
    });
    var outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(CSSClassFromOuterNode, outerNodes), topmostCSSNode = topmostNode; ///
    return topmostCSSNode;
}
var _default = {
    topmostHTMLNodeFromMarkdownNode: topmostHTMLNodeFromMarkdownNode,
    topmostHTMLNodeFromMarkdownNodes: topmostHTMLNodeFromMarkdownNodes,
    topmostCSSNodeFromMarkdownStyleNode: topmostCSSNodeFromMarkdownStyleNode,
    topmostCSSNodeFromMarkdownStyleNodes: topmostCSSNodeFromMarkdownStyleNodes
};
function CSSClassFromOuterNode(outerNode) {
    var Class;
    if (outerNode === null) {
        Class = _topmost.default; ///
    } else {
        var nonTerminalNode = outerNode, ruleName = nonTerminalNode.getRuleName();
        Class = _css1.default[ruleName] || _css.default;
    }
    return Class;
}
function HTMLClassFromOuterNode(outerNode) {
    var Class;
    if (outerNode === null) {
        Class = _topmost1.default; ///
    } else {
        var nonTerminalNode = outerNode, ruleName = nonTerminalNode.getRuleName();
        Class = _html1.default[ruleName] || _html.default;
    }
    return Class;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBub2RlVXRpbGl0aWVzIH0gZnJvbSBcIm9jY2FtLWRvbVwiO1xuXG5pbXBvcnQgQ1NTTm9kZSBmcm9tIFwiLi4vbm9kZS9jc3NcIjtcbmltcG9ydCBIVE1MTm9kZSBmcm9tIFwiLi4vbm9kZS9odG1sXCI7XG5pbXBvcnQgY3NzTm9kZU1hcCBmcm9tIFwiLi4vbWFwL25vZGUvY3NzXCI7XG5pbXBvcnQgaHRtbE5vZGVNYXAgZnJvbSBcIi4uL21hcC9ub2RlL2h0bWxcIjtcbmltcG9ydCBUb3Btb3N0Q1NTTm9kZSBmcm9tIFwiLi4vbm9kZS9jc3MvdG9wbW9zdFwiO1xuaW1wb3J0IFRvcG1vc3RIVE1MTm9kZSBmcm9tIFwiLi4vbm9kZS9odG1sL3RvcG1vc3RcIjtcbmltcG9ydCBtYXJrZG93blF1ZXJpZXMgZnJvbSBcIi4uL3F1ZXJpZXMvbWFya2Rvd25cIjtcbmltcG9ydCBtYXJrZG93blN0eWxlUXVlcmllcyBmcm9tIFwiLi4vcXVlcmllcy9tYXJrZG93blN0eWxlXCI7XG5cbmltcG9ydCB7IG5vZGVzRnJvbU5vZGVBbmRRdWVyaWVzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCB7IHRvcG1vc3ROb2RlRnJvbU91dGVyTm9kZXMgfSA9IG5vZGVVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b3Btb3N0SFRNTE5vZGVGcm9tTWFya2Rvd25Ob2RlKG1hcmtkb3duTm9kZSkge1xuICBjb25zdCBub2RlID0gbWFya2Rvd25Ob2RlLCAgLy8vXG4gICAgICAgIHF1ZXJpZXMgPSBtYXJrZG93blF1ZXJpZXMsIC8vL1xuICAgICAgICBub2RlcyA9IG5vZGVzRnJvbU5vZGVBbmRRdWVyaWVzKG5vZGUsIHF1ZXJpZXMpLFxuICAgICAgICBvdXRlck5vZGVzID0gbm9kZXMsIC8vL1xuICAgICAgICB0b3Btb3N0Tm9kZSA9IHRvcG1vc3ROb2RlRnJvbU91dGVyTm9kZXMoSFRNTENsYXNzRnJvbU91dGVyTm9kZSwgb3V0ZXJOb2RlcyksXG4gICAgICAgIHRvcG1vc3RIVE1MTm9kZSA9IHRvcG1vc3ROb2RlOyAgLy8vXG5cbiAgcmV0dXJuIHRvcG1vc3RIVE1MTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvcG1vc3RIVE1MTm9kZUZyb21NYXJrZG93bk5vZGVzKG1hcmtkb3duTm9kZXMpIHtcbiAgY29uc3Qgbm9kZXMgPSBbXSxcbiAgICAgICAgcXVlcmllcyA9IG1hcmtkb3duUXVlcmllczsgIC8vL1xuXG4gIG1hcmtkb3duTm9kZXMuZm9yRWFjaCgobWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IG1hcmtkb3duTm9kZTsgIC8vL1xuXG4gICAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJpZXMobm9kZSwgcXVlcmllcywgbm9kZXMpO1xuICB9KTtcblxuICBjb25zdCBvdXRlck5vZGVzID0gbm9kZXMsIC8vL1xuICAgICAgICB0b3Btb3N0Tm9kZSA9IHRvcG1vc3ROb2RlRnJvbU91dGVyTm9kZXMoSFRNTENsYXNzRnJvbU91dGVyTm9kZSwgb3V0ZXJOb2RlcyksXG4gICAgICAgIHRvcG1vc3RIVE1MTm9kZSA9IHRvcG1vc3ROb2RlOyAgLy8vXG5cbiAgcmV0dXJuIHRvcG1vc3RIVE1MTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvcG1vc3RDU1NOb2RlRnJvbU1hcmtkb3duU3R5bGVOb2RlKG1hcmtkb3duU3R5bGVOb2RlKSB7XG4gIGNvbnN0IG5vZGUgPSBtYXJrZG93blN0eWxlTm9kZSwgIC8vL1xuICAgICAgICBxdWVyaWVzID0gbWFya2Rvd25TdHlsZVF1ZXJpZXMsIC8vL1xuICAgICAgICBub2RlcyA9IG5vZGVzRnJvbU5vZGVBbmRRdWVyaWVzKG5vZGUsIHF1ZXJpZXMpLFxuICAgICAgICBvdXRlck5vZGVzID0gbm9kZXMsIC8vL1xuICAgICAgICB0b3Btb3N0Tm9kZSA9IHRvcG1vc3ROb2RlRnJvbU91dGVyTm9kZXMoQ1NTQ2xhc3NGcm9tT3V0ZXJOb2RlLCBvdXRlck5vZGVzKSxcbiAgICAgICAgdG9wbW9zdENTU05vZGUgPSB0b3Btb3N0Tm9kZTsgIC8vL1xuXG4gIHJldHVybiB0b3Btb3N0Q1NTTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvcG1vc3RDU1NOb2RlRnJvbU1hcmtkb3duU3R5bGVOb2RlcyhtYXJrZG93blN0eWxlTm9kZXMpIHtcbiAgY29uc3Qgbm9kZXMgPSBbXSxcbiAgICAgICAgcXVlcmllcyA9IG1hcmtkb3duU3R5bGVRdWVyaWVzOyAgLy8vXG5cbiAgbWFya2Rvd25TdHlsZU5vZGVzLmZvckVhY2goKG1hcmtkb3duU3R5bGVOb2RlKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IG1hcmtkb3duU3R5bGVOb2RlOyAgLy8vXG5cbiAgICBub2Rlc0Zyb21Ob2RlQW5kUXVlcmllcyhub2RlLCBxdWVyaWVzLCBub2Rlcyk7XG4gIH0pO1xuXG4gIGNvbnN0IG91dGVyTm9kZXMgPSBub2RlcywgLy8vXG4gICAgICAgIHRvcG1vc3ROb2RlID0gdG9wbW9zdE5vZGVGcm9tT3V0ZXJOb2RlcyhDU1NDbGFzc0Zyb21PdXRlck5vZGUsIG91dGVyTm9kZXMpLFxuICAgICAgICB0b3Btb3N0Q1NTTm9kZSA9IHRvcG1vc3ROb2RlOyAgLy8vXG5cbiAgcmV0dXJuIHRvcG1vc3RDU1NOb2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRvcG1vc3RIVE1MTm9kZUZyb21NYXJrZG93bk5vZGUsXG4gIHRvcG1vc3RIVE1MTm9kZUZyb21NYXJrZG93bk5vZGVzLFxuICB0b3Btb3N0Q1NTTm9kZUZyb21NYXJrZG93blN0eWxlTm9kZSxcbiAgdG9wbW9zdENTU05vZGVGcm9tTWFya2Rvd25TdHlsZU5vZGVzLFxufTtcblxuZnVuY3Rpb24gQ1NTQ2xhc3NGcm9tT3V0ZXJOb2RlKG91dGVyTm9kZSkge1xuICBsZXQgQ2xhc3M7XG5cbiAgaWYgKG91dGVyTm9kZSA9PT0gbnVsbCkge1xuICAgIENsYXNzID0gVG9wbW9zdENTU05vZGU7ICAvLy9cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBvdXRlck5vZGUsICAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpO1xuXG4gICAgQ2xhc3MgPSBjc3NOb2RlTWFwW3J1bGVOYW1lXSB8fCBDU1NOb2RlO1xuICB9XG5cbiAgcmV0dXJuIENsYXNzO1xufVxuXG5mdW5jdGlvbiBIVE1MQ2xhc3NGcm9tT3V0ZXJOb2RlKG91dGVyTm9kZSkge1xuICBsZXQgQ2xhc3M7XG5cbiAgaWYgKG91dGVyTm9kZSA9PT0gbnVsbCkge1xuICAgIENsYXNzID0gVG9wbW9zdEhUTUxOb2RlOyAgLy8vXG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gb3V0ZXJOb2RlLCAgLy8vXG4gICAgICAgICAgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICAgIENsYXNzID0gaHRtbE5vZGVNYXBbcnVsZU5hbWVdIHx8IEhUTUxOb2RlO1xuICB9XG5cbiAgcmV0dXJuIENsYXNzO1xufVxuIl0sIm5hbWVzIjpbInRvcG1vc3RDU1NOb2RlRnJvbU1hcmtkb3duU3R5bGVOb2RlIiwidG9wbW9zdENTU05vZGVGcm9tTWFya2Rvd25TdHlsZU5vZGVzIiwidG9wbW9zdEhUTUxOb2RlRnJvbU1hcmtkb3duTm9kZSIsInRvcG1vc3RIVE1MTm9kZUZyb21NYXJrZG93bk5vZGVzIiwidG9wbW9zdE5vZGVGcm9tT3V0ZXJOb2RlcyIsIm5vZGVVdGlsaXRpZXMiLCJtYXJrZG93bk5vZGUiLCJub2RlIiwicXVlcmllcyIsIm1hcmtkb3duUXVlcmllcyIsIm5vZGVzIiwibm9kZXNGcm9tTm9kZUFuZFF1ZXJpZXMiLCJvdXRlck5vZGVzIiwidG9wbW9zdE5vZGUiLCJIVE1MQ2xhc3NGcm9tT3V0ZXJOb2RlIiwidG9wbW9zdEhUTUxOb2RlIiwibWFya2Rvd25Ob2RlcyIsImZvckVhY2giLCJtYXJrZG93blN0eWxlTm9kZSIsIm1hcmtkb3duU3R5bGVRdWVyaWVzIiwiQ1NTQ2xhc3NGcm9tT3V0ZXJOb2RlIiwidG9wbW9zdENTU05vZGUiLCJtYXJrZG93blN0eWxlTm9kZXMiLCJvdXRlck5vZGUiLCJDbGFzcyIsIlRvcG1vc3RDU1NOb2RlIiwibm9uVGVybWluYWxOb2RlIiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImNzc05vZGVNYXAiLCJDU1NOb2RlIiwiVG9wbW9zdEhUTUxOb2RlIiwiaHRtbE5vZGVNYXAiLCJIVE1MTm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBeUVBLE9BS0U7ZUFMRjs7SUE1QmdCQSxtQ0FBbUM7ZUFBbkNBOztJQVdBQyxvQ0FBb0M7ZUFBcENBOztJQXZDQUMsK0JBQStCO2VBQS9CQTs7SUFXQUMsZ0NBQWdDO2VBQWhDQTs7O3dCQTFCYzswREFFVjsyREFDQzsyREFDRTs0REFDQzs4REFDRzsrREFDQzsrREFDQTtvRUFDSztxQkFFTzs7Ozs7O0FBRXhDLElBQU0sQUFBRUMsNEJBQThCQyx1QkFBYSxDQUEzQ0Q7QUFFRCxTQUFTRixnQ0FBZ0NJLFlBQVk7SUFDMUQsSUFBTUMsT0FBT0QsY0FDUEUsVUFBVUMsaUJBQWUsRUFDekJDLFFBQVFDLElBQUFBLDhCQUF1QixFQUFDSixNQUFNQyxVQUN0Q0ksYUFBYUYsT0FDYkcsY0FBY1QsMEJBQTBCVSx3QkFBd0JGLGFBQ2hFRyxrQkFBa0JGLGFBQWMsR0FBRztJQUV6QyxPQUFPRTtBQUNUO0FBRU8sU0FBU1osaUNBQWlDYSxhQUFhO0lBQzVELElBQU1OLFFBQVEsRUFBRSxFQUNWRixVQUFVQyxpQkFBZSxFQUFHLEdBQUc7SUFFckNPLGNBQWNDLE9BQU8sQ0FBQyxTQUFDWDtRQUNyQixJQUFNQyxPQUFPRCxjQUFlLEdBQUc7UUFFL0JLLElBQUFBLDhCQUF1QixFQUFDSixNQUFNQyxTQUFTRTtJQUN6QztJQUVBLElBQU1FLGFBQWFGLE9BQ2JHLGNBQWNULDBCQUEwQlUsd0JBQXdCRixhQUNoRUcsa0JBQWtCRixhQUFjLEdBQUc7SUFFekMsT0FBT0U7QUFDVDtBQUVPLFNBQVNmLG9DQUFvQ2tCLGlCQUFpQjtJQUNuRSxJQUFNWCxPQUFPVyxtQkFDUFYsVUFBVVcsc0JBQW9CLEVBQzlCVCxRQUFRQyxJQUFBQSw4QkFBdUIsRUFBQ0osTUFBTUMsVUFDdENJLGFBQWFGLE9BQ2JHLGNBQWNULDBCQUEwQmdCLHVCQUF1QlIsYUFDL0RTLGlCQUFpQlIsYUFBYyxHQUFHO0lBRXhDLE9BQU9RO0FBQ1Q7QUFFTyxTQUFTcEIscUNBQXFDcUIsa0JBQWtCO0lBQ3JFLElBQU1aLFFBQVEsRUFBRSxFQUNWRixVQUFVVyxzQkFBb0IsRUFBRyxHQUFHO0lBRTFDRyxtQkFBbUJMLE9BQU8sQ0FBQyxTQUFDQztRQUMxQixJQUFNWCxPQUFPVyxtQkFBb0IsR0FBRztRQUVwQ1AsSUFBQUEsOEJBQXVCLEVBQUNKLE1BQU1DLFNBQVNFO0lBQ3pDO0lBRUEsSUFBTUUsYUFBYUYsT0FDYkcsY0FBY1QsMEJBQTBCZ0IsdUJBQXVCUixhQUMvRFMsaUJBQWlCUixhQUFjLEdBQUc7SUFFeEMsT0FBT1E7QUFDVDtJQUVBLFdBQWU7SUFDYm5CLGlDQUFBQTtJQUNBQyxrQ0FBQUE7SUFDQUgscUNBQUFBO0lBQ0FDLHNDQUFBQTtBQUNGO0FBRUEsU0FBU21CLHNCQUFzQkcsU0FBUztJQUN0QyxJQUFJQztJQUVKLElBQUlELGNBQWMsTUFBTTtRQUN0QkMsUUFBUUMsZ0JBQWMsRUFBRyxHQUFHO0lBQzlCLE9BQU87UUFDTCxJQUFNQyxrQkFBa0JILFdBQ2xCSSxXQUFXRCxnQkFBZ0JFLFdBQVc7UUFFNUNKLFFBQVFLLGFBQVUsQ0FBQ0YsU0FBUyxJQUFJRyxZQUFPO0lBQ3pDO0lBRUEsT0FBT047QUFDVDtBQUVBLFNBQVNWLHVCQUF1QlMsU0FBUztJQUN2QyxJQUFJQztJQUVKLElBQUlELGNBQWMsTUFBTTtRQUN0QkMsUUFBUU8saUJBQWUsRUFBRyxHQUFHO0lBQy9CLE9BQU87UUFDTCxJQUFNTCxrQkFBa0JILFdBQ2xCSSxXQUFXRCxnQkFBZ0JFLFdBQVc7UUFFNUNKLFFBQVFRLGNBQVcsQ0FBQ0wsU0FBUyxJQUFJTSxhQUFRO0lBQzNDO0lBRUEsT0FBT1Q7QUFDVCJ9