"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CSSClassFromOuterNode: function() {
        return CSSClassFromOuterNode;
    },
    HTMLClassFromOuterNode: function() {
        return HTMLClassFromOuterNode;
    },
    cssFromMarkdownStyleAndSelectorsString: function() {
        return cssFromMarkdownStyleAndSelectorsString;
    },
    default: function() {
        return _default;
    },
    markdownNodeFromTokens: function() {
        return markdownNodeFromTokens;
    },
    markdownStyleNodeFromTokens: function() {
        return markdownStyleNodeFromTokens;
    },
    tokensFromMarkdown: function() {
        return tokensFromMarkdown;
    },
    tokensFromMarkdownStyle: function() {
        return tokensFromMarkdownStyle;
    },
    topmostCSSNodeFromMarkdownStyleNode: function() {
        return topmostCSSNodeFromMarkdownStyleNode;
    },
    topmostCSSNodeFromMarkdownStyleNodes: function() {
        return topmostCSSNodeFromMarkdownStyleNodes;
    },
    topmostHTMLNodeFromMarkdownNode: function() {
        return topmostHTMLNodeFromMarkdownNode;
    },
    topmostHTMLNodeFromMarkdownNodes: function() {
        return topmostHTMLNodeFromMarkdownNodes;
    }
});
var _occamdom = require("occam-dom");
var _css = /*#__PURE__*/ _interop_require_default(require("../node/css"));
var _html = /*#__PURE__*/ _interop_require_default(require("../node/html"));
var _css1 = /*#__PURE__*/ _interop_require_default(require("../map/node/css"));
var _html1 = /*#__PURE__*/ _interop_require_default(require("../map/node/html"));
var _lexer = /*#__PURE__*/ _interop_require_default(require("../markdown/lexer"));
var _parser = /*#__PURE__*/ _interop_require_default(require("../markdown/parser"));
var _topmost = /*#__PURE__*/ _interop_require_default(require("../node/css/topmost"));
var _topmost1 = /*#__PURE__*/ _interop_require_default(require("../node/html/topmost"));
var _markdown = /*#__PURE__*/ _interop_require_default(require("../queries/markdown"));
var _lexer1 = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/lexer"));
var _parser1 = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/parser"));
var _markdownStyle = /*#__PURE__*/ _interop_require_default(require("../queries/markdownStyle"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var topmostNodeFromOuterNodes = _occamdom.nodeUtilities.topmostNodeFromOuterNodes;
var markdownLexer = _lexer.default.fromNothing(), markdownParser = _parser.default.fromNothing(), markdownStyleLexer = _lexer1.default.fromNothing(), markdownStyleParser = _parser1.default.fromNothing();
function tokensFromMarkdown(markdown) {
    var lexer = markdownLexer, content = markdown, tokens = lexer.tokenise(content);
    return tokens;
}
function CSSClassFromOuterNode(outerNode) {
    var Class;
    if (outerNode === null) {
        Class = _topmost.default; ///
    } else {
        var nonTerminalNode = outerNode, ruleName = nonTerminalNode.getRuleName();
        Class = _css1.default[ruleName] || _css.default;
    }
    return Class;
}
function HTMLClassFromOuterNode(outerNode) {
    var Class;
    if (outerNode === null) {
        Class = _topmost1.default; ///
    } else {
        var nonTerminalNode = outerNode, ruleName = nonTerminalNode.getRuleName();
        Class = _html1.default[ruleName] || _html.default;
    }
    return Class;
}
function markdownNodeFromTokens(tokens) {
    var parser = markdownParser, startRule = parser.getStartRule(), node = parser.parse(tokens, startRule), markdownNode = node; ///
    return node;
}
function tokensFromMarkdownStyle(markdownStyle) {
    var lexer = markdownStyleLexer, content = markdownStyle, tokens = lexer.tokenise(content);
    return tokens;
}
function markdownStyleNodeFromTokens(tokens) {
    var parser = markdownStyleParser, startRule = parser.getStartRule(), node = parser.parse(tokens, startRule), markdownStyleNode = node; ///
    return markdownStyleNode;
}
function topmostHTMLNodeFromMarkdownNode(markdownNode) {
    var node = markdownNode, queries = _markdown.default, nodes = (0, _query.nodesFromNodeAndQueries)(node, queries), outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(HTMLClassFromOuterNode, outerNodes), topmostHTMLNode = topmostNode; ///
    return topmostHTMLNode;
}
function topmostHTMLNodeFromMarkdownNodes(markdownNodes) {
    var nodes = [], queries = _markdown.default; ///
    markdownNodes.forEach(function(markdownNode) {
        var node = markdownNode; ///
        (0, _query.nodesFromNodeAndQueries)(node, queries, nodes);
    });
    var outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(HTMLClassFromOuterNode, outerNodes), topmostHTMLNode = topmostNode; ///
    return topmostHTMLNode;
}
function topmostCSSNodeFromMarkdownStyleNode(markdownStyleNode) {
    var node = markdownStyleNode, queries = _markdownStyle.default, nodes = (0, _query.nodesFromNodeAndQueries)(node, queries), outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(CSSClassFromOuterNode, outerNodes), topmostCSSNode = topmostNode; ///
    return topmostCSSNode;
}
function topmostCSSNodeFromMarkdownStyleNodes(markdownStyleNodes) {
    var nodes = [], queries = _markdownStyle.default; ///
    markdownStyleNodes.forEach(function(markdownStyleNode) {
        var node = markdownStyleNode; ///
        (0, _query.nodesFromNodeAndQueries)(node, queries, nodes);
    });
    var outerNodes = nodes, topmostNode = topmostNodeFromOuterNodes(CSSClassFromOuterNode, outerNodes), topmostCSSNode = topmostNode; ///
    return topmostCSSNode;
}
function cssFromMarkdownStyleAndSelectorsString(markdownStyle, selectorsString) {
    markdownStyle = "".concat(selectorsString, " {\n  ").concat(markdownStyle, "\n}");
    var tokens = tokensFromMarkdownStyle(markdownStyle), markdownStyleNode = markdownStyleNodeFromTokens(tokens), topmostCSSNode = topmostCSSNodeFromMarkdownStyleNode(markdownStyleNode), context = {
        tokens: tokens
    };
    topmostCSSNode.resolve(context);
    var css = topmostCSSNode.asCSS(context);
    return css;
}
var _default = {
    tokensFromMarkdown: tokensFromMarkdown,
    CSSClassFromOuterNode: CSSClassFromOuterNode,
    HTMLClassFromOuterNode: HTMLClassFromOuterNode,
    markdownNodeFromTokens: markdownNodeFromTokens,
    tokensFromMarkdownStyle: tokensFromMarkdownStyle,
    markdownStyleNodeFromTokens: markdownStyleNodeFromTokens,
    topmostHTMLNodeFromMarkdownNode: topmostHTMLNodeFromMarkdownNode,
    topmostHTMLNodeFromMarkdownNodes: topmostHTMLNodeFromMarkdownNodes,
    topmostCSSNodeFromMarkdownStyleNode: topmostCSSNodeFromMarkdownStyleNode,
    topmostCSSNodeFromMarkdownStyleNodes: topmostCSSNodeFromMarkdownStyleNodes,
    cssFromMarkdownStyleAndSelectorsString: cssFromMarkdownStyleAndSelectorsString
};

//# sourceMappingURL=data:application/json;base64,