"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "indexMapFromDivisionMarkdownNodes", {
    enumerable: true,
    get: function() {
        return indexMapFromDivisionMarkdownNodes;
    }
});
var _constants = require("../constants");
function indexMapFromDivisionMarkdownNodes(divisionMarkdownNodes, context) {
    var indexMap = {};
    var indexOptions = context.indexOptions, phrases = indexOptions.phrases, ignoredWords = indexOptions.ignoredWords, phraseMatchers = phraseMatchersFromPhrase(phrases);
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode, index) {
        var pageNumber = index + 1, plainText = divisionMarkdownNode.asPlainText(context), entries = entriesFromPlainTextAndPhraseMatchers(plainText, phraseMatchers);
        entries.forEach(function(entry) {
            var pageNumbers = indexMap[entry] || null;
            if (pageNumbers === null) {
                pageNumbers = [];
                indexMap[entry] = pageNumbers;
            }
            var pageNumbersIncludesPageNumber = pageNumbers.includes(pageNumber);
            if (!pageNumbersIncludesPageNumber) {
                pageNumbers.push(pageNumber);
            }
        });
    });
    ignoredWords.forEach(function(ignoredWord) {
        delete indexMap[ignoredWord];
    });
    return indexMap;
}
function entriesFromPlainTextAndPhraseMatchers(plainText, phraseMatchers) {
    plainText = preparePlainText(plainText); ///
    phraseMatchers.forEach(function(phraseMatcher) {
        var regularExpression = phraseMatcher.regularExpression, replacement = phraseMatcher.replacement;
        plainText = plainText.replace(regularExpression, replacement);
    });
    var entries = plainText.split(_constants.SINGLE_SPACE);
    return entries;
}
function phraseMatchersFromPhrase(phrases) {
    var phraseMatchers = phrases.map(function(phrase) {
        var regularExpression = new RegExp(phrase, _constants.GLOBAL_FLAG), replacement = phrase.replace(/\s/g, _constants.UNDERSCORE), phraseMatcher = {
            regularExpression: regularExpression,
            replacement: replacement
        };
        return phraseMatcher;
    });
    return phraseMatchers;
}
function preparePlainText(plainText) {
    plainText = plainText.toLowerCase(); ///
    plainText = plainText.replace(/[^a-z ]/g, _constants.SINGLE_SPACE);
    plainText = plainText.replace(/\s+/g, _constants.SINGLE_SPACE);
    plainText = plainText.replace(/^\s+|\s+$/g, _constants.EMPTY_STRING);
    return plainText;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFVOREVSU0NPUkUsIEdMT0JBTF9GTEFHLCBFTVBUWV9TVFJJTkcsIFNJTkdMRV9TUEFDRSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4TWFwRnJvbURpdmlzaW9uTWFya2Rvd25Ob2RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgY29uc3QgaW5kZXhNYXAgPSB7fTtcblxuICBjb25zdCB7IGluZGV4T3B0aW9ucyB9ID0gY29udGV4dCxcbiAgICAgICAgeyBwaHJhc2VzLCBpZ25vcmVkV29yZHMgfSA9IGluZGV4T3B0aW9ucyxcbiAgICAgICAgcGhyYXNlTWF0Y2hlcnMgPSBwaHJhc2VNYXRjaGVyc0Zyb21QaHJhc2UocGhyYXNlcyk7XG5cbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSBpbmRleCArIDEsXG4gICAgICAgICAgcGxhaW5UZXh0ID0gZGl2aXNpb25NYXJrZG93bk5vZGUuYXNQbGFpblRleHQoY29udGV4dCksXG4gICAgICAgICAgZW50cmllcyA9IGVudHJpZXNGcm9tUGxhaW5UZXh0QW5kUGhyYXNlTWF0Y2hlcnMocGxhaW5UZXh0LCBwaHJhc2VNYXRjaGVycyk7XG5cbiAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICBsZXQgcGFnZU51bWJlcnMgPSBpbmRleE1hcFtlbnRyeV0gfHwgbnVsbDtcblxuICAgICAgaWYgKHBhZ2VOdW1iZXJzID09PSBudWxsKSB7XG4gICAgICAgIHBhZ2VOdW1iZXJzID0gW107XG5cbiAgICAgICAgaW5kZXhNYXBbZW50cnldID0gcGFnZU51bWJlcnM7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhZ2VOdW1iZXJzSW5jbHVkZXNQYWdlTnVtYmVyID0gcGFnZU51bWJlcnMuaW5jbHVkZXMocGFnZU51bWJlcik7XG5cbiAgICAgIGlmICghcGFnZU51bWJlcnNJbmNsdWRlc1BhZ2VOdW1iZXIpIHtcbiAgICAgICAgcGFnZU51bWJlcnMucHVzaChwYWdlTnVtYmVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgaWdub3JlZFdvcmRzLmZvckVhY2goKGlnbm9yZWRXb3JkKSA9PiB7XG4gICAgZGVsZXRlIGluZGV4TWFwW2lnbm9yZWRXb3JkXTtcbiAgfSk7XG5cbiAgcmV0dXJuIGluZGV4TWFwO1xufVxuXG5mdW5jdGlvbiBlbnRyaWVzRnJvbVBsYWluVGV4dEFuZFBocmFzZU1hdGNoZXJzKHBsYWluVGV4dCwgcGhyYXNlTWF0Y2hlcnMpIHtcbiAgcGxhaW5UZXh0ID0gcHJlcGFyZVBsYWluVGV4dChwbGFpblRleHQpOyAgLy8vXG5cbiAgcGhyYXNlTWF0Y2hlcnMuZm9yRWFjaCgocGhyYXNlTWF0Y2hlcikgPT4ge1xuICAgIGNvbnN0IHsgcmVndWxhckV4cHJlc3Npb24sIHJlcGxhY2VtZW50IH0gPSBwaHJhc2VNYXRjaGVyO1xuXG4gICAgcGxhaW5UZXh0ID0gcGxhaW5UZXh0LnJlcGxhY2UocmVndWxhckV4cHJlc3Npb24sIHJlcGxhY2VtZW50KTtcbiAgfSk7XG5cbiAgY29uc3QgZW50cmllcyA9IHBsYWluVGV4dC5zcGxpdChTSU5HTEVfU1BBQ0UpO1xuXG4gIHJldHVybiBlbnRyaWVzO1xufVxuXG5mdW5jdGlvbiBwaHJhc2VNYXRjaGVyc0Zyb21QaHJhc2UocGhyYXNlcykge1xuICBjb25zdCBwaHJhc2VNYXRjaGVycyA9IHBocmFzZXMubWFwKChwaHJhc2UpID0+IHtcbiAgICBjb25zdCByZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocGhyYXNlLCBHTE9CQUxfRkxBRyksXG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBwaHJhc2UucmVwbGFjZSgvXFxzL2csIFVOREVSU0NPUkUpLFxuICAgICAgICAgIHBocmFzZU1hdGNoZXIgPSB7XG4gICAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHJlcGxhY2VtZW50XG4gICAgICAgICAgfTtcblxuICAgIHJldHVybiBwaHJhc2VNYXRjaGVyO1xuICB9KTtcblxuICByZXR1cm4gcGhyYXNlTWF0Y2hlcnM7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVQbGFpblRleHQocGxhaW5UZXh0KSB7XG4gIHBsYWluVGV4dCA9IHBsYWluVGV4dC50b0xvd2VyQ2FzZSgpOyAgLy8vXG5cbiAgcGxhaW5UZXh0ID0gcGxhaW5UZXh0LnJlcGxhY2UoL1teYS16IF0vZywgU0lOR0xFX1NQQUNFKTtcblxuICBwbGFpblRleHQgPSBwbGFpblRleHQucmVwbGFjZSgvXFxzKy9nLCBTSU5HTEVfU1BBQ0UpO1xuXG4gIHBsYWluVGV4dCA9IHBsYWluVGV4dC5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBwbGFpblRleHQ7XG59XG4iXSwibmFtZXMiOlsiaW5kZXhNYXBGcm9tRGl2aXNpb25NYXJrZG93bk5vZGVzIiwiZGl2aXNpb25NYXJrZG93bk5vZGVzIiwiY29udGV4dCIsImluZGV4TWFwIiwiaW5kZXhPcHRpb25zIiwicGhyYXNlcyIsImlnbm9yZWRXb3JkcyIsInBocmFzZU1hdGNoZXJzIiwicGhyYXNlTWF0Y2hlcnNGcm9tUGhyYXNlIiwiZm9yRWFjaCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiaW5kZXgiLCJwYWdlTnVtYmVyIiwicGxhaW5UZXh0IiwiYXNQbGFpblRleHQiLCJlbnRyaWVzIiwiZW50cmllc0Zyb21QbGFpblRleHRBbmRQaHJhc2VNYXRjaGVycyIsImVudHJ5IiwicGFnZU51bWJlcnMiLCJwYWdlTnVtYmVyc0luY2x1ZGVzUGFnZU51bWJlciIsImluY2x1ZGVzIiwicHVzaCIsImlnbm9yZWRXb3JkIiwicHJlcGFyZVBsYWluVGV4dCIsInBocmFzZU1hdGNoZXIiLCJyZWd1bGFyRXhwcmVzc2lvbiIsInJlcGxhY2VtZW50IiwicmVwbGFjZSIsInNwbGl0IiwiU0lOR0xFX1NQQUNFIiwibWFwIiwicGhyYXNlIiwiUmVnRXhwIiwiR0xPQkFMX0ZMQUciLCJVTkRFUlNDT1JFIiwidG9Mb3dlckNhc2UiLCJFTVBUWV9TVFJJTkciXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQUlnQkE7OztlQUFBQTs7O3lCQUZvRDtBQUU3RCxTQUFTQSxrQ0FBa0NDLHFCQUFxQixFQUFFQyxPQUFPO0lBQzlFLElBQU1DLFdBQVcsQ0FBQztJQUVsQixJQUFNLEFBQUVDLGVBQWlCRixRQUFqQkUsY0FDQUMsVUFBMEJELGFBQTFCQyxTQUFTQyxlQUFpQkYsYUFBakJFLGNBQ1hDLGlCQUFpQkMseUJBQXlCSDtJQUVoREosc0JBQXNCUSxPQUFPLENBQUMsU0FBQ0Msc0JBQXNCQztRQUNuRCxJQUFNQyxhQUFhRCxRQUFRLEdBQ3JCRSxZQUFZSCxxQkFBcUJJLFdBQVcsQ0FBQ1osVUFDN0NhLFVBQVVDLHNDQUFzQ0gsV0FBV047UUFFakVRLFFBQVFOLE9BQU8sQ0FBQyxTQUFDUTtZQUNmLElBQUlDLGNBQWNmLFFBQVEsQ0FBQ2MsTUFBTSxJQUFJO1lBRXJDLElBQUlDLGdCQUFnQixNQUFNO2dCQUN4QkEsY0FBYyxFQUFFO2dCQUVoQmYsUUFBUSxDQUFDYyxNQUFNLEdBQUdDO1lBQ3BCO1lBRUEsSUFBTUMsZ0NBQWdDRCxZQUFZRSxRQUFRLENBQUNSO1lBRTNELElBQUksQ0FBQ08sK0JBQStCO2dCQUNsQ0QsWUFBWUcsSUFBSSxDQUFDVDtZQUNuQjtRQUNGO0lBQ0Y7SUFFQU4sYUFBYUcsT0FBTyxDQUFDLFNBQUNhO1FBQ3BCLE9BQU9uQixRQUFRLENBQUNtQixZQUFZO0lBQzlCO0lBRUEsT0FBT25CO0FBQ1Q7QUFFQSxTQUFTYSxzQ0FBc0NILFNBQVMsRUFBRU4sY0FBYztJQUN0RU0sWUFBWVUsaUJBQWlCVixZQUFhLEdBQUc7SUFFN0NOLGVBQWVFLE9BQU8sQ0FBQyxTQUFDZTtRQUN0QixJQUFRQyxvQkFBbUNELGNBQW5DQyxtQkFBbUJDLGNBQWdCRixjQUFoQkU7UUFFM0JiLFlBQVlBLFVBQVVjLE9BQU8sQ0FBQ0YsbUJBQW1CQztJQUNuRDtJQUVBLElBQU1YLFVBQVVGLFVBQVVlLEtBQUssQ0FBQ0MsdUJBQVk7SUFFNUMsT0FBT2Q7QUFDVDtBQUVBLFNBQVNQLHlCQUF5QkgsT0FBTztJQUN2QyxJQUFNRSxpQkFBaUJGLFFBQVF5QixHQUFHLENBQUMsU0FBQ0M7UUFDbEMsSUFBTU4sb0JBQW9CLElBQUlPLE9BQU9ELFFBQVFFLHNCQUFXLEdBQ2xEUCxjQUFjSyxPQUFPSixPQUFPLENBQUMsT0FBT08scUJBQVUsR0FDOUNWLGdCQUFnQjtZQUNkQyxtQkFBQUE7WUFDQUMsYUFBQUE7UUFDRjtRQUVOLE9BQU9GO0lBQ1Q7SUFFQSxPQUFPakI7QUFDVDtBQUVBLFNBQVNnQixpQkFBaUJWLFNBQVM7SUFDakNBLFlBQVlBLFVBQVVzQixXQUFXLElBQUssR0FBRztJQUV6Q3RCLFlBQVlBLFVBQVVjLE9BQU8sQ0FBQyxZQUFZRSx1QkFBWTtJQUV0RGhCLFlBQVlBLFVBQVVjLE9BQU8sQ0FBQyxRQUFRRSx1QkFBWTtJQUVsRGhCLFlBQVlBLFVBQVVjLE9BQU8sQ0FBQyxjQUFjUyx1QkFBWTtJQUV4RCxPQUFPdkI7QUFDVCJ9