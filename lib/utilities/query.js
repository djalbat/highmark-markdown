"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentsDirectiveMarkdownNodeFromNode: function() {
        return contentsDirectiveMarkdownNodeFromNode;
    },
    default: function() {
        return _default;
    },
    embedDirectiveMarkdownNodesFromNode: function() {
        return embedDirectiveMarkdownNodesFromNode;
    },
    footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodesFromNode: function() {
        return footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodesFromNode;
    },
    footnoteLinkMarkdownNodesFromNode: function() {
        return footnoteLinkMarkdownNodesFromNode;
    },
    footnoteMarkdownNodeFromNode: function() {
        return footnoteMarkdownNodeFromNode;
    },
    footnotesDirectiveMarkdownNodeFromNode: function() {
        return footnotesDirectiveMarkdownNodeFromNode;
    },
    headingMarkdownNodesFromNode: function() {
        return headingMarkdownNodesFromNode;
    },
    ignoreDirectiveMarkdownNodeFromNode: function() {
        return ignoreDirectiveMarkdownNodeFromNode;
    },
    includeDirectiveMarkdownNodesFromNode: function() {
        return includeDirectiveMarkdownNodesFromNode;
    },
    indexDirectiveMarkdownNodeFromNode: function() {
        return indexDirectiveMarkdownNodeFromNode;
    },
    nodeQuery: function() {
        return nodeQuery;
    },
    nodesQuery: function() {
        return nodesQuery;
    },
    pageNumberDirectiveMarkdownNodeFromNode: function() {
        return pageNumberDirectiveMarkdownNodeFromNode;
    },
    subDivisionMarkdownNodesFromNode: function() {
        return subDivisionMarkdownNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _necessary = require("necessary");
var first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push;
var footnoteMarkdownNodeQuery = _occamquery.Query.fromExpression("/subDivision/footnote"), indexDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpression("/subDivision/directives/indexDirective"), ignoreDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpression("/division/subDivision/directives/ignoreDirective"), contentsDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpression("/subDivision/directives/contentsDirective"), footnotesDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpression("/subDivision/directives/footnotesDirective"), pageNumberDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpression("/subDivision/directives/pageNumber"), headingMarkdownNodesQuery = _occamquery.Query.fromExpression("/division/subDivision/primaryHeading|secondaryHeading|tertiaryHeading|quaternaryHeading"), subDivisionMarkdownNodesQuery = _occamquery.Query.fromExpression("/division/subDivision"), footnoteLinkMarkdownNodesQuery = _occamquery.Query.fromExpression("//footnoteLink"), embedDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpression("/subDivision/directives/embedDirective"), includeDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpression("/subDivision/directives/includeDirective"), footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpression("//footnote|footnoteLink|footnotesDirective");
function nodeQuery(expression) {
    var query = _occamquery.Query.fromExpression(expression);
    return function(node) {
        var nodes = query.execute(node), nodesLength = nodes.length;
        if (nodesLength > 0) {
            var firstNode = first(nodes);
            node = firstNode; ///
        } else {
            node = null;
        }
        return node;
    };
}
function nodesQuery(expression) {
    var query = _occamquery.Query.fromExpression(expression);
    return function(node) {
        var nodes = query.execute(node);
        return nodes;
    };
}
function footnoteMarkdownNodeFromNode(node) {
    var footnoteMarkdownNode = nodeFromNodeAndQuery(node, footnoteMarkdownNodeQuery);
    return footnoteMarkdownNode;
}
function indexDirectiveMarkdownNodeFromNode(node) {
    var indexDirectiveMarkdownNode = nodeFromNodeAndQuery(node, indexDirectiveMarkdownNodeQuery);
    return indexDirectiveMarkdownNode;
}
function ignoreDirectiveMarkdownNodeFromNode(node) {
    var ignoreDirectiveMarkdownNode = nodeFromNodeAndQuery(node, ignoreDirectiveMarkdownNodeQuery);
    return ignoreDirectiveMarkdownNode;
}
function contentsDirectiveMarkdownNodeFromNode(node) {
    var contentsDirectiveMarkdownNode = nodeFromNodeAndQuery(node, contentsDirectiveMarkdownNodeQuery);
    return contentsDirectiveMarkdownNode;
}
function footnotesDirectiveMarkdownNodeFromNode(node) {
    var footnotesDirectiveMarkdownNode = nodeFromNodeAndQuery(node, footnotesDirectiveMarkdownNodeQuery);
    return footnotesDirectiveMarkdownNode;
}
function pageNumberDirectiveMarkdownNodeFromNode(node) {
    var pageNumberDirectiveMarkdownNode = nodeFromNodeAndQuery(node, pageNumberDirectiveMarkdownNodeQuery);
    return pageNumberDirectiveMarkdownNode;
}
function headingMarkdownNodesFromNode(node) {
    var headingMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, headingMarkdownNodesQuery, headingMarkdownNodes);
    return headingMarkdownNodes;
}
function subDivisionMarkdownNodesFromNode(node) {
    var subDivisionMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, subDivisionMarkdownNodesQuery, subDivisionMarkdownNodes);
    return subDivisionMarkdownNodes;
}
function footnoteLinkMarkdownNodesFromNode(node) {
    var linkMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, footnoteLinkMarkdownNodesQuery, linkMarkdownNodes);
    return linkMarkdownNodes;
}
function embedDirectiveMarkdownNodesFromNode(node) {
    var embedDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, embedDirectiveMarkdownNodesQuery, embedDirectiveMarkdownNodes);
    return embedDirectiveMarkdownNodes;
}
function includeDirectiveMarkdownNodesFromNode(node) {
    var includeDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, includeDirectiveMarkdownNodesQuery, includeDirectiveMarkdownNodes);
    return includeDirectiveMarkdownNodes;
}
function footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodesFromNode(node) {
    var footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodesQuery, footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodes);
    return footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodes;
}
var _default = {
    footnoteMarkdownNodeFromNode: footnoteMarkdownNodeFromNode,
    indexDirectiveMarkdownNodeFromNode: indexDirectiveMarkdownNodeFromNode,
    ignoreDirectiveMarkdownNodeFromNode: ignoreDirectiveMarkdownNodeFromNode,
    contentsDirectiveMarkdownNodeFromNode: contentsDirectiveMarkdownNodeFromNode,
    footnotesDirectiveMarkdownNodeFromNode: footnotesDirectiveMarkdownNodeFromNode,
    pageNumberDirectiveMarkdownNodeFromNode: pageNumberDirectiveMarkdownNodeFromNode,
    headingMarkdownNodesFromNode: headingMarkdownNodesFromNode,
    subDivisionMarkdownNodesFromNode: subDivisionMarkdownNodesFromNode,
    footnoteLinkMarkdownNodesFromNode: footnoteLinkMarkdownNodesFromNode,
    embedDirectiveMarkdownNodesFromNode: embedDirectiveMarkdownNodesFromNode,
    includeDirectiveMarkdownNodesFromNode: includeDirectiveMarkdownNodesFromNode,
    footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodesFromNode: footnoteFootnoteLinkOrFootnotesDirectiveMarkdownNodesFromNode
};
function nodeFromNodeAndQuery(node, query) {
    var queryNodes = query.execute(node), queryNodesLength = queryNodes.length;
    if (queryNodesLength === 0) {
        node = null;
    } else {
        var firstQueryNode = first(queryNodes);
        node = firstQueryNode; ///
    }
    return node;
}
function nodesFromNodeAndQuery(node, query, nodes) {
    var queryNodes = query.execute(node);
    push(nodes, queryNodes);
    return nodes;
}

//# sourceMappingURL=data:application/json;base64,