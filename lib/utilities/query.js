"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentsMarkdownNodeFromNode: function() {
        return contentsMarkdownNodeFromNode;
    },
    default: function() {
        return _default;
    },
    footnoteMarkdownNodesFromNode: function() {
        return footnoteMarkdownNodesFromNode;
    },
    headingMarkdownNodesFromNode: function() {
        return headingMarkdownNodesFromNode;
    },
    linkMarkdownNodesFromNode: function() {
        return linkMarkdownNodesFromNode;
    },
    primaryHeadingMarkdownNodesFromNode: function() {
        return primaryHeadingMarkdownNodesFromNode;
    },
    referenceMarkdownNodesFromNode: function() {
        return referenceMarkdownNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _necessary = require("necessary");
var first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push;
var linkMarkdownNodesQuery = _occamquery.Query.fromExpression("//link"), contentMarkdownNodeQuery = _occamquery.Query.fromExpression("//contents"), headingMarkdownNodesQuery = _occamquery.Query.fromExpression("//primaryHeading|secondaryHeading|tertiaryHeading|quaternaryHeading"), footnoteMarkdownNodesQuery = _occamquery.Query.fromExpression("//footnote"), referenceMarkdownNodesQuery = _occamquery.Query.fromExpression("//reference"), primaryHeadingMarkdownNodesQuery = _occamquery.Query.fromExpression("//primaryHeading");
function linkMarkdownNodesFromNode(node) {
    var linkMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, linkMarkdownNodesQuery, linkMarkdownNodes);
    return linkMarkdownNodes;
}
function contentsMarkdownNodeFromNode(node) {
    var contentsMarkdownNode = nodeFromNodeAndQuery(node, contentMarkdownNodeQuery);
    return contentsMarkdownNode;
}
function headingMarkdownNodesFromNode(node) {
    var headingMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, headingMarkdownNodesQuery, headingMarkdownNodes);
    return headingMarkdownNodes;
}
function footnoteMarkdownNodesFromNode(node) {
    var footnoteMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, footnoteMarkdownNodesQuery, footnoteMarkdownNodes);
    return footnoteMarkdownNodes;
}
function referenceMarkdownNodesFromNode(node) {
    var referenceMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, referenceMarkdownNodesQuery, referenceMarkdownNodes);
    return referenceMarkdownNodes;
}
function primaryHeadingMarkdownNodesFromNode(node) {
    var primaryHeadingMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, primaryHeadingMarkdownNodesQuery, primaryHeadingMarkdownNodes);
    return primaryHeadingMarkdownNodes;
}
var _default = {
    linkMarkdownNodesFromNode: linkMarkdownNodesFromNode,
    contentsMarkdownNodeFromNode: contentsMarkdownNodeFromNode,
    headingMarkdownNodesFromNode: headingMarkdownNodesFromNode,
    footnoteMarkdownNodesFromNode: footnoteMarkdownNodesFromNode,
    referenceMarkdownNodesFromNode: referenceMarkdownNodesFromNode,
    primaryHeadingMarkdownNodesFromNode: primaryHeadingMarkdownNodesFromNode
};
function nodeFromNodeAndQuery(node, query) {
    var queryNodes = query.execute(node), queryNodesLength = queryNodes.length;
    if (queryNodesLength === 0) {
        node = null;
    } else {
        var firstQueryNode = first(queryNodes);
        node = firstQueryNode; ///
    }
    return node;
}
function nodesFromNodeAndQuery(node, query, nodes) {
    var queryNodes = query.execute(node);
    push(nodes, queryNodes);
    return nodes;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcXVlcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIm9jY2FtLXF1ZXJ5XCI7XG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBmaXJzdCwgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmNvbnN0IGxpbmtNYXJrZG93bk5vZGVzUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvbihgLy9saW5rYCksXG4gICAgICBjb250ZW50TWFya2Rvd25Ob2RlUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvbihgLy9jb250ZW50c2ApLFxuICAgICAgaGVhZGluZ01hcmtkb3duTm9kZXNRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uKGAvL3ByaW1hcnlIZWFkaW5nfHNlY29uZGFyeUhlYWRpbmd8dGVydGlhcnlIZWFkaW5nfHF1YXRlcm5hcnlIZWFkaW5nYCksXG4gICAgICBmb290bm90ZU1hcmtkb3duTm9kZXNRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uKGAvL2Zvb3Rub3RlYCksXG4gICAgICByZWZlcmVuY2VNYXJrZG93bk5vZGVzUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvbihgLy9yZWZlcmVuY2VgKSxcbiAgICAgIHByaW1hcnlIZWFkaW5nTWFya2Rvd25Ob2Rlc1F1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb24oYC8vcHJpbWFyeUhlYWRpbmdgKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmtNYXJrZG93bk5vZGVzRnJvbU5vZGUobm9kZSwgbGlua01hcmtkb3duTm9kZXMgPSBbXSkge1xuICBub2Rlc0Zyb21Ob2RlQW5kUXVlcnkobm9kZSwgbGlua01hcmtkb3duTm9kZXNRdWVyeSwgbGlua01hcmtkb3duTm9kZXMpO1xuXG4gIHJldHVybiBsaW5rTWFya2Rvd25Ob2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRlbnRzTWFya2Rvd25Ob2RlRnJvbU5vZGUobm9kZSkge1xuICBjb25zdCBjb250ZW50c01hcmtkb3duTm9kZSA9IG5vZGVGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIGNvbnRlbnRNYXJrZG93bk5vZGVRdWVyeSk7XG5cbiAgcmV0dXJuIGNvbnRlbnRzTWFya2Rvd25Ob2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGVhZGluZ01hcmtkb3duTm9kZXNGcm9tTm9kZShub2RlLCBoZWFkaW5nTWFya2Rvd25Ob2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBoZWFkaW5nTWFya2Rvd25Ob2Rlc1F1ZXJ5LCBoZWFkaW5nTWFya2Rvd25Ob2Rlcyk7XG5cbiAgcmV0dXJuIGhlYWRpbmdNYXJrZG93bk5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9vdG5vdGVNYXJrZG93bk5vZGVzRnJvbU5vZGUobm9kZSwgZm9vdG5vdGVNYXJrZG93bk5vZGVzID0gW10pIHtcbiAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIGZvb3Rub3RlTWFya2Rvd25Ob2Rlc1F1ZXJ5LCBmb290bm90ZU1hcmtkb3duTm9kZXMpO1xuXG4gIHJldHVybiBmb290bm90ZU1hcmtkb3duTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZlcmVuY2VNYXJrZG93bk5vZGVzRnJvbU5vZGUobm9kZSwgcmVmZXJlbmNlTWFya2Rvd25Ob2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCByZWZlcmVuY2VNYXJrZG93bk5vZGVzUXVlcnksIHJlZmVyZW5jZU1hcmtkb3duTm9kZXMpO1xuXG4gIHJldHVybiByZWZlcmVuY2VNYXJrZG93bk5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJpbWFyeUhlYWRpbmdNYXJrZG93bk5vZGVzRnJvbU5vZGUobm9kZSwgcHJpbWFyeUhlYWRpbmdNYXJrZG93bk5vZGVzID0gW10pIHtcbiAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIHByaW1hcnlIZWFkaW5nTWFya2Rvd25Ob2Rlc1F1ZXJ5LCBwcmltYXJ5SGVhZGluZ01hcmtkb3duTm9kZXMpO1xuXG4gIHJldHVybiBwcmltYXJ5SGVhZGluZ01hcmtkb3duTm9kZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbGlua01hcmtkb3duTm9kZXNGcm9tTm9kZSxcbiAgY29udGVudHNNYXJrZG93bk5vZGVGcm9tTm9kZSxcbiAgaGVhZGluZ01hcmtkb3duTm9kZXNGcm9tTm9kZSxcbiAgZm9vdG5vdGVNYXJrZG93bk5vZGVzRnJvbU5vZGUsXG4gIHJlZmVyZW5jZU1hcmtkb3duTm9kZXNGcm9tTm9kZSxcbiAgcHJpbWFyeUhlYWRpbmdNYXJrZG93bk5vZGVzRnJvbU5vZGVcbn07XG5cbmZ1bmN0aW9uIG5vZGVGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIHF1ZXJ5KSB7XG4gIGNvbnN0IHF1ZXJ5Tm9kZXMgPSBxdWVyeS5leGVjdXRlKG5vZGUpLFxuICAgICAgICBxdWVyeU5vZGVzTGVuZ3RoID0gcXVlcnlOb2Rlcy5sZW5ndGg7XG5cbiAgaWYgKHF1ZXJ5Tm9kZXNMZW5ndGggPT09IDApIHtcbiAgICBub2RlID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBmaXJzdFF1ZXJ5Tm9kZSA9IGZpcnN0KHF1ZXJ5Tm9kZXMpO1xuXG4gICAgbm9kZSA9IGZpcnN0UXVlcnlOb2RlOyAgLy8vXG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIHF1ZXJ5LCBub2Rlcykge1xuICBjb25zdCBxdWVyeU5vZGVzID0gcXVlcnkuZXhlY3V0ZShub2RlKTtcblxuICBwdXNoKG5vZGVzLCBxdWVyeU5vZGVzKTtcblxuICByZXR1cm4gbm9kZXM7XG59XG4iXSwibmFtZXMiOlsiY29udGVudHNNYXJrZG93bk5vZGVGcm9tTm9kZSIsImZvb3Rub3RlTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlIiwiaGVhZGluZ01hcmtkb3duTm9kZXNGcm9tTm9kZSIsImxpbmtNYXJrZG93bk5vZGVzRnJvbU5vZGUiLCJwcmltYXJ5SGVhZGluZ01hcmtkb3duTm9kZXNGcm9tTm9kZSIsInJlZmVyZW5jZU1hcmtkb3duTm9kZXNGcm9tTm9kZSIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJwdXNoIiwibGlua01hcmtkb3duTm9kZXNRdWVyeSIsIlF1ZXJ5IiwiZnJvbUV4cHJlc3Npb24iLCJjb250ZW50TWFya2Rvd25Ob2RlUXVlcnkiLCJoZWFkaW5nTWFya2Rvd25Ob2Rlc1F1ZXJ5IiwiZm9vdG5vdGVNYXJrZG93bk5vZGVzUXVlcnkiLCJyZWZlcmVuY2VNYXJrZG93bk5vZGVzUXVlcnkiLCJwcmltYXJ5SGVhZGluZ01hcmtkb3duTm9kZXNRdWVyeSIsIm5vZGUiLCJsaW5rTWFya2Rvd25Ob2RlcyIsIm5vZGVzRnJvbU5vZGVBbmRRdWVyeSIsImNvbnRlbnRzTWFya2Rvd25Ob2RlIiwibm9kZUZyb21Ob2RlQW5kUXVlcnkiLCJoZWFkaW5nTWFya2Rvd25Ob2RlcyIsImZvb3Rub3RlTWFya2Rvd25Ob2RlcyIsInJlZmVyZW5jZU1hcmtkb3duTm9kZXMiLCJwcmltYXJ5SGVhZGluZ01hcmtkb3duTm9kZXMiLCJxdWVyeSIsInF1ZXJ5Tm9kZXMiLCJleGVjdXRlIiwicXVlcnlOb2Rlc0xlbmd0aCIsImxlbmd0aCIsImZpcnN0UXVlcnlOb2RlIiwibm9kZXMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBb0JnQkEsNEJBQTRCO2VBQTVCQTs7SUE4QmhCLE9BT0U7ZUFQRjs7SUFsQmdCQyw2QkFBNkI7ZUFBN0JBOztJQU5BQyw0QkFBNEI7ZUFBNUJBOztJQVpBQyx5QkFBeUI7ZUFBekJBOztJQThCQUMsbUNBQW1DO2VBQW5DQTs7SUFOQUMsOEJBQThCO2VBQTlCQTs7OzBCQXBDTTt5QkFDUztBQUUvQixJQUFRQyxRQUFnQkMseUJBQWMsQ0FBOUJELE9BQU9FLE9BQVNELHlCQUFjLENBQXZCQztBQUVmLElBQU1DLHlCQUF5QkMsaUJBQUssQ0FBQ0MsY0FBYyxDQUFFLFdBQy9DQywyQkFBMkJGLGlCQUFLLENBQUNDLGNBQWMsQ0FBRSxlQUNqREUsNEJBQTRCSCxpQkFBSyxDQUFDQyxjQUFjLENBQUUsd0VBQ2xERyw2QkFBNkJKLGlCQUFLLENBQUNDLGNBQWMsQ0FBRSxlQUNuREksOEJBQThCTCxpQkFBSyxDQUFDQyxjQUFjLENBQUUsZ0JBQ3BESyxtQ0FBbUNOLGlCQUFLLENBQUNDLGNBQWMsQ0FBRTtBQUV4RCxTQUFTUiwwQkFBMEJjLElBQUk7UUFBRUMsb0JBQUFBLGlFQUFvQixFQUFFO0lBQ3BFQyxzQkFBc0JGLE1BQU1SLHdCQUF3QlM7SUFFcEQsT0FBT0E7QUFDVDtBQUVPLFNBQVNsQiw2QkFBNkJpQixJQUFJO0lBQy9DLElBQU1HLHVCQUF1QkMscUJBQXFCSixNQUFNTDtJQUV4RCxPQUFPUTtBQUNUO0FBRU8sU0FBU2xCLDZCQUE2QmUsSUFBSTtRQUFFSyx1QkFBQUEsaUVBQXVCLEVBQUU7SUFDMUVILHNCQUFzQkYsTUFBTUosMkJBQTJCUztJQUV2RCxPQUFPQTtBQUNUO0FBRU8sU0FBU3JCLDhCQUE4QmdCLElBQUk7UUFBRU0sd0JBQUFBLGlFQUF3QixFQUFFO0lBQzVFSixzQkFBc0JGLE1BQU1ILDRCQUE0QlM7SUFFeEQsT0FBT0E7QUFDVDtBQUVPLFNBQVNsQiwrQkFBK0JZLElBQUk7UUFBRU8seUJBQUFBLGlFQUF5QixFQUFFO0lBQzlFTCxzQkFBc0JGLE1BQU1GLDZCQUE2QlM7SUFFekQsT0FBT0E7QUFDVDtBQUVPLFNBQVNwQixvQ0FBb0NhLElBQUk7UUFBRVEsOEJBQUFBLGlFQUE4QixFQUFFO0lBQ3hGTixzQkFBc0JGLE1BQU1ELGtDQUFrQ1M7SUFFOUQsT0FBT0E7QUFDVDtJQUVBLFdBQWU7SUFDYnRCLDJCQUFBQTtJQUNBSCw4QkFBQUE7SUFDQUUsOEJBQUFBO0lBQ0FELCtCQUFBQTtJQUNBSSxnQ0FBQUE7SUFDQUQscUNBQUFBO0FBQ0Y7QUFFQSxTQUFTaUIscUJBQXFCSixJQUFJLEVBQUVTLEtBQUs7SUFDdkMsSUFBTUMsYUFBYUQsTUFBTUUsT0FBTyxDQUFDWCxPQUMzQlksbUJBQW1CRixXQUFXRyxNQUFNO0lBRTFDLElBQUlELHFCQUFxQixHQUFHO1FBQzFCWixPQUFPO0lBQ1QsT0FBTztRQUNMLElBQU1jLGlCQUFpQnpCLE1BQU1xQjtRQUU3QlYsT0FBT2MsZ0JBQWlCLEdBQUc7SUFDN0I7SUFFQSxPQUFPZDtBQUNUO0FBRUEsU0FBU0Usc0JBQXNCRixJQUFJLEVBQUVTLEtBQUssRUFBRU0sS0FBSztJQUMvQyxJQUFNTCxhQUFhRCxNQUFNRSxPQUFPLENBQUNYO0lBRWpDVCxLQUFLd0IsT0FBT0w7SUFFWixPQUFPSztBQUNUIn0=