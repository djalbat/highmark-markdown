"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentsDirectiveMarkdownNodeFromNode: function() {
        return contentsDirectiveMarkdownNodeFromNode;
    },
    default: function() {
        return _default;
    },
    divisionMarkdownNodeFromNode: function() {
        return divisionMarkdownNodeFromNode;
    },
    divisionMarkdownNodesFromNode: function() {
        return divisionMarkdownNodesFromNode;
    },
    embedDirectiveMarkdownNodesFromNode: function() {
        return embedDirectiveMarkdownNodesFromNode;
    },
    footnoteLinkMarkdownNodesFromNode: function() {
        return footnoteLinkMarkdownNodesFromNode;
    },
    footnoteMarkdownNodeFromNode: function() {
        return footnoteMarkdownNodeFromNode;
    },
    footnotesDirectiveMarkdownNodeFromNode: function() {
        return footnotesDirectiveMarkdownNodeFromNode;
    },
    footnotesMarkdownNodesFromNode: function() {
        return footnotesMarkdownNodesFromNode;
    },
    headingMarkdownNodesFromNode: function() {
        return headingMarkdownNodesFromNode;
    },
    ignoreDirectiveMarkdownNodeFromNode: function() {
        return ignoreDirectiveMarkdownNodeFromNode;
    },
    includeDirectiveMarkdownNodesFromNode: function() {
        return includeDirectiveMarkdownNodesFromNode;
    },
    indexDirectiveMarkdownNodeFromNode: function() {
        return indexDirectiveMarkdownNodeFromNode;
    },
    nodeQuery: function() {
        return nodeQuery;
    },
    nodesQuery: function() {
        return nodesQuery;
    },
    pageNumberDirectiveMarkdownNodeFromNode: function() {
        return pageNumberDirectiveMarkdownNodeFromNode;
    },
    subDivisionMarkdownNodeFromNode: function() {
        return subDivisionMarkdownNodeFromNode;
    },
    subDivisionMarkdownNodesFromNode: function() {
        return subDivisionMarkdownNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _necessary = require("necessary");
var push = _necessary.arrayUtilities.push;
var footnoteMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/division/footnote"), divisionMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/markdown/division"), subDivisionMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/division/subDivision"), indexDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/division/subDivision/directives/indexDirective"), ignoreDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/division/subDivision/directives/ignoreDirective"), contentsDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/division/subDivision/directives/contentsDirective"), footnotesDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/division/subDivision/directives/footnotesDirective"), pageNumberDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpressionString("//directives/pageNumber"), headingMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/division/primaryHeading|secondaryHeading|tertiaryHeading|quaternaryHeading"), divisionMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/markdown/division"), footnotesMarkdownNodesQuery = _occamquery.Query.fromExpressionString("//footnote|footnoteLink|footnotesDirective"), subDivisionMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/division/subDivision"), footnoteLinkMarkdownNodesQuery = _occamquery.Query.fromExpressionString("//footnoteLink"), embedDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/subDivision/directives/embedDirective"), includeDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/division/subDivision/directives/includeDirective");
function nodeQuery(expression) {
    var query = _occamquery.Query.fromExpressionString(expression);
    return function(node) {
        var nodes = query.execute(node);
        node = nodes.shift() || null; ///
        return node;
    };
}
function nodesQuery(expression) {
    var query = _occamquery.Query.fromExpressionString(expression);
    return function(node) {
        var nodes = query.execute(node);
        return nodes;
    };
}
function footnoteMarkdownNodeFromNode(node) {
    var footnoteMarkdownNode = nodeFromNodeAndQuery(node, footnoteMarkdownNodeQuery);
    return footnoteMarkdownNode;
}
function divisionMarkdownNodeFromNode(node) {
    var divisionMarkdownNode = nodeFromNodeAndQuery(node, divisionMarkdownNodeQuery);
    return divisionMarkdownNode;
}
function subDivisionMarkdownNodeFromNode(node) {
    var subDivisionMarkdownNode = nodeFromNodeAndQuery(node, subDivisionMarkdownNodeQuery);
    return subDivisionMarkdownNode;
}
function indexDirectiveMarkdownNodeFromNode(node) {
    var indexDirectiveMarkdownNode = nodeFromNodeAndQuery(node, indexDirectiveMarkdownNodeQuery);
    return indexDirectiveMarkdownNode;
}
function ignoreDirectiveMarkdownNodeFromNode(node) {
    var ignoreDirectiveMarkdownNode = nodeFromNodeAndQuery(node, ignoreDirectiveMarkdownNodeQuery);
    return ignoreDirectiveMarkdownNode;
}
function contentsDirectiveMarkdownNodeFromNode(node) {
    var contentsDirectiveMarkdownNode = nodeFromNodeAndQuery(node, contentsDirectiveMarkdownNodeQuery);
    return contentsDirectiveMarkdownNode;
}
function footnotesDirectiveMarkdownNodeFromNode(node) {
    var footnotesDirectiveMarkdownNode = nodeFromNodeAndQuery(node, footnotesDirectiveMarkdownNodeQuery);
    return footnotesDirectiveMarkdownNode;
}
function pageNumberDirectiveMarkdownNodeFromNode(node) {
    var pageNumberDirectiveMarkdownNode = nodeFromNodeAndQuery(node, pageNumberDirectiveMarkdownNodeQuery);
    return pageNumberDirectiveMarkdownNode;
}
function headingMarkdownNodesFromNode(node) {
    var headingMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, headingMarkdownNodesQuery, headingMarkdownNodes);
    return headingMarkdownNodes;
}
function divisionMarkdownNodesFromNode(node) {
    var divisionMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, divisionMarkdownNodesQuery, divisionMarkdownNodes);
    return divisionMarkdownNodes;
}
function footnotesMarkdownNodesFromNode(node) {
    var footnotesMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, footnotesMarkdownNodesQuery, footnotesMarkdownNodes);
    return footnotesMarkdownNodes;
}
function subDivisionMarkdownNodesFromNode(node) {
    var subDivisionMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, subDivisionMarkdownNodesQuery, subDivisionMarkdownNodes);
    return subDivisionMarkdownNodes;
}
function footnoteLinkMarkdownNodesFromNode(node) {
    var linkMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, footnoteLinkMarkdownNodesQuery, linkMarkdownNodes);
    return linkMarkdownNodes;
}
function embedDirectiveMarkdownNodesFromNode(node) {
    var embedDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, embedDirectiveMarkdownNodesQuery, embedDirectiveMarkdownNodes);
    return embedDirectiveMarkdownNodes;
}
function includeDirectiveMarkdownNodesFromNode(node) {
    var includeDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, includeDirectiveMarkdownNodesQuery, includeDirectiveMarkdownNodes);
    return includeDirectiveMarkdownNodes;
}
var _default = {
    footnoteMarkdownNodeFromNode: footnoteMarkdownNodeFromNode,
    indexDirectiveMarkdownNodeFromNode: indexDirectiveMarkdownNodeFromNode,
    ignoreDirectiveMarkdownNodeFromNode: ignoreDirectiveMarkdownNodeFromNode,
    contentsDirectiveMarkdownNodeFromNode: contentsDirectiveMarkdownNodeFromNode,
    footnotesDirectiveMarkdownNodeFromNode: footnotesDirectiveMarkdownNodeFromNode,
    pageNumberDirectiveMarkdownNodeFromNode: pageNumberDirectiveMarkdownNodeFromNode,
    headingMarkdownNodesFromNode: headingMarkdownNodesFromNode,
    footnotesMarkdownNodesFromNode: footnotesMarkdownNodesFromNode,
    footnoteLinkMarkdownNodesFromNode: footnoteLinkMarkdownNodesFromNode,
    embedDirectiveMarkdownNodesFromNode: embedDirectiveMarkdownNodesFromNode,
    includeDirectiveMarkdownNodesFromNode: includeDirectiveMarkdownNodesFromNode
};
function nodeFromNodeAndQuery(node, query) {
    var queryNodes = query.execute(node), queryNode = queryNodes.shift() || null;
    node = queryNode; ///
    return node;
}
function nodesFromNodeAndQuery(node, query, nodes) {
    var queryNodes = query.execute(node);
    push(nodes, queryNodes);
    return nodes;
}

//# sourceMappingURL=data:application/json;base64,