"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentsDirectiveMarkdownNodeFromNode: function() {
        return contentsDirectiveMarkdownNodeFromNode;
    },
    default: function() {
        return _default;
    },
    embedDirectiveMarkdownNodesFromNode: function() {
        return embedDirectiveMarkdownNodesFromNode;
    },
    footnoteMarkdownNodesFromNode: function() {
        return footnoteMarkdownNodesFromNode;
    },
    footnotesDirectiveMarkdownNodeFromNode: function() {
        return footnotesDirectiveMarkdownNodeFromNode;
    },
    headingMarkdownNodesFromNode: function() {
        return headingMarkdownNodesFromNode;
    },
    ignoreDirectiveMarkdownNodeFromNode: function() {
        return ignoreDirectiveMarkdownNodeFromNode;
    },
    includeDirectiveMarkdownNodesFromNode: function() {
        return includeDirectiveMarkdownNodesFromNode;
    },
    linkMarkdownNodesFromNode: function() {
        return linkMarkdownNodesFromNode;
    },
    linkReferenceOrFootnotesDirectiveMarkdownNodesFromNode: function() {
        return linkReferenceOrFootnotesDirectiveMarkdownNodesFromNode;
    },
    nodeQuery: function() {
        return nodeQuery;
    },
    nodesQuery: function() {
        return nodesQuery;
    }
});
var _occamquery = require("occam-query");
var _necessary = require("necessary");
var first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push;
var linkMarkdownNodesQuery = _occamquery.Query.fromExpression("//link"), headingMarkdownNodesQuery = _occamquery.Query.fromExpression("//primaryHeading|secondaryHeading|tertiaryHeading|quaternaryHeading"), footnoteMarkdownNodesQuery = _occamquery.Query.fromExpression("//footnote"), embedDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpression("//directives/embedDirective"), includeDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpression("//directives/includeDirective"), ignoreDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpression("//directives/ignoreDirective"), contentsDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpression("//directives/contentsDirective"), footnotesDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpression("//directives/footnotesDirective"), linkReferenceOrFootnotesDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpression("//link|reference|footnotesDirective");
function nodeQuery(expression) {
    var query = _occamquery.Query.fromExpression(expression);
    return function(node) {
        var nodes = query.execute(node), nodesLength = nodes.length;
        if (nodesLength > 0) {
            var firstNode = first(nodes);
            node = firstNode; ///
        } else {
            node = null;
        }
        return node;
    };
}
function nodesQuery(expression) {
    var query = _occamquery.Query.fromExpression(expression);
    return function(node) {
        var nodes = query.execute(node);
        return nodes;
    };
}
function linkMarkdownNodesFromNode(node) {
    var linkMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, linkMarkdownNodesQuery, linkMarkdownNodes);
    return linkMarkdownNodes;
}
function headingMarkdownNodesFromNode(node) {
    var headingMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, headingMarkdownNodesQuery, headingMarkdownNodes);
    return headingMarkdownNodes;
}
function footnoteMarkdownNodesFromNode(node) {
    var footnoteMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, footnoteMarkdownNodesQuery, footnoteMarkdownNodes);
    return footnoteMarkdownNodes;
}
function embedDirectiveMarkdownNodesFromNode(node) {
    var embedDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, embedDirectiveMarkdownNodesQuery, embedDirectiveMarkdownNodes);
    return embedDirectiveMarkdownNodes;
}
function linkReferenceOrFootnotesDirectiveMarkdownNodesFromNode(node) {
    var linkReferenceOrFootnotesDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, linkReferenceOrFootnotesDirectiveMarkdownNodesQuery, linkReferenceOrFootnotesDirectiveMarkdownNodes);
    return linkReferenceOrFootnotesDirectiveMarkdownNodes;
}
function includeDirectiveMarkdownNodesFromNode(node) {
    var includeDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, includeDirectiveMarkdownNodesQuery, includeDirectiveMarkdownNodes);
    return includeDirectiveMarkdownNodes;
}
function ignoreDirectiveMarkdownNodeFromNode(node) {
    var ignoreDirectiveMarkdownNode = nodeFromNodeAndQuery(node, ignoreDirectiveMarkdownNodeQuery);
    return ignoreDirectiveMarkdownNode;
}
function contentsDirectiveMarkdownNodeFromNode(node) {
    var contentsDirectiveMarkdownNode = nodeFromNodeAndQuery(node, contentsDirectiveMarkdownNodeQuery);
    return contentsDirectiveMarkdownNode;
}
function footnotesDirectiveMarkdownNodeFromNode(node) {
    var footnotesDirectiveMarkdownNode = nodeFromNodeAndQuery(node, footnotesDirectiveMarkdownNodeQuery);
    return footnotesDirectiveMarkdownNode;
}
var _default = {
    linkMarkdownNodesFromNode: linkMarkdownNodesFromNode,
    headingMarkdownNodesFromNode: headingMarkdownNodesFromNode,
    footnoteMarkdownNodesFromNode: footnoteMarkdownNodesFromNode,
    embedDirectiveMarkdownNodesFromNode: embedDirectiveMarkdownNodesFromNode,
    linkReferenceOrFootnotesDirectiveMarkdownNodesFromNode: linkReferenceOrFootnotesDirectiveMarkdownNodesFromNode,
    includeDirectiveMarkdownNodesFromNode: includeDirectiveMarkdownNodesFromNode,
    ignoreDirectiveMarkdownNodeFromNode: ignoreDirectiveMarkdownNodeFromNode,
    contentsDirectiveMarkdownNodeFromNode: contentsDirectiveMarkdownNodeFromNode,
    footnotesDirectiveMarkdownNodeFromNode: footnotesDirectiveMarkdownNodeFromNode
};
function nodeFromNodeAndQuery(node, query) {
    var queryNodes = query.execute(node), queryNodesLength = queryNodes.length;
    if (queryNodesLength === 0) {
        node = null;
    } else {
        var firstQueryNode = first(queryNodes);
        node = firstQueryNode; ///
    }
    return node;
}
function nodesFromNodeAndQuery(node, query, nodes) {
    var queryNodes = query.execute(node);
    push(nodes, queryNodes);
    return nodes;
}

//# sourceMappingURL=data:application/json;base64,