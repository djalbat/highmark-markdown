"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentsMarkdownNodeFromNode: function() {
        return contentsMarkdownNodeFromNode;
    },
    default: function() {
        return _default;
    },
    embedMarkdownNodesFromNode: function() {
        return embedMarkdownNodesFromNode;
    },
    footnoteMarkdownNodesFromNode: function() {
        return footnoteMarkdownNodesFromNode;
    },
    footnotesMarkdownNodeFromNode: function() {
        return footnotesMarkdownNodeFromNode;
    },
    footnotesMarkdownNodesFromNode: function() {
        return footnotesMarkdownNodesFromNode;
    },
    headingMarkdownNodesFromNode: function() {
        return headingMarkdownNodesFromNode;
    },
    ignoreMarkdownNodeFromNode: function() {
        return ignoreMarkdownNodeFromNode;
    },
    linkMarkdownNodesFromNode: function() {
        return linkMarkdownNodesFromNode;
    },
    linkReferenceOrFootnotesMarkdownNodesFromNode: function() {
        return linkReferenceOrFootnotesMarkdownNodesFromNode;
    },
    nodeQuery: function() {
        return nodeQuery;
    },
    nodesQuery: function() {
        return nodesQuery;
    },
    referenceMarkdownNodesFromNode: function() {
        return referenceMarkdownNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _necessary = require("necessary");
var first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push;
var linkMarkdownNodesQuery = _occamquery.Query.fromExpression("//link"), embedMarkdownNodesQuery = _occamquery.Query.fromExpression("//embed"), ignoreMarkdownNodeQuery = _occamquery.Query.fromExpression("//ignore"), headingMarkdownNodesQuery = _occamquery.Query.fromExpression("//primaryHeading|secondaryHeading|tertiaryHeading|quaternaryHeading"), contentsMarkdownNodeQuery = _occamquery.Query.fromExpression("//contents"), footnoteMarkdownNodesQuery = _occamquery.Query.fromExpression("//footnote"), footnotesMarkdownNodeQuery = _occamquery.Query.fromExpression("/division/subDivision/footnotes"), footnotesMarkdownNodesQuery = _occamquery.Query.fromExpression("//footnotes"), referenceMarkdownNodesQuery = _occamquery.Query.fromExpression("//reference"), linkReferenceOrFootnotesMarkdownNodesQuery = _occamquery.Query.fromExpression("//link|reference|footnotes");
function nodeQuery(expression) {
    var query = _occamquery.Query.fromExpression(expression);
    return function(node) {
        var nodes = query.execute(node), nodesLength = nodes.length;
        if (nodesLength > 0) {
            var firstNode = first(nodes);
            node = firstNode; ///
        } else {
            node = null;
        }
        return node;
    };
}
function nodesQuery(expression) {
    var query = _occamquery.Query.fromExpression(expression);
    return function(node) {
        var nodes = query.execute(node);
        return nodes;
    };
}
function linkMarkdownNodesFromNode(node) {
    var linkMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, linkMarkdownNodesQuery, linkMarkdownNodes);
    return linkMarkdownNodes;
}
function embedMarkdownNodesFromNode(node) {
    var embedMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, embedMarkdownNodesQuery, embedMarkdownNodes);
    return embedMarkdownNodes;
}
function ignoreMarkdownNodeFromNode(node) {
    var ignoreMarkdownNode = nodeFromNodeAndQuery(node, ignoreMarkdownNodeQuery);
    return ignoreMarkdownNode;
}
function contentsMarkdownNodeFromNode(node) {
    var contentsMarkdownNode = nodeFromNodeAndQuery(node, contentsMarkdownNodeQuery);
    return contentsMarkdownNode;
}
function footnotesMarkdownNodeFromNode(node) {
    var footnotesMarkdownNode = nodeFromNodeAndQuery(node, footnotesMarkdownNodeQuery);
    return footnotesMarkdownNode;
}
function headingMarkdownNodesFromNode(node) {
    var headingMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, headingMarkdownNodesQuery, headingMarkdownNodes);
    return headingMarkdownNodes;
}
function footnoteMarkdownNodesFromNode(node) {
    var footnoteMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, footnoteMarkdownNodesQuery, footnoteMarkdownNodes);
    return footnoteMarkdownNodes;
}
function referenceMarkdownNodesFromNode(node) {
    var referenceMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, referenceMarkdownNodesQuery, referenceMarkdownNodes);
    return referenceMarkdownNodes;
}
function footnotesMarkdownNodesFromNode(node) {
    var footnotesMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, footnotesMarkdownNodesQuery, footnotesMarkdownNodes);
    return footnotesMarkdownNodes;
}
function linkReferenceOrFootnotesMarkdownNodesFromNode(node) {
    var linkReferenceOrFootnotesMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    nodesFromNodeAndQuery(node, linkReferenceOrFootnotesMarkdownNodesQuery, linkReferenceOrFootnotesMarkdownNodes);
    return linkReferenceOrFootnotesMarkdownNodes;
}
var _default = {
    linkMarkdownNodesFromNode: linkMarkdownNodesFromNode,
    embedMarkdownNodesFromNode: embedMarkdownNodesFromNode,
    ignoreMarkdownNodeFromNode: ignoreMarkdownNodeFromNode,
    contentsMarkdownNodeFromNode: contentsMarkdownNodeFromNode,
    footnotesMarkdownNodeFromNode: footnotesMarkdownNodeFromNode,
    headingMarkdownNodesFromNode: headingMarkdownNodesFromNode,
    footnoteMarkdownNodesFromNode: footnoteMarkdownNodesFromNode,
    referenceMarkdownNodesFromNode: referenceMarkdownNodesFromNode,
    footnotesMarkdownNodesFromNode: footnotesMarkdownNodesFromNode,
    linkReferenceOrFootnotesMarkdownNodesFromNode: linkReferenceOrFootnotesMarkdownNodesFromNode
};
function nodeFromNodeAndQuery(node, query) {
    var queryNodes = query.execute(node), queryNodesLength = queryNodes.length;
    if (queryNodesLength === 0) {
        node = null;
    } else {
        var firstQueryNode = first(queryNodes);
        node = firstQueryNode; ///
    }
    return node;
}
function nodesFromNodeAndQuery(node, query, nodes) {
    var queryNodes = query.execute(node);
    push(nodes, queryNodes);
    return nodes;
}

//# sourceMappingURL=data:application/json;base64,