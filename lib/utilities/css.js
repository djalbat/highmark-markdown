"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cssFromMarkdownStyleAndSelectorString: function() {
        return cssFromMarkdownStyleAndSelectorString;
    },
    cssFromMarkdownStyleAndSelectorsList: function() {
        return cssFromMarkdownStyleAndSelectorsList;
    },
    default: function() {
        return _default;
    },
    ruleSetCSSNodesFromNode: function() {
        return ruleSetCSSNodesFromNode;
    },
    selectorCSSNodesFromNode: function() {
        return selectorCSSNodesFromNode;
    },
    selectorsCSSNodesFromNode: function() {
        return selectorsCSSNodesFromNode;
    },
    selectorsListCSSNodesFromNode: function() {
        return selectorsListCSSNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _query = require("../utilities/query");
var _division = /*#__PURE__*/ _interop_require_default(require("../style/division"));
var _selectorsList = /*#__PURE__*/ _interop_require_default(require("../style/selectorsList"));
var _lexer = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/lexer"));
var _parser = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/parser"));
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var markdownStyleLexer = _lexer.default.fromNothing(), markdownStyleParser = _parser.default.fromNothing();
var ruleSetCSSNodesQuery = _occamquery.Query.fromExpressionString("/*/ruleSet"), selectorCSSNodesQuery = _occamquery.Query.fromExpressionString("/selectors/selector"), selectorsCSSNodesQuery = _occamquery.Query.fromExpressionString("/selectorsList/selectors"), selectorsListCSSNodesQuery = _occamquery.Query.fromExpressionString("/*//ruleSet/selectorsList"); ///
function ruleSetCSSNodesFromNode(node) {
    var ruleSetCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, ruleSetCSSNodesQuery, ruleSetCSSNodes);
    return ruleSetCSSNodes;
}
function selectorCSSNodesFromNode(node) {
    var selectorCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, selectorCSSNodesQuery, selectorCSSNodes);
    return selectorCSSNodes;
}
function selectorsCSSNodesFromNode(node) {
    var selectorsCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, selectorsCSSNodesQuery, selectorsCSSNodes);
    return selectorsCSSNodes;
}
function selectorsListCSSNodesFromNode(node) {
    var selectorsListCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, selectorsListCSSNodesQuery, selectorsListCSSNodes);
    return selectorsListCSSNodes;
}
function cssFromMarkdownStyleAndSelectorsList(markdownStyle, selectorsList) {
    var css = _constants.EMPTY_STRING;
    var lexer = markdownStyleLexer, parser = markdownStyleParser, content = markdownStyle, tokens = lexer.tokenise(content), node = parser.parse(tokens);
    if (node !== null) {
        var division = _division.default.fromNodeTokensAndSelectorsList(node, tokens, selectorsList);
        css = division.asCSS();
    }
    return css;
}
function cssFromMarkdownStyleAndSelectorString(markdownStyle, selectorString) {
    var selectorsList = _selectorsList.default.fromSelectorsString(selectorString), css = cssFromMarkdownStyleAndSelectorsList(markdownStyle, selectorsList);
    return css;
}
var _default = {
    ruleSetCSSNodesFromNode: ruleSetCSSNodesFromNode,
    selectorCSSNodesFromNode: selectorCSSNodesFromNode,
    selectorsCSSNodesFromNode: selectorsCSSNodesFromNode,
    selectorsListCSSNodesFromNode: selectorsListCSSNodesFromNode,
    cssFromMarkdownStyleAndSelectorsList: cssFromMarkdownStyleAndSelectorsList,
    cssFromMarkdownStyleAndSelectorString: cssFromMarkdownStyleAndSelectorString
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3NzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCJvY2NhbS1xdWVyeVwiO1xuXG5pbXBvcnQgeyBub2Rlc0Zyb21Ob2RlQW5kUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmltcG9ydCBEaXZpc2lvbiBmcm9tIFwiLi4vc3R5bGUvZGl2aXNpb25cIjtcbmltcG9ydCBTZWxlY3RvcnNMaXN0IGZyb20gXCIuLi9zdHlsZS9zZWxlY3RvcnNMaXN0XCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZUxleGVyIGZyb20gXCIuLi9tYXJrZG93blN0eWxlL2xleGVyXCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZVBhcnNlciBmcm9tIFwiLi4vbWFya2Rvd25TdHlsZS9wYXJzZXJcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBtYXJrZG93blN0eWxlTGV4ZXIgPSBNYXJrZG93blN0eWxlTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duU3R5bGVQYXJzZXIgPSBNYXJrZG93blN0eWxlUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmNvbnN0IHJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvKi9ydWxlU2V0XCIpLFxuICAgICAgc2VsZWN0b3JDU1NOb2Rlc1F1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvc2VsZWN0b3JzL3NlbGVjdG9yXCIpLFxuICAgICAgc2VsZWN0b3JzQ1NTTm9kZXNRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uU3RyaW5nKFwiL3NlbGVjdG9yc0xpc3Qvc2VsZWN0b3JzXCIpLFxuICAgICAgc2VsZWN0b3JzTGlzdENTU05vZGVzUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvblN0cmluZyhcIi8qLy9ydWxlU2V0L3NlbGVjdG9yc0xpc3RcIik7IC8vL1xuXG5leHBvcnQgZnVuY3Rpb24gcnVsZVNldENTU05vZGVzRnJvbU5vZGUobm9kZSwgcnVsZVNldENTU05vZGVzID0gW10pIHtcbiAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIHJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5LCBydWxlU2V0Q1NTTm9kZXMpO1xuXG4gIHJldHVybiBydWxlU2V0Q1NTTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RvckNTU05vZGVzRnJvbU5vZGUobm9kZSwgc2VsZWN0b3JDU1NOb2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBzZWxlY3RvckNTU05vZGVzUXVlcnksIHNlbGVjdG9yQ1NTTm9kZXMpO1xuXG4gIHJldHVybiBzZWxlY3RvckNTU05vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0b3JzQ1NTTm9kZXNGcm9tTm9kZShub2RlLCBzZWxlY3RvcnNDU1NOb2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBzZWxlY3RvcnNDU1NOb2Rlc1F1ZXJ5LCBzZWxlY3RvcnNDU1NOb2Rlcyk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yc0NTU05vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0b3JzTGlzdENTU05vZGVzRnJvbU5vZGUobm9kZSwgc2VsZWN0b3JzTGlzdENTU05vZGVzID0gW10pIHtcbiAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIHNlbGVjdG9yc0xpc3RDU1NOb2Rlc1F1ZXJ5LCBzZWxlY3RvcnNMaXN0Q1NTTm9kZXMpO1xuXG4gIHJldHVybiBzZWxlY3RvcnNMaXN0Q1NTTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yc0xpc3QobWFya2Rvd25TdHlsZSwgc2VsZWN0b3JzTGlzdCkge1xuICBsZXQgY3NzID0gRU1QVFlfU1RSSU5HO1xuXG4gIGNvbnN0IGxleGVyID0gbWFya2Rvd25TdHlsZUxleGVyLCAvLy9cbiAgICAgICAgcGFyc2VyID0gIG1hcmtkb3duU3R5bGVQYXJzZXIsICAvLy9cbiAgICAgICAgY29udGVudCA9IG1hcmtkb3duU3R5bGUsIC8vL1xuICAgICAgICB0b2tlbnMgPSBsZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IHBhcnNlci5wYXJzZSh0b2tlbnMpO1xuXG4gIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgZGl2aXNpb24gPSBEaXZpc2lvbi5mcm9tTm9kZVRva2Vuc0FuZFNlbGVjdG9yc0xpc3Qobm9kZSwgdG9rZW5zLCBzZWxlY3RvcnNMaXN0KTtcblxuICAgIGNzcyA9IGRpdmlzaW9uLmFzQ1NTKCk7XG4gIH1cblxuICByZXR1cm4gY3NzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvclN0cmluZyhtYXJrZG93blN0eWxlLCBzZWxlY3RvclN0cmluZykge1xuICBjb25zdCBzZWxlY3RvcnNMaXN0ID0gU2VsZWN0b3JzTGlzdC5mcm9tU2VsZWN0b3JzU3RyaW5nKHNlbGVjdG9yU3RyaW5nKSxcbiAgICAgICAgY3NzID0gY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvcnNMaXN0KG1hcmtkb3duU3R5bGUsIHNlbGVjdG9yc0xpc3QpO1xuXG4gIHJldHVybiBjc3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcnVsZVNldENTU05vZGVzRnJvbU5vZGUsXG4gIHNlbGVjdG9yQ1NTTm9kZXNGcm9tTm9kZSxcbiAgc2VsZWN0b3JzQ1NTTm9kZXNGcm9tTm9kZSxcbiAgc2VsZWN0b3JzTGlzdENTU05vZGVzRnJvbU5vZGUsXG4gIGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzTGlzdCxcbiAgY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvclN0cmluZ1xufTtcbiJdLCJuYW1lcyI6WyJjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yU3RyaW5nIiwiY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvcnNMaXN0IiwicnVsZVNldENTU05vZGVzRnJvbU5vZGUiLCJzZWxlY3RvckNTU05vZGVzRnJvbU5vZGUiLCJzZWxlY3RvcnNDU1NOb2Rlc0Zyb21Ob2RlIiwic2VsZWN0b3JzTGlzdENTU05vZGVzRnJvbU5vZGUiLCJtYXJrZG93blN0eWxlTGV4ZXIiLCJNYXJrZG93blN0eWxlTGV4ZXIiLCJmcm9tTm90aGluZyIsIm1hcmtkb3duU3R5bGVQYXJzZXIiLCJNYXJrZG93blN0eWxlUGFyc2VyIiwicnVsZVNldENTU05vZGVzUXVlcnkiLCJRdWVyeSIsImZyb21FeHByZXNzaW9uU3RyaW5nIiwic2VsZWN0b3JDU1NOb2Rlc1F1ZXJ5Iiwic2VsZWN0b3JzQ1NTTm9kZXNRdWVyeSIsInNlbGVjdG9yc0xpc3RDU1NOb2Rlc1F1ZXJ5Iiwibm9kZSIsInJ1bGVTZXRDU1NOb2RlcyIsIm5vZGVzRnJvbU5vZGVBbmRRdWVyeSIsInNlbGVjdG9yQ1NTTm9kZXMiLCJzZWxlY3RvcnNDU1NOb2RlcyIsInNlbGVjdG9yc0xpc3RDU1NOb2RlcyIsIm1hcmtkb3duU3R5bGUiLCJzZWxlY3RvcnNMaXN0IiwiY3NzIiwiRU1QVFlfU1RSSU5HIiwibGV4ZXIiLCJwYXJzZXIiLCJjb250ZW50IiwidG9rZW5zIiwidG9rZW5pc2UiLCJwYXJzZSIsImRpdmlzaW9uIiwiRGl2aXNpb24iLCJmcm9tTm9kZVRva2Vuc0FuZFNlbGVjdG9yc0xpc3QiLCJhc0NTUyIsInNlbGVjdG9yU3RyaW5nIiwiU2VsZWN0b3JzTGlzdCIsImZyb21TZWxlY3RvcnNTdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQStEZ0JBLHFDQUFxQztlQUFyQ0E7O0lBbEJBQyxvQ0FBb0M7ZUFBcENBOztJQXlCaEIsT0FPRTtlQVBGOztJQWpEZ0JDLHVCQUF1QjtlQUF2QkE7O0lBTUFDLHdCQUF3QjtlQUF4QkE7O0lBTUFDLHlCQUF5QjtlQUF6QkE7O0lBTUFDLDZCQUE2QjtlQUE3QkE7OzswQkFyQ007cUJBRWdCOytEQUVqQjtvRUFDSzs0REFDSzs2REFDQzt5QkFFSDs7Ozs7O0FBRTdCLElBQU1DLHFCQUFxQkMsY0FBa0IsQ0FBQ0MsV0FBVyxJQUNuREMsc0JBQXNCQyxlQUFtQixDQUFDRixXQUFXO0FBRTNELElBQU1HLHVCQUF1QkMsaUJBQUssQ0FBQ0Msb0JBQW9CLENBQUMsZUFDbERDLHdCQUF3QkYsaUJBQUssQ0FBQ0Msb0JBQW9CLENBQUMsd0JBQ25ERSx5QkFBeUJILGlCQUFLLENBQUNDLG9CQUFvQixDQUFDLDZCQUNwREcsNkJBQTZCSixpQkFBSyxDQUFDQyxvQkFBb0IsQ0FBQyw4QkFBOEIsR0FBRztBQUV4RixTQUFTWCx3QkFBd0JlLElBQUk7UUFBRUMsa0JBQUFBLGlFQUFrQixFQUFFO0lBQ2hFQyxJQUFBQSw0QkFBcUIsRUFBQ0YsTUFBTU4sc0JBQXNCTztJQUVsRCxPQUFPQTtBQUNUO0FBRU8sU0FBU2YseUJBQXlCYyxJQUFJO1FBQUVHLG1CQUFBQSxpRUFBbUIsRUFBRTtJQUNsRUQsSUFBQUEsNEJBQXFCLEVBQUNGLE1BQU1ILHVCQUF1Qk07SUFFbkQsT0FBT0E7QUFDVDtBQUVPLFNBQVNoQiwwQkFBMEJhLElBQUk7UUFBRUksb0JBQUFBLGlFQUFvQixFQUFFO0lBQ3BFRixJQUFBQSw0QkFBcUIsRUFBQ0YsTUFBTUYsd0JBQXdCTTtJQUVwRCxPQUFPQTtBQUNUO0FBRU8sU0FBU2hCLDhCQUE4QlksSUFBSTtRQUFFSyx3QkFBQUEsaUVBQXdCLEVBQUU7SUFDNUVILElBQUFBLDRCQUFxQixFQUFDRixNQUFNRCw0QkFBNEJNO0lBRXhELE9BQU9BO0FBQ1Q7QUFFTyxTQUFTckIscUNBQXFDc0IsYUFBYSxFQUFFQyxhQUFhO0lBQy9FLElBQUlDLE1BQU1DLHVCQUFZO0lBRXRCLElBQU1DLFFBQVFyQixvQkFDUnNCLFNBQVVuQixxQkFDVm9CLFVBQVVOLGVBQ1ZPLFNBQVNILE1BQU1JLFFBQVEsQ0FBQ0YsVUFDeEJaLE9BQU9XLE9BQU9JLEtBQUssQ0FBQ0Y7SUFFMUIsSUFBSWIsU0FBUyxNQUFNO1FBQ2pCLElBQU1nQixXQUFXQyxpQkFBUSxDQUFDQyw4QkFBOEIsQ0FBQ2xCLE1BQU1hLFFBQVFOO1FBRXZFQyxNQUFNUSxTQUFTRyxLQUFLO0lBQ3RCO0lBRUEsT0FBT1g7QUFDVDtBQUVPLFNBQVN6QixzQ0FBc0N1QixhQUFhLEVBQUVjLGNBQWM7SUFDakYsSUFBTWIsZ0JBQWdCYyxzQkFBYSxDQUFDQyxtQkFBbUIsQ0FBQ0YsaUJBQ2xEWixNQUFNeEIscUNBQXFDc0IsZUFBZUM7SUFFaEUsT0FBT0M7QUFDVDtJQUVBLFdBQWU7SUFDYnZCLHlCQUFBQTtJQUNBQywwQkFBQUE7SUFDQUMsMkJBQUFBO0lBQ0FDLCtCQUFBQTtJQUNBSixzQ0FBQUE7SUFDQUQsdUNBQUFBO0FBQ0YifQ==