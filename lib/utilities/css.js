"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cssFromMarkdownStyleAndSelectorString: function() {
        return cssFromMarkdownStyleAndSelectorString;
    },
    cssFromMarkdownStyleAndSelectorsList: function() {
        return cssFromMarkdownStyleAndSelectorsList;
    },
    default: function() {
        return _default;
    },
    ruleSetCSSNodesFromNode: function() {
        return ruleSetCSSNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _query = require("../utilities/query");
var _division = /*#__PURE__*/ _interop_require_default(require("../style/division"));
var _selectorsList = /*#__PURE__*/ _interop_require_default(require("../style/selectorsList"));
var _lexer = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/lexer"));
var _parser = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/parser"));
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var markdownStyleLexer = _lexer.default.fromNothing(), markdownStyleParser = _parser.default.fromNothing();
var ruleSetCSSNodesQuery = _occamquery.Query.fromExpressionString("/*/ruleSet");
function ruleSetCSSNodesFromNode(node) {
    var ruleSetCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, ruleSetCSSNodesQuery, ruleSetCSSNodes);
    return ruleSetCSSNodes;
}
function cssFromMarkdownStyleAndSelectorsList(markdownStyle, selectorsList) {
    var css = _constants.EMPTY_STRING;
    var lexer = markdownStyleLexer, parser = markdownStyleParser, content = markdownStyle, tokens = lexer.tokenise(content), node = parser.parse(tokens);
    if (node !== null) {
        var division = _division.default.fromNodeTokensAndSelectorsList(node, tokens, selectorsList);
        css = division.asCSS();
    }
    return css;
}
function cssFromMarkdownStyleAndSelectorString(markdownStyle, selectorString) {
    var selectorsList = _selectorsList.default.fromSelectorsString(selectorString), css = cssFromMarkdownStyleAndSelectorsList(markdownStyle, selectorsList);
    return css;
}
var _default = {
    ruleSetCSSNodesFromNode: ruleSetCSSNodesFromNode,
    cssFromMarkdownStyleAndSelectorsList: cssFromMarkdownStyleAndSelectorsList,
    cssFromMarkdownStyleAndSelectorString: cssFromMarkdownStyleAndSelectorString
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3NzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCJvY2NhbS1xdWVyeVwiO1xuXG5pbXBvcnQgeyBub2RlRnJvbU5vZGVBbmRRdWVyeSwgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5pbXBvcnQgRGl2aXNpb24gZnJvbSBcIi4uL3N0eWxlL2RpdmlzaW9uXCI7XG5pbXBvcnQgU2VsZWN0b3JzTGlzdCBmcm9tIFwiLi4vc3R5bGUvc2VsZWN0b3JzTGlzdFwiO1xuaW1wb3J0IE1hcmtkb3duU3R5bGVMZXhlciBmcm9tIFwiLi4vbWFya2Rvd25TdHlsZS9sZXhlclwiO1xuaW1wb3J0IE1hcmtkb3duU3R5bGVQYXJzZXIgZnJvbSBcIi4uL21hcmtkb3duU3R5bGUvcGFyc2VyXCI7XG5cbmltcG9ydCB7IEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgbWFya2Rvd25TdHlsZUxleGVyID0gTWFya2Rvd25TdHlsZUxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBtYXJrZG93blN0eWxlUGFyc2VyID0gTWFya2Rvd25TdHlsZVBhcnNlci5mcm9tTm90aGluZygpO1xuXG5jb25zdCBydWxlU2V0Q1NTTm9kZXNRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uU3RyaW5nKFwiLyovcnVsZVNldFwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVTZXRDU1NOb2Rlc0Zyb21Ob2RlKG5vZGUsIHJ1bGVTZXRDU1NOb2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBydWxlU2V0Q1NTTm9kZXNRdWVyeSwgcnVsZVNldENTU05vZGVzKTtcblxuICByZXR1cm4gcnVsZVNldENTU05vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvcnNMaXN0KG1hcmtkb3duU3R5bGUsIHNlbGVjdG9yc0xpc3QpIHtcbiAgbGV0IGNzcyA9IEVNUFRZX1NUUklORztcblxuICBjb25zdCBsZXhlciA9IG1hcmtkb3duU3R5bGVMZXhlciwgLy8vXG4gICAgICAgIHBhcnNlciA9ICBtYXJrZG93blN0eWxlUGFyc2VyLCAgLy8vXG4gICAgICAgIGNvbnRlbnQgPSBtYXJrZG93blN0eWxlLCAvLy9cbiAgICAgICAgdG9rZW5zID0gbGV4ZXIudG9rZW5pc2UoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBwYXJzZXIucGFyc2UodG9rZW5zKTtcblxuICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRpdmlzaW9uID0gRGl2aXNpb24uZnJvbU5vZGVUb2tlbnNBbmRTZWxlY3RvcnNMaXN0KG5vZGUsIHRva2Vucywgc2VsZWN0b3JzTGlzdCk7XG5cbiAgICBjc3MgPSBkaXZpc2lvbi5hc0NTUygpO1xuICB9XG5cbiAgcmV0dXJuIGNzcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JTdHJpbmcobWFya2Rvd25TdHlsZSwgc2VsZWN0b3JTdHJpbmcpIHtcbiAgY29uc3Qgc2VsZWN0b3JzTGlzdCA9IFNlbGVjdG9yc0xpc3QuZnJvbVNlbGVjdG9yc1N0cmluZyhzZWxlY3RvclN0cmluZyksXG4gICAgICAgIGNzcyA9IGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzTGlzdChtYXJrZG93blN0eWxlLCBzZWxlY3RvcnNMaXN0KTtcblxuICByZXR1cm4gY3NzO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJ1bGVTZXRDU1NOb2Rlc0Zyb21Ob2RlLFxuICBjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yc0xpc3QsXG4gIGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JTdHJpbmdcbn07XG4iXSwibmFtZXMiOlsiY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvclN0cmluZyIsImNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzTGlzdCIsInJ1bGVTZXRDU1NOb2Rlc0Zyb21Ob2RlIiwibWFya2Rvd25TdHlsZUxleGVyIiwiTWFya2Rvd25TdHlsZUxleGVyIiwiZnJvbU5vdGhpbmciLCJtYXJrZG93blN0eWxlUGFyc2VyIiwiTWFya2Rvd25TdHlsZVBhcnNlciIsInJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5IiwiUXVlcnkiLCJmcm9tRXhwcmVzc2lvblN0cmluZyIsIm5vZGUiLCJydWxlU2V0Q1NTTm9kZXMiLCJub2Rlc0Zyb21Ob2RlQW5kUXVlcnkiLCJtYXJrZG93blN0eWxlIiwic2VsZWN0b3JzTGlzdCIsImNzcyIsIkVNUFRZX1NUUklORyIsImxleGVyIiwicGFyc2VyIiwiY29udGVudCIsInRva2VucyIsInRva2VuaXNlIiwicGFyc2UiLCJkaXZpc2lvbiIsIkRpdmlzaW9uIiwiZnJvbU5vZGVUb2tlbnNBbmRTZWxlY3RvcnNMaXN0IiwiYXNDU1MiLCJzZWxlY3RvclN0cmluZyIsIlNlbGVjdG9yc0xpc3QiLCJmcm9tU2VsZWN0b3JzU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUEwQ2dCQSxxQ0FBcUM7ZUFBckNBOztJQWxCQUMsb0NBQW9DO2VBQXBDQTs7SUF5QmhCLE9BSUU7ZUFKRjs7SUEvQmdCQyx1QkFBdUI7ZUFBdkJBOzs7MEJBaEJNO3FCQUVzQzsrREFFdkM7b0VBQ0s7NERBQ0s7NkRBQ0M7eUJBRUg7Ozs7OztBQUU3QixJQUFNQyxxQkFBcUJDLGNBQWtCLENBQUNDLFdBQVcsSUFDbkRDLHNCQUFzQkMsZUFBbUIsQ0FBQ0YsV0FBVztBQUUzRCxJQUFNRyx1QkFBdUJDLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDO0FBRWpELFNBQVNSLHdCQUF3QlMsSUFBSTtRQUFFQyxrQkFBQUEsaUVBQWtCLEVBQUU7SUFDaEVDLElBQUFBLDRCQUFxQixFQUFDRixNQUFNSCxzQkFBc0JJO0lBRWxELE9BQU9BO0FBQ1Q7QUFFTyxTQUFTWCxxQ0FBcUNhLGFBQWEsRUFBRUMsYUFBYTtJQUMvRSxJQUFJQyxNQUFNQyx1QkFBWTtJQUV0QixJQUFNQyxRQUFRZixvQkFDUmdCLFNBQVViLHFCQUNWYyxVQUFVTixlQUNWTyxTQUFTSCxNQUFNSSxRQUFRLENBQUNGLFVBQ3hCVCxPQUFPUSxPQUFPSSxLQUFLLENBQUNGO0lBRTFCLElBQUlWLFNBQVMsTUFBTTtRQUNqQixJQUFNYSxXQUFXQyxpQkFBUSxDQUFDQyw4QkFBOEIsQ0FBQ2YsTUFBTVUsUUFBUU47UUFFdkVDLE1BQU1RLFNBQVNHLEtBQUs7SUFDdEI7SUFFQSxPQUFPWDtBQUNUO0FBRU8sU0FBU2hCLHNDQUFzQ2MsYUFBYSxFQUFFYyxjQUFjO0lBQ2pGLElBQU1iLGdCQUFnQmMsc0JBQWEsQ0FBQ0MsbUJBQW1CLENBQUNGLGlCQUNsRFosTUFBTWYscUNBQXFDYSxlQUFlQztJQUVoRSxPQUFPQztBQUNUO0lBRUEsV0FBZTtJQUNiZCx5QkFBQUE7SUFDQUQsc0NBQUFBO0lBQ0FELHVDQUFBQTtBQUNGIn0=