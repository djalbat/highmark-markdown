"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cssFromMarkdownStyleMediaTypeAndSelectorsList: function() {
        return cssFromMarkdownStyleMediaTypeAndSelectorsList;
    },
    cssFromMarkdownStyleMediaTypeNameAndSelectorString: function() {
        return cssFromMarkdownStyleMediaTypeNameAndSelectorString;
    },
    default: function() {
        return _default;
    }
});
var _division = /*#__PURE__*/ _interop_require_default(require("../style/division"));
var _mediaType = /*#__PURE__*/ _interop_require_default(require("../style/mediaType"));
var _selectorsList = /*#__PURE__*/ _interop_require_default(require("../style/selectorsList"));
var _lexer = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/lexer"));
var _parser = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/parser"));
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var markdownStyleLexer = _lexer.default.fromNothing(), markdownStyleParser = _parser.default.fromNothing();
function cssFromMarkdownStyleMediaTypeAndSelectorsList(markdownStyle, mediaType, selectorsList) {
    var css = _constants.EMPTY_STRING;
    var lexer = markdownStyleLexer, parser = markdownStyleParser, content = markdownStyle, tokens = lexer.tokenise(content), node = parser.parse(tokens);
    if (node !== null) {
        var division = _division.default.fromNodeTokensMediaTypeAndSelectorsList(node, tokens, mediaType, selectorsList);
        css = division.asCSS();
    }
    return css;
}
function cssFromMarkdownStyleMediaTypeNameAndSelectorString(markdownStyle, mediaTypeName, selectorString) {
    var selectorsList = _selectorsList.default.fromSelectorsString(selectorString), mediaType = _mediaType.default.fromMediaTypeName(mediaTypeName), css = cssFromMarkdownStyleMediaTypeAndSelectorsList(markdownStyle, mediaType, selectorsList);
    return css;
}
var _default = {
    cssFromMarkdownStyleMediaTypeAndSelectorsList: cssFromMarkdownStyleMediaTypeAndSelectorsList,
    cssFromMarkdownStyleMediaTypeNameAndSelectorString: cssFromMarkdownStyleMediaTypeNameAndSelectorString
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3NzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgRGl2aXNpb24gZnJvbSBcIi4uL3N0eWxlL2RpdmlzaW9uXCI7XG5pbXBvcnQgTWVkaWFUeXBlIGZyb20gXCIuLi9zdHlsZS9tZWRpYVR5cGVcIjtcbmltcG9ydCBTZWxlY3RvcnNMaXN0IGZyb20gXCIuLi9zdHlsZS9zZWxlY3RvcnNMaXN0XCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZUxleGVyIGZyb20gXCIuLi9tYXJrZG93blN0eWxlL2xleGVyXCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZVBhcnNlciBmcm9tIFwiLi4vbWFya2Rvd25TdHlsZS9wYXJzZXJcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBtYXJrZG93blN0eWxlTGV4ZXIgPSBNYXJrZG93blN0eWxlTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duU3R5bGVQYXJzZXIgPSBNYXJrZG93blN0eWxlUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tTWFya2Rvd25TdHlsZU1lZGlhVHlwZUFuZFNlbGVjdG9yc0xpc3QobWFya2Rvd25TdHlsZSwgbWVkaWFUeXBlLCBzZWxlY3RvcnNMaXN0KSB7XG4gIGxldCBjc3MgPSBFTVBUWV9TVFJJTkc7XG5cbiAgY29uc3QgbGV4ZXIgPSBtYXJrZG93blN0eWxlTGV4ZXIsIC8vL1xuICAgICAgICBwYXJzZXIgPSAgbWFya2Rvd25TdHlsZVBhcnNlciwgIC8vL1xuICAgICAgICBjb250ZW50ID0gbWFya2Rvd25TdHlsZSwgLy8vXG4gICAgICAgIHRva2VucyA9IGxleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gcGFyc2VyLnBhcnNlKHRva2Vucyk7XG5cbiAgaWYgKG5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBkaXZpc2lvbiA9IERpdmlzaW9uLmZyb21Ob2RlVG9rZW5zTWVkaWFUeXBlQW5kU2VsZWN0b3JzTGlzdChub2RlLCB0b2tlbnMsIG1lZGlhVHlwZSwgc2VsZWN0b3JzTGlzdCk7XG5cbiAgICBjc3MgPSBkaXZpc2lvbi5hc0NTUygpO1xuICB9XG5cbiAgcmV0dXJuIGNzcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21NYXJrZG93blN0eWxlTWVkaWFUeXBlTmFtZUFuZFNlbGVjdG9yU3RyaW5nKG1hcmtkb3duU3R5bGUsIG1lZGlhVHlwZU5hbWUsIHNlbGVjdG9yU3RyaW5nKSB7XG4gIGNvbnN0IHNlbGVjdG9yc0xpc3QgPSBTZWxlY3RvcnNMaXN0LmZyb21TZWxlY3RvcnNTdHJpbmcoc2VsZWN0b3JTdHJpbmcpLFxuICAgICAgICBtZWRpYVR5cGUgPSBNZWRpYVR5cGUuZnJvbU1lZGlhVHlwZU5hbWUobWVkaWFUeXBlTmFtZSksXG4gICAgICAgIGNzcyA9IGNzc0Zyb21NYXJrZG93blN0eWxlTWVkaWFUeXBlQW5kU2VsZWN0b3JzTGlzdChtYXJrZG93blN0eWxlLCBtZWRpYVR5cGUsIHNlbGVjdG9yc0xpc3QpO1xuXG4gIHJldHVybiBjc3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY3NzRnJvbU1hcmtkb3duU3R5bGVNZWRpYVR5cGVBbmRTZWxlY3RvcnNMaXN0LFxuICBjc3NGcm9tTWFya2Rvd25TdHlsZU1lZGlhVHlwZU5hbWVBbmRTZWxlY3RvclN0cmluZ1xufTtcbiJdLCJuYW1lcyI6WyJjc3NGcm9tTWFya2Rvd25TdHlsZU1lZGlhVHlwZUFuZFNlbGVjdG9yc0xpc3QiLCJjc3NGcm9tTWFya2Rvd25TdHlsZU1lZGlhVHlwZU5hbWVBbmRTZWxlY3RvclN0cmluZyIsIm1hcmtkb3duU3R5bGVMZXhlciIsIk1hcmtkb3duU3R5bGVMZXhlciIsImZyb21Ob3RoaW5nIiwibWFya2Rvd25TdHlsZVBhcnNlciIsIk1hcmtkb3duU3R5bGVQYXJzZXIiLCJtYXJrZG93blN0eWxlIiwibWVkaWFUeXBlIiwic2VsZWN0b3JzTGlzdCIsImNzcyIsIkVNUFRZX1NUUklORyIsImxleGVyIiwicGFyc2VyIiwiY29udGVudCIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwiZGl2aXNpb24iLCJEaXZpc2lvbiIsImZyb21Ob2RlVG9rZW5zTWVkaWFUeXBlQW5kU2VsZWN0b3JzTGlzdCIsImFzQ1NTIiwibWVkaWFUeXBlTmFtZSIsInNlbGVjdG9yU3RyaW5nIiwiU2VsZWN0b3JzTGlzdCIsImZyb21TZWxlY3RvcnNTdHJpbmciLCJNZWRpYVR5cGUiLCJmcm9tTWVkaWFUeXBlTmFtZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFhZ0JBLDZDQUE2QztlQUE3Q0E7O0lBa0JBQyxrREFBa0Q7ZUFBbERBOztJQVFoQixPQUdFO2VBSEY7OzsrREFyQ3FCO2dFQUNDO29FQUNJOzREQUNLOzZEQUNDO3lCQUVIOzs7Ozs7QUFFN0IsSUFBTUMscUJBQXFCQyxjQUFrQixDQUFDQyxXQUFXLElBQ25EQyxzQkFBc0JDLGVBQW1CLENBQUNGLFdBQVc7QUFFcEQsU0FBU0osOENBQThDTyxhQUFhLEVBQUVDLFNBQVMsRUFBRUMsYUFBYTtJQUNuRyxJQUFJQyxNQUFNQyx1QkFBWTtJQUV0QixJQUFNQyxRQUFRVixvQkFDUlcsU0FBVVIscUJBQ1ZTLFVBQVVQLGVBQ1ZRLFNBQVNILE1BQU1JLFFBQVEsQ0FBQ0YsVUFDeEJHLE9BQU9KLE9BQU9LLEtBQUssQ0FBQ0g7SUFFMUIsSUFBSUUsU0FBUyxNQUFNO1FBQ2pCLElBQU1FLFdBQVdDLGlCQUFRLENBQUNDLHVDQUF1QyxDQUFDSixNQUFNRixRQUFRUCxXQUFXQztRQUUzRkMsTUFBTVMsU0FBU0csS0FBSztJQUN0QjtJQUVBLE9BQU9aO0FBQ1Q7QUFFTyxTQUFTVCxtREFBbURNLGFBQWEsRUFBRWdCLGFBQWEsRUFBRUMsY0FBYztJQUM3RyxJQUFNZixnQkFBZ0JnQixzQkFBYSxDQUFDQyxtQkFBbUIsQ0FBQ0YsaUJBQ2xEaEIsWUFBWW1CLGtCQUFTLENBQUNDLGlCQUFpQixDQUFDTCxnQkFDeENiLE1BQU1WLDhDQUE4Q08sZUFBZUMsV0FBV0M7SUFFcEYsT0FBT0M7QUFDVDtJQUVBLFdBQWU7SUFDYlYsK0NBQUFBO0lBQ0FDLG9EQUFBQTtBQUNGIn0=