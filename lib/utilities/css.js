"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cssFromMarkdownStyleAndSelectorString: function() {
        return cssFromMarkdownStyleAndSelectorString;
    },
    cssFromMarkdownStyleAndSelectorsList: function() {
        return cssFromMarkdownStyleAndSelectorsList;
    },
    default: function() {
        return _default;
    },
    nestedRuleSetCSSNodesFromNode: function() {
        return nestedRuleSetCSSNodesFromNode;
    },
    ruleSetCSSNodesFromNode: function() {
        return ruleSetCSSNodesFromNode;
    },
    selectorCSSNodesFromNode: function() {
        return selectorCSSNodesFromNode;
    },
    selectorsCSSNodesFromNode: function() {
        return selectorsCSSNodesFromNode;
    },
    selectorsListCSSNodesFromNode: function() {
        return selectorsListCSSNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _query = require("../utilities/query");
var _division = /*#__PURE__*/ _interop_require_default(require("../style/division"));
var _selectorsList = /*#__PURE__*/ _interop_require_default(require("../style/selectorsList"));
var _lexer = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/lexer"));
var _parser = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/parser"));
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var markdownStyleLexer = _lexer.default.fromNothing(), markdownStyleParser = _parser.default.fromNothing();
var ruleSetCSSNodesQuery = _occamquery.Query.fromExpressionString("/*/ruleSet"), selectorCSSNodesQuery = _occamquery.Query.fromExpressionString("/selectors/selector"), selectorsCSSNodesQuery = _occamquery.Query.fromExpressionString("/selectorsList/selectors"), nestedRuleSetCSSNodesQuery = _occamquery.Query.fromExpressionString("/*//ruleSet"), selectorsListCSSNodesQuery = _occamquery.Query.fromExpressionString("/*//ruleSet/selectorsList"); ///
function ruleSetCSSNodesFromNode(node) {
    var ruleSetCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, ruleSetCSSNodesQuery, ruleSetCSSNodes);
    return ruleSetCSSNodes;
}
function selectorCSSNodesFromNode(node) {
    var selectorCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, selectorCSSNodesQuery, selectorCSSNodes);
    return selectorCSSNodes;
}
function selectorsCSSNodesFromNode(node) {
    var selectorsCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, selectorsCSSNodesQuery, selectorsCSSNodes);
    return selectorsCSSNodes;
}
function nestedRuleSetCSSNodesFromNode(node) {
    var nestedRuleSetCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, nestedRuleSetCSSNodesQuery, nestedRuleSetCSSNodes);
    return nestedRuleSetCSSNodes;
}
function selectorsListCSSNodesFromNode(node) {
    var selectorsListCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, selectorsListCSSNodesQuery, selectorsListCSSNodes);
    return selectorsListCSSNodes;
}
function cssFromMarkdownStyleAndSelectorsList(markdownStyle, selectorsList) {
    var css = _constants.EMPTY_STRING;
    var lexer = markdownStyleLexer, parser = markdownStyleParser, content = markdownStyle, tokens = lexer.tokenise(content), node = parser.parse(tokens);
    if (node !== null) {
        var division = _division.default.fromNodeTokensAndSelectorsList(node, tokens, selectorsList);
        css = division.asCSS();
    }
    return css;
}
function cssFromMarkdownStyleAndSelectorString(markdownStyle, selectorString) {
    var selectorsList = _selectorsList.default.fromSelectorsString(selectorString), css = cssFromMarkdownStyleAndSelectorsList(markdownStyle, selectorsList);
    return css;
}
var _default = {
    ruleSetCSSNodesFromNode: ruleSetCSSNodesFromNode,
    selectorCSSNodesFromNode: selectorCSSNodesFromNode,
    selectorsCSSNodesFromNode: selectorsCSSNodesFromNode,
    selectorsListCSSNodesFromNode: selectorsListCSSNodesFromNode,
    cssFromMarkdownStyleAndSelectorsList: cssFromMarkdownStyleAndSelectorsList,
    cssFromMarkdownStyleAndSelectorString: cssFromMarkdownStyleAndSelectorString
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3NzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCJvY2NhbS1xdWVyeVwiO1xuXG5pbXBvcnQgeyBub2Rlc0Zyb21Ob2RlQW5kUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmltcG9ydCBEaXZpc2lvbiBmcm9tIFwiLi4vc3R5bGUvZGl2aXNpb25cIjtcbmltcG9ydCBTZWxlY3RvcnNMaXN0IGZyb20gXCIuLi9zdHlsZS9zZWxlY3RvcnNMaXN0XCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZUxleGVyIGZyb20gXCIuLi9tYXJrZG93blN0eWxlL2xleGVyXCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZVBhcnNlciBmcm9tIFwiLi4vbWFya2Rvd25TdHlsZS9wYXJzZXJcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBtYXJrZG93blN0eWxlTGV4ZXIgPSBNYXJrZG93blN0eWxlTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duU3R5bGVQYXJzZXIgPSBNYXJrZG93blN0eWxlUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmNvbnN0IHJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvKi9ydWxlU2V0XCIpLFxuICAgICAgc2VsZWN0b3JDU1NOb2Rlc1F1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvc2VsZWN0b3JzL3NlbGVjdG9yXCIpLFxuICAgICAgc2VsZWN0b3JzQ1NTTm9kZXNRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uU3RyaW5nKFwiL3NlbGVjdG9yc0xpc3Qvc2VsZWN0b3JzXCIpLFxuICAgICAgbmVzdGVkUnVsZVNldENTU05vZGVzUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvblN0cmluZyhcIi8qLy9ydWxlU2V0XCIpLFxuICAgICAgc2VsZWN0b3JzTGlzdENTU05vZGVzUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvblN0cmluZyhcIi8qLy9ydWxlU2V0L3NlbGVjdG9yc0xpc3RcIik7IC8vL1xuXG5leHBvcnQgZnVuY3Rpb24gcnVsZVNldENTU05vZGVzRnJvbU5vZGUobm9kZSwgcnVsZVNldENTU05vZGVzID0gW10pIHtcbiAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIHJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5LCBydWxlU2V0Q1NTTm9kZXMpO1xuXG4gIHJldHVybiBydWxlU2V0Q1NTTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RvckNTU05vZGVzRnJvbU5vZGUobm9kZSwgc2VsZWN0b3JDU1NOb2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBzZWxlY3RvckNTU05vZGVzUXVlcnksIHNlbGVjdG9yQ1NTTm9kZXMpO1xuXG4gIHJldHVybiBzZWxlY3RvckNTU05vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0b3JzQ1NTTm9kZXNGcm9tTm9kZShub2RlLCBzZWxlY3RvcnNDU1NOb2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBzZWxlY3RvcnNDU1NOb2Rlc1F1ZXJ5LCBzZWxlY3RvcnNDU1NOb2Rlcyk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yc0NTU05vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmVzdGVkUnVsZVNldENTU05vZGVzRnJvbU5vZGUobm9kZSwgbmVzdGVkUnVsZVNldENTU05vZGVzID0gW10pIHtcbiAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIG5lc3RlZFJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5LCBuZXN0ZWRSdWxlU2V0Q1NTTm9kZXMpO1xuXG4gIHJldHVybiBuZXN0ZWRSdWxlU2V0Q1NTTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RvcnNMaXN0Q1NTTm9kZXNGcm9tTm9kZShub2RlLCBzZWxlY3RvcnNMaXN0Q1NTTm9kZXMgPSBbXSkge1xuICBub2Rlc0Zyb21Ob2RlQW5kUXVlcnkobm9kZSwgc2VsZWN0b3JzTGlzdENTU05vZGVzUXVlcnksIHNlbGVjdG9yc0xpc3RDU1NOb2Rlcyk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yc0xpc3RDU1NOb2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzTGlzdChtYXJrZG93blN0eWxlLCBzZWxlY3RvcnNMaXN0KSB7XG4gIGxldCBjc3MgPSBFTVBUWV9TVFJJTkc7XG5cbiAgY29uc3QgbGV4ZXIgPSBtYXJrZG93blN0eWxlTGV4ZXIsIC8vL1xuICAgICAgICBwYXJzZXIgPSAgbWFya2Rvd25TdHlsZVBhcnNlciwgIC8vL1xuICAgICAgICBjb250ZW50ID0gbWFya2Rvd25TdHlsZSwgLy8vXG4gICAgICAgIHRva2VucyA9IGxleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gcGFyc2VyLnBhcnNlKHRva2Vucyk7XG5cbiAgaWYgKG5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBkaXZpc2lvbiA9IERpdmlzaW9uLmZyb21Ob2RlVG9rZW5zQW5kU2VsZWN0b3JzTGlzdChub2RlLCB0b2tlbnMsIHNlbGVjdG9yc0xpc3QpO1xuXG4gICAgY3NzID0gZGl2aXNpb24uYXNDU1MoKTtcbiAgfVxuXG4gIHJldHVybiBjc3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yU3RyaW5nKG1hcmtkb3duU3R5bGUsIHNlbGVjdG9yU3RyaW5nKSB7XG4gIGNvbnN0IHNlbGVjdG9yc0xpc3QgPSBTZWxlY3RvcnNMaXN0LmZyb21TZWxlY3RvcnNTdHJpbmcoc2VsZWN0b3JTdHJpbmcpLFxuICAgICAgICBjc3MgPSBjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yc0xpc3QobWFya2Rvd25TdHlsZSwgc2VsZWN0b3JzTGlzdCk7XG5cbiAgcmV0dXJuIGNzcztcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBydWxlU2V0Q1NTTm9kZXNGcm9tTm9kZSxcbiAgc2VsZWN0b3JDU1NOb2Rlc0Zyb21Ob2RlLFxuICBzZWxlY3RvcnNDU1NOb2Rlc0Zyb21Ob2RlLFxuICBzZWxlY3RvcnNMaXN0Q1NTTm9kZXNGcm9tTm9kZSxcbiAgY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvcnNMaXN0LFxuICBjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yU3RyaW5nXG59O1xuIl0sIm5hbWVzIjpbImNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JTdHJpbmciLCJjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yc0xpc3QiLCJuZXN0ZWRSdWxlU2V0Q1NTTm9kZXNGcm9tTm9kZSIsInJ1bGVTZXRDU1NOb2Rlc0Zyb21Ob2RlIiwic2VsZWN0b3JDU1NOb2Rlc0Zyb21Ob2RlIiwic2VsZWN0b3JzQ1NTTm9kZXNGcm9tTm9kZSIsInNlbGVjdG9yc0xpc3RDU1NOb2Rlc0Zyb21Ob2RlIiwibWFya2Rvd25TdHlsZUxleGVyIiwiTWFya2Rvd25TdHlsZUxleGVyIiwiZnJvbU5vdGhpbmciLCJtYXJrZG93blN0eWxlUGFyc2VyIiwiTWFya2Rvd25TdHlsZVBhcnNlciIsInJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5IiwiUXVlcnkiLCJmcm9tRXhwcmVzc2lvblN0cmluZyIsInNlbGVjdG9yQ1NTTm9kZXNRdWVyeSIsInNlbGVjdG9yc0NTU05vZGVzUXVlcnkiLCJuZXN0ZWRSdWxlU2V0Q1NTTm9kZXNRdWVyeSIsInNlbGVjdG9yc0xpc3RDU1NOb2Rlc1F1ZXJ5Iiwibm9kZSIsInJ1bGVTZXRDU1NOb2RlcyIsIm5vZGVzRnJvbU5vZGVBbmRRdWVyeSIsInNlbGVjdG9yQ1NTTm9kZXMiLCJzZWxlY3RvcnNDU1NOb2RlcyIsIm5lc3RlZFJ1bGVTZXRDU1NOb2RlcyIsInNlbGVjdG9yc0xpc3RDU1NOb2RlcyIsIm1hcmtkb3duU3R5bGUiLCJzZWxlY3RvcnNMaXN0IiwiY3NzIiwiRU1QVFlfU1RSSU5HIiwibGV4ZXIiLCJwYXJzZXIiLCJjb250ZW50IiwidG9rZW5zIiwidG9rZW5pc2UiLCJwYXJzZSIsImRpdmlzaW9uIiwiRGl2aXNpb24iLCJmcm9tTm9kZVRva2Vuc0FuZFNlbGVjdG9yc0xpc3QiLCJhc0NTUyIsInNlbGVjdG9yU3RyaW5nIiwiU2VsZWN0b3JzTGlzdCIsImZyb21TZWxlY3RvcnNTdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXNFZ0JBLHFDQUFxQztlQUFyQ0E7O0lBbEJBQyxvQ0FBb0M7ZUFBcENBOztJQXlCaEIsT0FPRTtlQVBGOztJQXJDZ0JDLDZCQUE2QjtlQUE3QkE7O0lBbEJBQyx1QkFBdUI7ZUFBdkJBOztJQU1BQyx3QkFBd0I7ZUFBeEJBOztJQU1BQyx5QkFBeUI7ZUFBekJBOztJQVlBQyw2QkFBNkI7ZUFBN0JBOzs7MEJBNUNNO3FCQUVnQjsrREFFakI7b0VBQ0s7NERBQ0s7NkRBQ0M7eUJBRUg7Ozs7OztBQUU3QixJQUFNQyxxQkFBcUJDLGNBQWtCLENBQUNDLFdBQVcsSUFDbkRDLHNCQUFzQkMsZUFBbUIsQ0FBQ0YsV0FBVztBQUUzRCxJQUFNRyx1QkFBdUJDLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDLGVBQ2xEQyx3QkFBd0JGLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDLHdCQUNuREUseUJBQXlCSCxpQkFBSyxDQUFDQyxvQkFBb0IsQ0FBQyw2QkFDcERHLDZCQUE2QkosaUJBQUssQ0FBQ0Msb0JBQW9CLENBQUMsZ0JBQ3hESSw2QkFBNkJMLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDLDhCQUE4QixHQUFHO0FBRXhGLFNBQVNYLHdCQUF3QmdCLElBQUk7UUFBRUMsa0JBQUFBLGlFQUFrQixFQUFFO0lBQ2hFQyxJQUFBQSw0QkFBcUIsRUFBQ0YsTUFBTVAsc0JBQXNCUTtJQUVsRCxPQUFPQTtBQUNUO0FBRU8sU0FBU2hCLHlCQUF5QmUsSUFBSTtRQUFFRyxtQkFBQUEsaUVBQW1CLEVBQUU7SUFDbEVELElBQUFBLDRCQUFxQixFQUFDRixNQUFNSix1QkFBdUJPO0lBRW5ELE9BQU9BO0FBQ1Q7QUFFTyxTQUFTakIsMEJBQTBCYyxJQUFJO1FBQUVJLG9CQUFBQSxpRUFBb0IsRUFBRTtJQUNwRUYsSUFBQUEsNEJBQXFCLEVBQUNGLE1BQU1ILHdCQUF3Qk87SUFFcEQsT0FBT0E7QUFDVDtBQUVPLFNBQVNyQiw4QkFBOEJpQixJQUFJO1FBQUVLLHdCQUFBQSxpRUFBd0IsRUFBRTtJQUM1RUgsSUFBQUEsNEJBQXFCLEVBQUNGLE1BQU1GLDRCQUE0Qk87SUFFeEQsT0FBT0E7QUFDVDtBQUVPLFNBQVNsQiw4QkFBOEJhLElBQUk7UUFBRU0sd0JBQUFBLGlFQUF3QixFQUFFO0lBQzVFSixJQUFBQSw0QkFBcUIsRUFBQ0YsTUFBTUQsNEJBQTRCTztJQUV4RCxPQUFPQTtBQUNUO0FBRU8sU0FBU3hCLHFDQUFxQ3lCLGFBQWEsRUFBRUMsYUFBYTtJQUMvRSxJQUFJQyxNQUFNQyx1QkFBWTtJQUV0QixJQUFNQyxRQUFRdkIsb0JBQ1J3QixTQUFVckIscUJBQ1ZzQixVQUFVTixlQUNWTyxTQUFTSCxNQUFNSSxRQUFRLENBQUNGLFVBQ3hCYixPQUFPWSxPQUFPSSxLQUFLLENBQUNGO0lBRTFCLElBQUlkLFNBQVMsTUFBTTtRQUNqQixJQUFNaUIsV0FBV0MsaUJBQVEsQ0FBQ0MsOEJBQThCLENBQUNuQixNQUFNYyxRQUFRTjtRQUV2RUMsTUFBTVEsU0FBU0csS0FBSztJQUN0QjtJQUVBLE9BQU9YO0FBQ1Q7QUFFTyxTQUFTNUIsc0NBQXNDMEIsYUFBYSxFQUFFYyxjQUFjO0lBQ2pGLElBQU1iLGdCQUFnQmMsc0JBQWEsQ0FBQ0MsbUJBQW1CLENBQUNGLGlCQUNsRFosTUFBTTNCLHFDQUFxQ3lCLGVBQWVDO0lBRWhFLE9BQU9DO0FBQ1Q7SUFFQSxXQUFlO0lBQ2J6Qix5QkFBQUE7SUFDQUMsMEJBQUFBO0lBQ0FDLDJCQUFBQTtJQUNBQywrQkFBQUE7SUFDQUwsc0NBQUFBO0lBQ0FELHVDQUFBQTtBQUNGIn0=