"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cssFromMarkdownStyleAndSelectorString: function() {
        return cssFromMarkdownStyleAndSelectorString;
    },
    cssFromMarkdownStyleAndSelectorsList: function() {
        return cssFromMarkdownStyleAndSelectorsList;
    },
    default: function() {
        return _default;
    },
    ruleSetCSSNodesFromNode: function() {
        return ruleSetCSSNodesFromNode;
    },
    selectorCSSNodesFromNode: function() {
        return selectorCSSNodesFromNode;
    },
    selectorsCSSNodesFromNode: function() {
        return selectorsCSSNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _query = require("../utilities/query");
var _division = /*#__PURE__*/ _interop_require_default(require("../style/division"));
var _selectorsList = /*#__PURE__*/ _interop_require_default(require("../style/selectorsList"));
var _lexer = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/lexer"));
var _parser = /*#__PURE__*/ _interop_require_default(require("../markdownStyle/parser"));
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var markdownStyleLexer = _lexer.default.fromNothing(), markdownStyleParser = _parser.default.fromNothing();
var ruleSetCSSNodesQuery = _occamquery.Query.fromExpressionString("/*/ruleSet"), selectorCSSNodesQuery = _occamquery.Query.fromExpressionString("/selectors/selector"), selectorsCSSNodesQuery = _occamquery.Query.fromExpressionString("/selectorsList/selectors");
function ruleSetCSSNodesFromNode(node) {
    var ruleSetCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, ruleSetCSSNodesQuery, ruleSetCSSNodes);
    return ruleSetCSSNodes;
}
function selectorCSSNodesFromNode(node) {
    var selectorCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, selectorCSSNodesQuery, selectorCSSNodes);
    return selectorCSSNodes;
}
function selectorsCSSNodesFromNode(node) {
    var selectorsCSSNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, selectorsCSSNodesQuery, selectorsCSSNodes);
    return selectorsCSSNodes;
}
function cssFromMarkdownStyleAndSelectorsList(markdownStyle, selectorsList) {
    var css = _constants.EMPTY_STRING;
    var lexer = markdownStyleLexer, parser = markdownStyleParser, content = markdownStyle, tokens = lexer.tokenise(content), node = parser.parse(tokens);
    if (node !== null) {
        var division = _division.default.fromNodeTokensAndSelectorsList(node, tokens, selectorsList);
        css = division.asCSS();
    }
    return css;
}
function cssFromMarkdownStyleAndSelectorString(markdownStyle, selectorString) {
    var selectorsList = _selectorsList.default.fromSelectorsString(selectorString), css = cssFromMarkdownStyleAndSelectorsList(markdownStyle, selectorsList);
    return css;
}
var _default = {
    ruleSetCSSNodesFromNode: ruleSetCSSNodesFromNode,
    selectorCSSNodesFromNode: selectorCSSNodesFromNode,
    selectorsCSSNodesFromNode: selectorsCSSNodesFromNode,
    cssFromMarkdownStyleAndSelectorsList: cssFromMarkdownStyleAndSelectorsList,
    cssFromMarkdownStyleAndSelectorString: cssFromMarkdownStyleAndSelectorString
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3NzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCJvY2NhbS1xdWVyeVwiO1xuXG5pbXBvcnQgeyBub2Rlc0Zyb21Ob2RlQW5kUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmltcG9ydCBEaXZpc2lvbiBmcm9tIFwiLi4vc3R5bGUvZGl2aXNpb25cIjtcbmltcG9ydCBTZWxlY3RvcnNMaXN0IGZyb20gXCIuLi9zdHlsZS9zZWxlY3RvcnNMaXN0XCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZUxleGVyIGZyb20gXCIuLi9tYXJrZG93blN0eWxlL2xleGVyXCI7XG5pbXBvcnQgTWFya2Rvd25TdHlsZVBhcnNlciBmcm9tIFwiLi4vbWFya2Rvd25TdHlsZS9wYXJzZXJcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBtYXJrZG93blN0eWxlTGV4ZXIgPSBNYXJrZG93blN0eWxlTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duU3R5bGVQYXJzZXIgPSBNYXJrZG93blN0eWxlUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmNvbnN0IHJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvKi9ydWxlU2V0XCIpLFxuICAgICAgc2VsZWN0b3JDU1NOb2Rlc1F1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvc2VsZWN0b3JzL3NlbGVjdG9yXCIpLFxuICAgICAgc2VsZWN0b3JzQ1NTTm9kZXNRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uU3RyaW5nKFwiL3NlbGVjdG9yc0xpc3Qvc2VsZWN0b3JzXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVsZVNldENTU05vZGVzRnJvbU5vZGUobm9kZSwgcnVsZVNldENTU05vZGVzID0gW10pIHtcbiAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIHJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5LCBydWxlU2V0Q1NTTm9kZXMpO1xuXG4gIHJldHVybiBydWxlU2V0Q1NTTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RvckNTU05vZGVzRnJvbU5vZGUobm9kZSwgc2VsZWN0b3JDU1NOb2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBzZWxlY3RvckNTU05vZGVzUXVlcnksIHNlbGVjdG9yQ1NTTm9kZXMpO1xuXG4gIHJldHVybiBzZWxlY3RvckNTU05vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0b3JzQ1NTTm9kZXNGcm9tTm9kZShub2RlLCBzZWxlY3RvcnNDU1NOb2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBzZWxlY3RvcnNDU1NOb2Rlc1F1ZXJ5LCBzZWxlY3RvcnNDU1NOb2Rlcyk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yc0NTU05vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvcnNMaXN0KG1hcmtkb3duU3R5bGUsIHNlbGVjdG9yc0xpc3QpIHtcbiAgbGV0IGNzcyA9IEVNUFRZX1NUUklORztcblxuICBjb25zdCBsZXhlciA9IG1hcmtkb3duU3R5bGVMZXhlciwgLy8vXG4gICAgICAgIHBhcnNlciA9ICBtYXJrZG93blN0eWxlUGFyc2VyLCAgLy8vXG4gICAgICAgIGNvbnRlbnQgPSBtYXJrZG93blN0eWxlLCAvLy9cbiAgICAgICAgdG9rZW5zID0gbGV4ZXIudG9rZW5pc2UoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBwYXJzZXIucGFyc2UodG9rZW5zKTtcblxuICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRpdmlzaW9uID0gRGl2aXNpb24uZnJvbU5vZGVUb2tlbnNBbmRTZWxlY3RvcnNMaXN0KG5vZGUsIHRva2Vucywgc2VsZWN0b3JzTGlzdCk7XG5cbiAgICBjc3MgPSBkaXZpc2lvbi5hc0NTUygpO1xuICB9XG5cbiAgcmV0dXJuIGNzcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JTdHJpbmcobWFya2Rvd25TdHlsZSwgc2VsZWN0b3JTdHJpbmcpIHtcbiAgY29uc3Qgc2VsZWN0b3JzTGlzdCA9IFNlbGVjdG9yc0xpc3QuZnJvbVNlbGVjdG9yc1N0cmluZyhzZWxlY3RvclN0cmluZyksXG4gICAgICAgIGNzcyA9IGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzTGlzdChtYXJrZG93blN0eWxlLCBzZWxlY3RvcnNMaXN0KTtcblxuICByZXR1cm4gY3NzO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJ1bGVTZXRDU1NOb2Rlc0Zyb21Ob2RlLFxuICBzZWxlY3RvckNTU05vZGVzRnJvbU5vZGUsXG4gIHNlbGVjdG9yc0NTU05vZGVzRnJvbU5vZGUsXG4gIGNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JzTGlzdCxcbiAgY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvclN0cmluZ1xufTtcbiJdLCJuYW1lcyI6WyJjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yU3RyaW5nIiwiY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvcnNMaXN0IiwicnVsZVNldENTU05vZGVzRnJvbU5vZGUiLCJzZWxlY3RvckNTU05vZGVzRnJvbU5vZGUiLCJzZWxlY3RvcnNDU1NOb2Rlc0Zyb21Ob2RlIiwibWFya2Rvd25TdHlsZUxleGVyIiwiTWFya2Rvd25TdHlsZUxleGVyIiwiZnJvbU5vdGhpbmciLCJtYXJrZG93blN0eWxlUGFyc2VyIiwiTWFya2Rvd25TdHlsZVBhcnNlciIsInJ1bGVTZXRDU1NOb2Rlc1F1ZXJ5IiwiUXVlcnkiLCJmcm9tRXhwcmVzc2lvblN0cmluZyIsInNlbGVjdG9yQ1NTTm9kZXNRdWVyeSIsInNlbGVjdG9yc0NTU05vZGVzUXVlcnkiLCJub2RlIiwicnVsZVNldENTU05vZGVzIiwibm9kZXNGcm9tTm9kZUFuZFF1ZXJ5Iiwic2VsZWN0b3JDU1NOb2RlcyIsInNlbGVjdG9yc0NTU05vZGVzIiwibWFya2Rvd25TdHlsZSIsInNlbGVjdG9yc0xpc3QiLCJjc3MiLCJFTVBUWV9TVFJJTkciLCJsZXhlciIsInBhcnNlciIsImNvbnRlbnQiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsInBhcnNlIiwiZGl2aXNpb24iLCJEaXZpc2lvbiIsImZyb21Ob2RlVG9rZW5zQW5kU2VsZWN0b3JzTGlzdCIsImFzQ1NTIiwic2VsZWN0b3JTdHJpbmciLCJTZWxlY3RvcnNMaXN0IiwiZnJvbVNlbGVjdG9yc1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBd0RnQkEscUNBQXFDO2VBQXJDQTs7SUFsQkFDLG9DQUFvQztlQUFwQ0E7O0lBeUJoQixPQU1FO2VBTkY7O0lBM0NnQkMsdUJBQXVCO2VBQXZCQTs7SUFNQUMsd0JBQXdCO2VBQXhCQTs7SUFNQUMseUJBQXlCO2VBQXpCQTs7OzBCQTlCTTtxQkFFZ0I7K0RBRWpCO29FQUNLOzREQUNLOzZEQUNDO3lCQUVIOzs7Ozs7QUFFN0IsSUFBTUMscUJBQXFCQyxjQUFrQixDQUFDQyxXQUFXLElBQ25EQyxzQkFBc0JDLGVBQW1CLENBQUNGLFdBQVc7QUFFM0QsSUFBTUcsdUJBQXVCQyxpQkFBSyxDQUFDQyxvQkFBb0IsQ0FBQyxlQUNsREMsd0JBQXdCRixpQkFBSyxDQUFDQyxvQkFBb0IsQ0FBQyx3QkFDbkRFLHlCQUF5QkgsaUJBQUssQ0FBQ0Msb0JBQW9CLENBQUM7QUFFbkQsU0FBU1Ysd0JBQXdCYSxJQUFJO1FBQUVDLGtCQUFBQSxpRUFBa0IsRUFBRTtJQUNoRUMsSUFBQUEsNEJBQXFCLEVBQUNGLE1BQU1MLHNCQUFzQk07SUFFbEQsT0FBT0E7QUFDVDtBQUVPLFNBQVNiLHlCQUF5QlksSUFBSTtRQUFFRyxtQkFBQUEsaUVBQW1CLEVBQUU7SUFDbEVELElBQUFBLDRCQUFxQixFQUFDRixNQUFNRix1QkFBdUJLO0lBRW5ELE9BQU9BO0FBQ1Q7QUFFTyxTQUFTZCwwQkFBMEJXLElBQUk7UUFBRUksb0JBQUFBLGlFQUFvQixFQUFFO0lBQ3BFRixJQUFBQSw0QkFBcUIsRUFBQ0YsTUFBTUQsd0JBQXdCSztJQUVwRCxPQUFPQTtBQUNUO0FBRU8sU0FBU2xCLHFDQUFxQ21CLGFBQWEsRUFBRUMsYUFBYTtJQUMvRSxJQUFJQyxNQUFNQyx1QkFBWTtJQUV0QixJQUFNQyxRQUFRbkIsb0JBQ1JvQixTQUFVakIscUJBQ1ZrQixVQUFVTixlQUNWTyxTQUFTSCxNQUFNSSxRQUFRLENBQUNGLFVBQ3hCWCxPQUFPVSxPQUFPSSxLQUFLLENBQUNGO0lBRTFCLElBQUlaLFNBQVMsTUFBTTtRQUNqQixJQUFNZSxXQUFXQyxpQkFBUSxDQUFDQyw4QkFBOEIsQ0FBQ2pCLE1BQU1ZLFFBQVFOO1FBRXZFQyxNQUFNUSxTQUFTRyxLQUFLO0lBQ3RCO0lBRUEsT0FBT1g7QUFDVDtBQUVPLFNBQVN0QixzQ0FBc0NvQixhQUFhLEVBQUVjLGNBQWM7SUFDakYsSUFBTWIsZ0JBQWdCYyxzQkFBYSxDQUFDQyxtQkFBbUIsQ0FBQ0YsaUJBQ2xEWixNQUFNckIscUNBQXFDbUIsZUFBZUM7SUFFaEUsT0FBT0M7QUFDVDtJQUVBLFdBQWU7SUFDYnBCLHlCQUFBQTtJQUNBQywwQkFBQUE7SUFDQUMsMkJBQUFBO0lBQ0FILHNDQUFBQTtJQUNBRCx1Q0FBQUE7QUFDRiJ9