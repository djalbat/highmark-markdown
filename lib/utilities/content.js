"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "contentFromMarkdownNodes", {
    enumerable: true,
    get: function() {
        return contentFromMarkdownNodes;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _tokenTypes = require("../tokenTypes");
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last;
function contentFromMarkdownNodes(markdownNodes, context, leftTrimmed, rightTrimmed) {
    var content = _constants.EMPTY_STRING;
    var tokens = context.tokens;
    var markdownNodesLength = markdownNodes.length, firstMarkdownNode = first(markdownNodes), lastMarkdownNode = markdownNodesLength === 1 ? firstMarkdownNode : last(markdownNodes), firstSignificantToken = firstMarkdownNode.getFirstSignificantToken(), lastSignificantToken = lastMarkdownNode.getLastSignificantToken(), firstSignificantTokenIndex = tokens.indexOf(firstSignificantToken), lastSignificantTokenIndex = tokens.indexOf(lastSignificantToken);
    var firstTokenIndex = firstSignificantTokenIndex, lastTokenIndex = lastSignificantTokenIndex; ///
    if (!leftTrimmed) {
        var previousTokenIndex = firstTokenIndex - 1;
        if (previousTokenIndex > -1) {
            var previousToken = tokens[previousTokenIndex], previousTokenSignificant = previousToken.isSignificant();
            if (!previousTokenSignificant) {
                firstTokenIndex--;
            }
        }
    }
    if (!rightTrimmed) {
        var tokensLength = tokens.length, nextTokenIndex = lastTokenIndex + 1;
        if (nextTokenIndex < tokensLength) {
            var nextToken = tokens[nextTokenIndex], nextTokenSignificant = nextToken.isSignificant(), nextTokenEndOfLineToken = nextToken.isEndOfLineToken();
            if (nextTokenEndOfLineToken || !nextTokenSignificant) {
                lastTokenIndex++;
            }
        }
    }
    var start = firstTokenIndex, end = lastTokenIndex + 1;
    tokens = tokens.slice(start, end);
    tokens.forEach(function(token) {
        var tokenContent = tokenContentFromToken(token);
        content += tokenContent;
    });
    return content;
}
function tokenContentFromToken(token) {
    var tokenContent = token.getContent();
    var type = token.getType();
    if (type === _tokenTypes.ESCAPED_TOKEN_TYPE) {
        var start = 1;
        tokenContent = tokenContent.substring(start);
    }
    return tokenContent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY29udGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEVTQ0FQRURfVE9LRU5fVFlQRSB9IGZyb20gXCIuLi90b2tlblR5cGVzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGxhc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gY29udGVudEZyb21NYXJrZG93bk5vZGVzKG1hcmtkb3duTm9kZXMsIGNvbnRleHQsIGxlZnRUcmltbWVkLCByaWdodFRyaW1tZWQpIHtcbiAgbGV0IGNvbnRlbnQgPSBFTVBUWV9TVFJJTkc7XG5cbiAgbGV0IHsgdG9rZW5zIH0gPSBjb250ZXh0O1xuXG4gIGNvbnN0IG1hcmtkb3duTm9kZXNMZW5ndGggPSBtYXJrZG93bk5vZGVzLmxlbmd0aCxcbiAgICAgICAgZmlyc3RNYXJrZG93bk5vZGUgPSBmaXJzdChtYXJrZG93bk5vZGVzKSxcbiAgICAgICAgbGFzdE1hcmtkb3duTm9kZSA9IChtYXJrZG93bk5vZGVzTGVuZ3RoID09PSAxKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RNYXJrZG93bk5vZGUgOiAvLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QobWFya2Rvd25Ob2RlcyksXG4gICAgICAgIGZpcnN0U2lnbmlmaWNhbnRUb2tlbiA9IGZpcnN0TWFya2Rvd25Ob2RlLmdldEZpcnN0U2lnbmlmaWNhbnRUb2tlbigpLFxuICAgICAgICBsYXN0U2lnbmlmaWNhbnRUb2tlbiA9IGxhc3RNYXJrZG93bk5vZGUuZ2V0TGFzdFNpZ25pZmljYW50VG9rZW4oKSxcbiAgICAgICAgZmlyc3RTaWduaWZpY2FudFRva2VuSW5kZXggPSB0b2tlbnMuaW5kZXhPZihmaXJzdFNpZ25pZmljYW50VG9rZW4pLFxuICAgICAgICBsYXN0U2lnbmlmaWNhbnRUb2tlbkluZGV4ID0gdG9rZW5zLmluZGV4T2YobGFzdFNpZ25pZmljYW50VG9rZW4pO1xuXG4gIGxldCBmaXJzdFRva2VuSW5kZXggPSBmaXJzdFNpZ25pZmljYW50VG9rZW5JbmRleCwgIC8vL1xuICAgICAgbGFzdFRva2VuSW5kZXggPSBsYXN0U2lnbmlmaWNhbnRUb2tlbkluZGV4OyAvLy9cblxuICBpZiAoIWxlZnRUcmltbWVkKSB7XG4gICAgY29uc3QgcHJldmlvdXNUb2tlbkluZGV4ID0gZmlyc3RUb2tlbkluZGV4IC0gMTtcblxuICAgIGlmIChwcmV2aW91c1Rva2VuSW5kZXggPiAtMSkge1xuICAgICAgY29uc3QgcHJldmlvdXNUb2tlbiA9IHRva2Vuc1twcmV2aW91c1Rva2VuSW5kZXhdLFxuICAgICAgICAgICAgcHJldmlvdXNUb2tlblNpZ25pZmljYW50ID0gcHJldmlvdXNUb2tlbi5pc1NpZ25pZmljYW50KCk7XG5cbiAgICAgIGlmICghcHJldmlvdXNUb2tlblNpZ25pZmljYW50KSB7XG4gICAgICAgIGZpcnN0VG9rZW5JbmRleC0tO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghcmlnaHRUcmltbWVkKSB7XG4gICAgY29uc3QgdG9rZW5zTGVuZ3RoID0gdG9rZW5zLmxlbmd0aCxcbiAgICAgICAgICBuZXh0VG9rZW5JbmRleCA9IGxhc3RUb2tlbkluZGV4ICsgMTtcblxuICAgIGlmIChuZXh0VG9rZW5JbmRleCA8IHRva2Vuc0xlbmd0aCkge1xuICAgICAgY29uc3QgbmV4dFRva2VuID0gdG9rZW5zW25leHRUb2tlbkluZGV4XSxcbiAgICAgICAgICAgIG5leHRUb2tlblNpZ25pZmljYW50ID0gbmV4dFRva2VuLmlzU2lnbmlmaWNhbnQoKSxcbiAgICAgICAgICAgIG5leHRUb2tlbkVuZE9mTGluZVRva2VuID0gbmV4dFRva2VuLmlzRW5kT2ZMaW5lVG9rZW4oKTtcblxuICAgICAgaWYgKG5leHRUb2tlbkVuZE9mTGluZVRva2VuIHx8ICFuZXh0VG9rZW5TaWduaWZpY2FudCkge1xuICAgICAgICBsYXN0VG9rZW5JbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0YXJ0ID0gZmlyc3RUb2tlbkluZGV4LCAgLy8vXG4gICAgICAgIGVuZCA9IGxhc3RUb2tlbkluZGV4ICsgMTtcblxuICB0b2tlbnMgPSB0b2tlbnMuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgdG9rZW5zLmZvckVhY2goKHRva2VuKSA9PiB7XG4gICAgY29uc3QgdG9rZW5Db250ZW50ID0gdG9rZW5Db250ZW50RnJvbVRva2VuKHRva2VuKTtcblxuICAgIGNvbnRlbnQgKz0gdG9rZW5Db250ZW50O1xuICB9KTtcblxuICByZXR1cm4gY29udGVudDtcbn1cblxuZnVuY3Rpb24gdG9rZW5Db250ZW50RnJvbVRva2VuKHRva2VuKSB7XG4gIGxldCB0b2tlbkNvbnRlbnQgPSB0b2tlbi5nZXRDb250ZW50KCk7XG5cbiAgY29uc3QgdHlwZSA9IHRva2VuLmdldFR5cGUoKTtcblxuICBpZiAodHlwZSA9PT0gRVNDQVBFRF9UT0tFTl9UWVBFKSB7XG4gICAgY29uc3Qgc3RhcnQgPSAxO1xuXG4gICAgdG9rZW5Db250ZW50ID0gdG9rZW5Db250ZW50LnN1YnN0cmluZyhzdGFydCk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5Db250ZW50O1xufVxuIl0sIm5hbWVzIjpbImNvbnRlbnRGcm9tTWFya2Rvd25Ob2RlcyIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJsYXN0IiwibWFya2Rvd25Ob2RlcyIsImNvbnRleHQiLCJsZWZ0VHJpbW1lZCIsInJpZ2h0VHJpbW1lZCIsImNvbnRlbnQiLCJFTVBUWV9TVFJJTkciLCJ0b2tlbnMiLCJtYXJrZG93bk5vZGVzTGVuZ3RoIiwibGVuZ3RoIiwiZmlyc3RNYXJrZG93bk5vZGUiLCJsYXN0TWFya2Rvd25Ob2RlIiwiZmlyc3RTaWduaWZpY2FudFRva2VuIiwiZ2V0Rmlyc3RTaWduaWZpY2FudFRva2VuIiwibGFzdFNpZ25pZmljYW50VG9rZW4iLCJnZXRMYXN0U2lnbmlmaWNhbnRUb2tlbiIsImZpcnN0U2lnbmlmaWNhbnRUb2tlbkluZGV4IiwiaW5kZXhPZiIsImxhc3RTaWduaWZpY2FudFRva2VuSW5kZXgiLCJmaXJzdFRva2VuSW5kZXgiLCJsYXN0VG9rZW5JbmRleCIsInByZXZpb3VzVG9rZW5JbmRleCIsInByZXZpb3VzVG9rZW4iLCJwcmV2aW91c1Rva2VuU2lnbmlmaWNhbnQiLCJpc1NpZ25pZmljYW50IiwidG9rZW5zTGVuZ3RoIiwibmV4dFRva2VuSW5kZXgiLCJuZXh0VG9rZW4iLCJuZXh0VG9rZW5TaWduaWZpY2FudCIsIm5leHRUb2tlbkVuZE9mTGluZVRva2VuIiwiaXNFbmRPZkxpbmVUb2tlbiIsInN0YXJ0IiwiZW5kIiwic2xpY2UiLCJmb3JFYWNoIiwidG9rZW4iLCJ0b2tlbkNvbnRlbnQiLCJ0b2tlbkNvbnRlbnRGcm9tVG9rZW4iLCJnZXRDb250ZW50IiwidHlwZSIsImdldFR5cGUiLCJFU0NBUEVEX1RPS0VOX1RZUEUiLCJzdWJzdHJpbmciXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVNnQkE7OztlQUFBQTs7O3lCQVBlO3lCQUVGOzBCQUNNO0FBRW5DLElBQVFDLFFBQWdCQyx5QkFBYyxDQUE5QkQsT0FBT0UsT0FBU0QseUJBQWMsQ0FBdkJDO0FBRVIsU0FBU0gseUJBQXlCSSxhQUFhLEVBQUVDLE9BQU8sRUFBRUMsV0FBVyxFQUFFQyxZQUFZO0lBQ3hGLElBQUlDLFVBQVVDLHVCQUFZO0lBRTFCLElBQUksQUFBRUMsU0FBV0wsUUFBWEs7SUFFTixJQUFNQyxzQkFBc0JQLGNBQWNRLE1BQU0sRUFDMUNDLG9CQUFvQlosTUFBTUcsZ0JBQzFCVSxtQkFBbUIsQUFBQ0gsd0JBQXdCLElBQ3JCRSxvQkFDRVYsS0FBS0MsZ0JBQzlCVyx3QkFBd0JGLGtCQUFrQkcsd0JBQXdCLElBQ2xFQyx1QkFBdUJILGlCQUFpQkksdUJBQXVCLElBQy9EQyw2QkFBNkJULE9BQU9VLE9BQU8sQ0FBQ0wsd0JBQzVDTSw0QkFBNEJYLE9BQU9VLE9BQU8sQ0FBQ0g7SUFFakQsSUFBSUssa0JBQWtCSCw0QkFDbEJJLGlCQUFpQkYsMkJBQTJCLEdBQUc7SUFFbkQsSUFBSSxDQUFDZixhQUFhO1FBQ2hCLElBQU1rQixxQkFBcUJGLGtCQUFrQjtRQUU3QyxJQUFJRSxxQkFBcUIsQ0FBQyxHQUFHO1lBQzNCLElBQU1DLGdCQUFnQmYsTUFBTSxDQUFDYyxtQkFBbUIsRUFDMUNFLDJCQUEyQkQsY0FBY0UsYUFBYTtZQUU1RCxJQUFJLENBQUNELDBCQUEwQjtnQkFDN0JKO1lBQ0Y7UUFDRjtJQUNGO0lBRUEsSUFBSSxDQUFDZixjQUFjO1FBQ2pCLElBQU1xQixlQUFlbEIsT0FBT0UsTUFBTSxFQUM1QmlCLGlCQUFpQk4saUJBQWlCO1FBRXhDLElBQUlNLGlCQUFpQkQsY0FBYztZQUNqQyxJQUFNRSxZQUFZcEIsTUFBTSxDQUFDbUIsZUFBZSxFQUNsQ0UsdUJBQXVCRCxVQUFVSCxhQUFhLElBQzlDSywwQkFBMEJGLFVBQVVHLGdCQUFnQjtZQUUxRCxJQUFJRCwyQkFBMkIsQ0FBQ0Qsc0JBQXNCO2dCQUNwRFI7WUFDRjtRQUNGO0lBQ0Y7SUFFQSxJQUFNVyxRQUFRWixpQkFDUmEsTUFBTVosaUJBQWlCO0lBRTdCYixTQUFTQSxPQUFPMEIsS0FBSyxDQUFDRixPQUFPQztJQUU3QnpCLE9BQU8yQixPQUFPLENBQUMsU0FBQ0M7UUFDZCxJQUFNQyxlQUFlQyxzQkFBc0JGO1FBRTNDOUIsV0FBVytCO0lBQ2I7SUFFQSxPQUFPL0I7QUFDVDtBQUVBLFNBQVNnQyxzQkFBc0JGLEtBQUs7SUFDbEMsSUFBSUMsZUFBZUQsTUFBTUcsVUFBVTtJQUVuQyxJQUFNQyxPQUFPSixNQUFNSyxPQUFPO0lBRTFCLElBQUlELFNBQVNFLDhCQUFrQixFQUFFO1FBQy9CLElBQU1WLFFBQVE7UUFFZEssZUFBZUEsYUFBYU0sU0FBUyxDQUFDWDtJQUN4QztJQUVBLE9BQU9LO0FBQ1QifQ==