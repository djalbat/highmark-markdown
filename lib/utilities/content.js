"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentFromNode: function() {
        return contentFromNode;
    },
    contentFromNodeAndTokens: function() {
        return contentFromNodeAndTokens;
    },
    contentFromNodes: function() {
        return contentFromNodes;
    },
    default: function() {
        return _default;
    },
    remainingContentFromNodeTokensAndOffset: function() {
        return remainingContentFromNodeTokensAndOffset;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _tokenTypes = require("../tokenTypes");
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last;
function contentFromNode(node, context) {
    var content = _constants.EMPTY_STRING;
    var tokens = context.tokens;
    var lastSignificantToken = node.getLastSignificantToken(), firstSignificantToken = node.getFirstSignificantToken(), lastSignificantTokenIndex = tokens.indexOf(lastSignificantToken), firstSignificantTokenIndex = tokens.indexOf(firstSignificantToken);
    var start = firstSignificantTokenIndex, end = lastSignificantTokenIndex + 1;
    tokens = tokens.slice(start, end);
    tokens.forEach(function(token) {
        var tokenContent = tokenContentFromToken(token);
        content += tokenContent;
    });
    return content;
}
function contentFromNodes(nodes, augmentLeft, augmentRight, context) {
    var content = _constants.EMPTY_STRING;
    var tokens = context.tokens;
    var lastNode = last(nodes), firstNode = first(nodes), lastSignificantToken = lastNode.getLastSignificantToken(), firstSignificantToken = firstNode.getFirstSignificantToken(), lastSignificantTokenIndex = tokens.indexOf(lastSignificantToken), firstSignificantTokenIndex = tokens.indexOf(firstSignificantToken);
    var firstTokenIndex = firstSignificantTokenIndex, lastTokenIndex = lastSignificantTokenIndex; ///
    if (augmentLeft) {
        var previousTokenIndex = firstTokenIndex - 1;
        if (previousTokenIndex > -1) {
            var previousToken = tokens[previousTokenIndex], previousTokenSignificant = previousToken.isSignificant();
            if (!previousTokenSignificant) {
                firstTokenIndex--;
            }
        }
    }
    if (augmentRight) {
        var tokensLength = tokens.length, nextTokenIndex = lastTokenIndex + 1;
        if (nextTokenIndex < tokensLength) {
            var nextToken = tokens[nextTokenIndex], nextTokenSignificant = nextToken.isSignificant(), nextTokenEndOfLineToken = nextToken.isEndOfLineToken();
            if (nextTokenEndOfLineToken || !nextTokenSignificant) {
                lastTokenIndex++;
            }
        }
    }
    var start = firstTokenIndex, end = lastTokenIndex + 1;
    tokens = tokens.slice(start, end);
    tokens.forEach(function(token) {
        var tokenContent = tokenContentFromToken(token);
        content += tokenContent;
    });
    return content;
}
function contentFromNodeAndTokens(node, tokens) {
    var offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var content = _constants.EMPTY_STRING;
    var firstSignificantToken = node.getFirstSignificantToken(), lastSignificantToken = node.getLastSignificantToken(), firstToken = firstSignificantToken, lastToken = lastSignificantToken, firstTokenIndex = tokens.indexOf(firstToken) + offset, lastTokenIndex = tokens.indexOf(lastToken);
    for(var index = firstTokenIndex; index <= lastTokenIndex; index++){
        var token = tokens[index], tokenContent = token.getContent();
        content += tokenContent;
    }
    return content;
}
function remainingContentFromNodeTokensAndOffset(node, tokens, offset) {
    var content = contentFromNodeAndTokens(node, tokens, offset), remainingContent = content; ///
    return remainingContent;
}
var _default = {
    contentFromNode: contentFromNode,
    contentFromNodes: contentFromNodes,
    contentFromNodeAndTokens: contentFromNodeAndTokens,
    remainingContentFromNodeTokensAndOffset: remainingContentFromNodeTokensAndOffset
};
function tokenContentFromToken(token) {
    var tokenContent = token.getContent();
    var type = token.getType();
    if (type === _tokenTypes.ESCAPED_TOKEN_TYPE) {
        var start = 1;
        tokenContent = tokenContent.substring(start);
    }
    return tokenContent;
}

//# sourceMappingURL=data:application/json;base64,