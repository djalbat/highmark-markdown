"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentFromMarkdownNodes: function() {
        return contentFromMarkdownNodes;
    },
    contentFromNodeAndTokens: function() {
        return contentFromNodeAndTokens;
    },
    remainingContentFromNodeTokensAndOffset: function() {
        return remainingContentFromNodeTokensAndOffset;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _tokenTypes = require("../tokenTypes");
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last;
function contentFromMarkdownNodes(markdownNodes, context, leftTrimmed, rightTrimmed) {
    var content = _constants.EMPTY_STRING;
    var tokens = context.tokens;
    var markdownNodesLength = markdownNodes.length, firstMarkdownNode = first(markdownNodes), lastMarkdownNode = markdownNodesLength === 1 ? firstMarkdownNode : last(markdownNodes), firstSignificantToken = firstMarkdownNode.getFirstSignificantToken(), lastSignificantToken = lastMarkdownNode.getLastSignificantToken(), firstSignificantTokenIndex = tokens.indexOf(firstSignificantToken), lastSignificantTokenIndex = tokens.indexOf(lastSignificantToken);
    var firstTokenIndex = firstSignificantTokenIndex, lastTokenIndex = lastSignificantTokenIndex; ///
    if (!leftTrimmed) {
        var previousTokenIndex = firstTokenIndex - 1;
        if (previousTokenIndex > -1) {
            var previousToken = tokens[previousTokenIndex], previousTokenSignificant = previousToken.isSignificant();
            if (!previousTokenSignificant) {
                firstTokenIndex--;
            }
        }
    }
    if (!rightTrimmed) {
        var tokensLength = tokens.length, nextTokenIndex = lastTokenIndex + 1;
        if (nextTokenIndex < tokensLength) {
            var nextToken = tokens[nextTokenIndex], nextTokenSignificant = nextToken.isSignificant(), nextTokenEndOfLineToken = nextToken.isEndOfLineToken();
            if (nextTokenEndOfLineToken || !nextTokenSignificant) {
                lastTokenIndex++;
            }
        }
    }
    var start = firstTokenIndex, end = lastTokenIndex + 1;
    tokens = tokens.slice(start, end);
    tokens.forEach(function(token) {
        var tokenContent = tokenContentFromToken(token);
        content += tokenContent;
    });
    return content;
}
function contentFromNodeAndTokens(node, tokens) {
    var offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var firstSignificantToken = node.getFirstSignificantToken(), lastSignificantToken = node.getLastSignificantToken(), firstToken = firstSignificantToken, lastToken = lastSignificantToken, firstTokenIndex = tokens.indexOf(firstToken) + offset, lastTokenIndex = tokens.indexOf(lastToken);
    var content = _constants.EMPTY_STRING;
    for(var index = firstTokenIndex; index <= lastTokenIndex; index++){
        var token = tokens[index], tokenContent = token.getContent();
        content += tokenContent;
    }
    return content;
}
function remainingContentFromNodeTokensAndOffset(node, tokens, offset) {
    var content = contentFromNodeAndTokens(node, tokens, offset), remainingContent = content; ///
    return remainingContent;
}
function tokenContentFromToken(token) {
    var tokenContent = token.getContent();
    var type = token.getType();
    if (type === _tokenTypes.ESCAPED_TOKEN_TYPE) {
        var start = 1;
        tokenContent = tokenContent.substring(start);
    }
    return tokenContent;
}

//# sourceMappingURL=data:application/json;base64,