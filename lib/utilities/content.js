"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentFromNode: function() {
        return contentFromNode;
    },
    contentFromNodeAndTokens: function() {
        return contentFromNodeAndTokens;
    },
    contentFromNodes: function() {
        return contentFromNodes;
    },
    remainingContentFromNodeTokensAndOffset: function() {
        return remainingContentFromNodeTokensAndOffset;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _tokenTypes = require("../tokenTypes");
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last;
function contentFromNode(node, context) {
    var content = _constants.EMPTY_STRING;
    var tokens = context.tokens;
    var firstSignificantTokenIndex = node.getFirstSignificantTokenIndex(tokens), lastSignificantTokenIndex = node.getLastSignificantTokenIndex(tokens), start = firstSignificantTokenIndex, end = lastSignificantTokenIndex + 1;
    tokens = tokens.slice(start, end);
    tokens.forEach(function(token) {
        var tokenContent = tokenContentFromToken(token);
        content += tokenContent;
    });
    return content;
}
function contentFromNodes(nodes, augmentLeft, augmentRight, context) {
    var content = _constants.EMPTY_STRING;
    var tokens = context.tokens;
    var lastNode = last(nodes), firstNode = first(nodes), firstSignificantTokenIndex = firstNode.getFirstSignificantTokenIndex(tokens), lastSignificantTokenIndex = lastNode.getLastSignificantTokenIndex(tokens);
    var firstTokenIndex = firstSignificantTokenIndex, lastTokenIndex = lastSignificantTokenIndex; ///
    if (augmentLeft) {
        var previousTokenIndex = firstTokenIndex - 1;
        if (previousTokenIndex > -1) {
            var previousToken = tokens[previousTokenIndex], previousTokenSignificant = previousToken.isSignificant();
            if (!previousTokenSignificant) {
                firstTokenIndex--;
            }
        }
    }
    if (augmentRight) {
        var tokensLength = tokens.length, nextTokenIndex = lastTokenIndex + 1;
        if (nextTokenIndex < tokensLength) {
            var nextToken = tokens[nextTokenIndex], nextTokenSignificant = nextToken.isSignificant(), nextTokenEndOfLineToken = nextToken.isEndOfLineToken();
            if (nextTokenEndOfLineToken || !nextTokenSignificant) {
                lastTokenIndex++;
            }
        }
    }
    var start = firstTokenIndex, end = lastTokenIndex + 1;
    tokens = tokens.slice(start, end);
    tokens.forEach(function(token) {
        var tokenContent = tokenContentFromToken(token);
        content += tokenContent;
    });
    return content;
}
function contentFromNodeAndTokens(node, tokens) {
    var offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var content = _constants.EMPTY_STRING;
    var firstSignificantTokenIndex = node.getFirstSignificantTokenIndex(tokens);
    var lastSignificantTokenIndex = node.getLastSignificantTokenIndex(tokens);
    firstSignificantTokenIndex += offset;
    for(var index = firstSignificantTokenIndex; index <= lastSignificantTokenIndex; index++){
        var token = tokens[index], tokenContent = token.getContent();
        content += tokenContent;
    }
    return content;
}
function remainingContentFromNodeTokensAndOffset(node, tokens, offset) {
    var content = contentFromNodeAndTokens(node, tokens, offset), remainingContent = content; ///
    return remainingContent;
}
function tokenContentFromToken(token) {
    var tokenContent = token.getContent();
    var type = token.getType();
    if (type === _tokenTypes.ESCAPED_TOKEN_TYPE) {
        var start = 1;
        tokenContent = tokenContent.substring(start);
    }
    return tokenContent;
}

//# sourceMappingURL=data:application/json;base64,