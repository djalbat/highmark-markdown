"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "contentFromMarkdownNodes", {
    enumerable: true,
    get: function() {
        return contentFromMarkdownNodes;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _tokenTypes = require("../tokenTypes");
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last;
function contentFromMarkdownNodes(markdownNodes, context) {
    var trimmed = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var content = _constants.EMPTY_STRING;
    var tokens = context.tokens;
    var markdownNodesLength = markdownNodes.length, firstMarkdownNode = first(markdownNodes), lastMarkdownNode = markdownNodesLength === 1 ? firstMarkdownNode : last(markdownNodes), firstSignificantToken = firstMarkdownNode.getFirstSignificantToken(), lastSignificantToken = lastMarkdownNode.getLastSignificantToken(), firstSignificantTokenIndex = tokens.indexOf(firstSignificantToken), lastSignificantTokenIndex = tokens.indexOf(lastSignificantToken);
    var firstTokenIndex = firstSignificantTokenIndex, lastTokenIndex = lastSignificantTokenIndex; ///
    if (!trimmed) {
        var previousTokenIndex = firstTokenIndex - 1, nextTokenIndex = lastTokenIndex + 1;
        if (previousTokenIndex > -1) {
            var previousToken = tokens[previousTokenIndex], previousTokenSignificant = previousToken.isSignificant();
            if (!previousTokenSignificant) {
                firstTokenIndex--;
            }
        }
        var tokensLength = tokens.length;
        if (nextTokenIndex < tokensLength) {
            var nextToken = tokens[nextTokenIndex], nextTokenSignificant = nextToken.isSignificant();
            if (!nextTokenSignificant) {
                lastTokenIndex++;
            }
        }
    }
    var start = firstTokenIndex, end = lastTokenIndex + 1;
    tokens = tokens.slice(start, end);
    tokens.forEach(function(token) {
        var tokenContent = tokenContentFromToken(token);
        content += tokenContent;
    });
    return content;
}
function tokenContentFromToken(token) {
    var tokenContent = token.getContent();
    var type = token.getType();
    if (type === _tokenTypes.ESCAPED_TOKEN_TYPE) {
        var start = 1;
        tokenContent = tokenContent.substring(start);
    }
    return tokenContent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY29udGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEVTQ0FQRURfVE9LRU5fVFlQRSB9IGZyb20gXCIuLi90b2tlblR5cGVzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGxhc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gY29udGVudEZyb21NYXJrZG93bk5vZGVzKG1hcmtkb3duTm9kZXMsIGNvbnRleHQsIHRyaW1tZWQgPSBmYWxzZSkge1xuICBsZXQgY29udGVudCA9IEVNUFRZX1NUUklORztcblxuICBsZXQgeyB0b2tlbnMgfSA9IGNvbnRleHQ7XG5cbiAgY29uc3QgbWFya2Rvd25Ob2Rlc0xlbmd0aCA9IG1hcmtkb3duTm9kZXMubGVuZ3RoLFxuICAgICAgICBmaXJzdE1hcmtkb3duTm9kZSA9IGZpcnN0KG1hcmtkb3duTm9kZXMpLFxuICAgICAgICBsYXN0TWFya2Rvd25Ob2RlID0gKG1hcmtkb3duTm9kZXNMZW5ndGggPT09IDEpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE1hcmtkb3duTm9kZSA6IC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdChtYXJrZG93bk5vZGVzKSxcbiAgICAgICAgZmlyc3RTaWduaWZpY2FudFRva2VuID0gZmlyc3RNYXJrZG93bk5vZGUuZ2V0Rmlyc3RTaWduaWZpY2FudFRva2VuKCksXG4gICAgICAgIGxhc3RTaWduaWZpY2FudFRva2VuID0gbGFzdE1hcmtkb3duTm9kZS5nZXRMYXN0U2lnbmlmaWNhbnRUb2tlbigpLFxuICAgICAgICBmaXJzdFNpZ25pZmljYW50VG9rZW5JbmRleCA9IHRva2Vucy5pbmRleE9mKGZpcnN0U2lnbmlmaWNhbnRUb2tlbiksXG4gICAgICAgIGxhc3RTaWduaWZpY2FudFRva2VuSW5kZXggPSB0b2tlbnMuaW5kZXhPZihsYXN0U2lnbmlmaWNhbnRUb2tlbik7XG5cbiAgbGV0IGZpcnN0VG9rZW5JbmRleCA9IGZpcnN0U2lnbmlmaWNhbnRUb2tlbkluZGV4LCAgLy8vXG4gICAgICBsYXN0VG9rZW5JbmRleCA9IGxhc3RTaWduaWZpY2FudFRva2VuSW5kZXg7IC8vL1xuXG4gIGlmICghdHJpbW1lZCkge1xuICAgIGNvbnN0IHByZXZpb3VzVG9rZW5JbmRleCA9IGZpcnN0VG9rZW5JbmRleCAtIDEsXG4gICAgICAgICAgbmV4dFRva2VuSW5kZXggPSBsYXN0VG9rZW5JbmRleCArIDE7XG5cbiAgICBpZiAocHJldmlvdXNUb2tlbkluZGV4ID4gLTEpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzVG9rZW4gPSB0b2tlbnNbcHJldmlvdXNUb2tlbkluZGV4XSxcbiAgICAgICAgICAgIHByZXZpb3VzVG9rZW5TaWduaWZpY2FudCA9IHByZXZpb3VzVG9rZW4uaXNTaWduaWZpY2FudCgpO1xuXG4gICAgICBpZiAoIXByZXZpb3VzVG9rZW5TaWduaWZpY2FudCkge1xuICAgICAgICBmaXJzdFRva2VuSW5kZXgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbnNMZW5ndGggPSB0b2tlbnMubGVuZ3RoO1xuXG4gICAgaWYgKG5leHRUb2tlbkluZGV4IDwgdG9rZW5zTGVuZ3RoKSB7XG4gICAgICBjb25zdCBuZXh0VG9rZW4gPSB0b2tlbnNbbmV4dFRva2VuSW5kZXhdLFxuICAgICAgICAgICAgbmV4dFRva2VuU2lnbmlmaWNhbnQgPSBuZXh0VG9rZW4uaXNTaWduaWZpY2FudCgpO1xuXG4gICAgICBpZiAoIW5leHRUb2tlblNpZ25pZmljYW50KSB7XG4gICAgICAgIGxhc3RUb2tlbkluZGV4Kys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3RhcnQgPSBmaXJzdFRva2VuSW5kZXgsICAvLy9cbiAgICAgICAgZW5kID0gbGFzdFRva2VuSW5kZXggKyAxO1xuXG4gIHRva2VucyA9IHRva2Vucy5zbGljZShzdGFydCwgZW5kKTtcblxuICB0b2tlbnMuZm9yRWFjaCgodG9rZW4pID0+IHtcbiAgICBjb25zdCB0b2tlbkNvbnRlbnQgPSB0b2tlbkNvbnRlbnRGcm9tVG9rZW4odG9rZW4pO1xuXG4gICAgY29udGVudCArPSB0b2tlbkNvbnRlbnQ7XG4gIH0pO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiB0b2tlbkNvbnRlbnRGcm9tVG9rZW4odG9rZW4pIHtcbiAgbGV0IHRva2VuQ29udGVudCA9IHRva2VuLmdldENvbnRlbnQoKTtcblxuICBjb25zdCB0eXBlID0gdG9rZW4uZ2V0VHlwZSgpO1xuXG4gIGlmICh0eXBlID09PSBFU0NBUEVEX1RPS0VOX1RZUEUpIHtcbiAgICBjb25zdCBzdGFydCA9IDE7XG5cbiAgICB0b2tlbkNvbnRlbnQgPSB0b2tlbkNvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0KTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbkNvbnRlbnQ7XG59XG4iXSwibmFtZXMiOlsiY29udGVudEZyb21NYXJrZG93bk5vZGVzIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsImxhc3QiLCJtYXJrZG93bk5vZGVzIiwiY29udGV4dCIsInRyaW1tZWQiLCJjb250ZW50IiwiRU1QVFlfU1RSSU5HIiwidG9rZW5zIiwibWFya2Rvd25Ob2Rlc0xlbmd0aCIsImxlbmd0aCIsImZpcnN0TWFya2Rvd25Ob2RlIiwibGFzdE1hcmtkb3duTm9kZSIsImZpcnN0U2lnbmlmaWNhbnRUb2tlbiIsImdldEZpcnN0U2lnbmlmaWNhbnRUb2tlbiIsImxhc3RTaWduaWZpY2FudFRva2VuIiwiZ2V0TGFzdFNpZ25pZmljYW50VG9rZW4iLCJmaXJzdFNpZ25pZmljYW50VG9rZW5JbmRleCIsImluZGV4T2YiLCJsYXN0U2lnbmlmaWNhbnRUb2tlbkluZGV4IiwiZmlyc3RUb2tlbkluZGV4IiwibGFzdFRva2VuSW5kZXgiLCJwcmV2aW91c1Rva2VuSW5kZXgiLCJuZXh0VG9rZW5JbmRleCIsInByZXZpb3VzVG9rZW4iLCJwcmV2aW91c1Rva2VuU2lnbmlmaWNhbnQiLCJpc1NpZ25pZmljYW50IiwidG9rZW5zTGVuZ3RoIiwibmV4dFRva2VuIiwibmV4dFRva2VuU2lnbmlmaWNhbnQiLCJzdGFydCIsImVuZCIsInNsaWNlIiwiZm9yRWFjaCIsInRva2VuIiwidG9rZW5Db250ZW50IiwidG9rZW5Db250ZW50RnJvbVRva2VuIiwiZ2V0Q29udGVudCIsInR5cGUiLCJnZXRUeXBlIiwiRVNDQVBFRF9UT0tFTl9UWVBFIiwic3Vic3RyaW5nIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVNnQkE7OztlQUFBQTs7O3lCQVBlO3lCQUVGOzBCQUNNO0FBRW5DLElBQVFDLFFBQWdCQyx5QkFBYyxDQUE5QkQsT0FBT0UsT0FBU0QseUJBQWMsQ0FBdkJDO0FBRVIsU0FBU0gseUJBQXlCSSxhQUFhLEVBQUVDLE9BQU87UUFBRUMsVUFBQUEsaUVBQVU7SUFDekUsSUFBSUMsVUFBVUMsdUJBQVk7SUFFMUIsSUFBSSxBQUFFQyxTQUFXSixRQUFYSTtJQUVOLElBQU1DLHNCQUFzQk4sY0FBY08sTUFBTSxFQUMxQ0Msb0JBQW9CWCxNQUFNRyxnQkFDMUJTLG1CQUFtQixBQUFDSCx3QkFBd0IsSUFDckJFLG9CQUNFVCxLQUFLQyxnQkFDOUJVLHdCQUF3QkYsa0JBQWtCRyx3QkFBd0IsSUFDbEVDLHVCQUF1QkgsaUJBQWlCSSx1QkFBdUIsSUFDL0RDLDZCQUE2QlQsT0FBT1UsT0FBTyxDQUFDTCx3QkFDNUNNLDRCQUE0QlgsT0FBT1UsT0FBTyxDQUFDSDtJQUVqRCxJQUFJSyxrQkFBa0JILDRCQUNsQkksaUJBQWlCRiwyQkFBMkIsR0FBRztJQUVuRCxJQUFJLENBQUNkLFNBQVM7UUFDWixJQUFNaUIscUJBQXFCRixrQkFBa0IsR0FDdkNHLGlCQUFpQkYsaUJBQWlCO1FBRXhDLElBQUlDLHFCQUFxQixDQUFDLEdBQUc7WUFDM0IsSUFBTUUsZ0JBQWdCaEIsTUFBTSxDQUFDYyxtQkFBbUIsRUFDMUNHLDJCQUEyQkQsY0FBY0UsYUFBYTtZQUU1RCxJQUFJLENBQUNELDBCQUEwQjtnQkFDN0JMO1lBQ0Y7UUFDRjtRQUVBLElBQU1PLGVBQWVuQixPQUFPRSxNQUFNO1FBRWxDLElBQUlhLGlCQUFpQkksY0FBYztZQUNqQyxJQUFNQyxZQUFZcEIsTUFBTSxDQUFDZSxlQUFlLEVBQ2xDTSx1QkFBdUJELFVBQVVGLGFBQWE7WUFFcEQsSUFBSSxDQUFDRyxzQkFBc0I7Z0JBQ3pCUjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLElBQU1TLFFBQVFWLGlCQUNSVyxNQUFNVixpQkFBaUI7SUFFN0JiLFNBQVNBLE9BQU93QixLQUFLLENBQUNGLE9BQU9DO0lBRTdCdkIsT0FBT3lCLE9BQU8sQ0FBQyxTQUFDQztRQUNkLElBQU1DLGVBQWVDLHNCQUFzQkY7UUFFM0M1QixXQUFXNkI7SUFDYjtJQUVBLE9BQU83QjtBQUNUO0FBRUEsU0FBUzhCLHNCQUFzQkYsS0FBSztJQUNsQyxJQUFJQyxlQUFlRCxNQUFNRyxVQUFVO0lBRW5DLElBQU1DLE9BQU9KLE1BQU1LLE9BQU87SUFFMUIsSUFBSUQsU0FBU0UsOEJBQWtCLEVBQUU7UUFDL0IsSUFBTVYsUUFBUTtRQUVkSyxlQUFlQSxhQUFhTSxTQUFTLENBQUNYO0lBQ3hDO0lBRUEsT0FBT0s7QUFDVCJ9