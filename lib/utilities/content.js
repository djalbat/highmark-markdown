"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "contentFromMarkdownNodes", {
    enumerable: true,
    get: function() {
        return contentFromMarkdownNodes;
    }
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _tokenTypes = require("../tokenTypes");
var first = _necessary.arrayUtilities.first, last = _necessary.arrayUtilities.last;
function contentFromMarkdownNodes(markdownNodes, context) {
    var content = _constants.EMPTY_STRING;
    var tokens = context.tokens;
    var markdownNodesLength = markdownNodes.length, firstMarkdownNode = first(markdownNodes), lastMarkdownNode = markdownNodesLength === 1 ? firstMarkdownNode : last(markdownNodes), firstSignificantToken = firstMarkdownNode.getFirstSignificantToken(), lastSignificantToken = lastMarkdownNode.getLastSignificantToken(), firstSignificantTokenIndex = tokens.indexOf(firstSignificantToken), lastSignificantTokenIndex = tokens.indexOf(lastSignificantToken);
    var firstTokenIndex = firstSignificantTokenIndex, lastTokenIndex = lastSignificantTokenIndex; ///
    var previousTokenIndex = firstTokenIndex - 1, nextTokenIndex = lastTokenIndex + 1;
    if (previousTokenIndex > -1) {
        var previousToken = tokens[previousTokenIndex], previousTokenSignificant = previousToken.isSignificant();
        if (!previousTokenSignificant) {
            firstTokenIndex--;
        }
    }
    var tokensLength = tokens.length;
    if (nextTokenIndex < tokensLength) {
        var nextToken = tokens[nextTokenIndex], nextTokenSignificant = nextToken.isSignificant();
        if (!nextTokenSignificant) {
            lastTokenIndex++;
        }
    }
    var start = firstTokenIndex, end = lastTokenIndex + 1;
    tokens = tokens.slice(start, end);
    tokens.forEach(function(token) {
        var tokenContent = tokenContentFromToken(token);
        content += tokenContent;
    });
    return content;
}
function tokenContentFromToken(token) {
    var tokenContent = token.getContent();
    var type = token.getType();
    if (type === _tokenTypes.ESCAPED_TOKEN_TYPE) {
        var start = 1;
        tokenContent = tokenContent.substring(start);
    }
    return tokenContent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY29udGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEVTQ0FQRURfVE9LRU5fVFlQRSB9IGZyb20gXCIuLi90b2tlblR5cGVzXCI7XG5cbmNvbnN0IHsgZmlyc3QsIGxhc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gY29udGVudEZyb21NYXJrZG93bk5vZGVzKG1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgbGV0IGNvbnRlbnQgPSBFTVBUWV9TVFJJTkc7XG5cbiAgbGV0IHsgdG9rZW5zIH0gPSBjb250ZXh0O1xuXG4gIGNvbnN0IG1hcmtkb3duTm9kZXNMZW5ndGggPSBtYXJrZG93bk5vZGVzLmxlbmd0aCxcbiAgICAgICAgZmlyc3RNYXJrZG93bk5vZGUgPSBmaXJzdChtYXJrZG93bk5vZGVzKSxcbiAgICAgICAgbGFzdE1hcmtkb3duTm9kZSA9IChtYXJrZG93bk5vZGVzTGVuZ3RoID09PSAxKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RNYXJrZG93bk5vZGUgOiAvLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QobWFya2Rvd25Ob2RlcyksXG4gICAgICAgIGZpcnN0U2lnbmlmaWNhbnRUb2tlbiA9IGZpcnN0TWFya2Rvd25Ob2RlLmdldEZpcnN0U2lnbmlmaWNhbnRUb2tlbigpLFxuICAgICAgICBsYXN0U2lnbmlmaWNhbnRUb2tlbiA9IGxhc3RNYXJrZG93bk5vZGUuZ2V0TGFzdFNpZ25pZmljYW50VG9rZW4oKSxcbiAgICAgICAgZmlyc3RTaWduaWZpY2FudFRva2VuSW5kZXggPSB0b2tlbnMuaW5kZXhPZihmaXJzdFNpZ25pZmljYW50VG9rZW4pLFxuICAgICAgICBsYXN0U2lnbmlmaWNhbnRUb2tlbkluZGV4ID0gdG9rZW5zLmluZGV4T2YobGFzdFNpZ25pZmljYW50VG9rZW4pO1xuXG4gIGxldCBmaXJzdFRva2VuSW5kZXggPSBmaXJzdFNpZ25pZmljYW50VG9rZW5JbmRleCwgIC8vL1xuICAgICAgbGFzdFRva2VuSW5kZXggPSBsYXN0U2lnbmlmaWNhbnRUb2tlbkluZGV4OyAvLy9cblxuICBjb25zdCBwcmV2aW91c1Rva2VuSW5kZXggPSBmaXJzdFRva2VuSW5kZXggLSAxLFxuICAgICAgICBuZXh0VG9rZW5JbmRleCA9IGxhc3RUb2tlbkluZGV4ICsgMTtcblxuICBpZiAocHJldmlvdXNUb2tlbkluZGV4ID4gLTEpIHtcbiAgICBjb25zdCBwcmV2aW91c1Rva2VuID0gdG9rZW5zW3ByZXZpb3VzVG9rZW5JbmRleF0sXG4gICAgICAgICAgcHJldmlvdXNUb2tlblNpZ25pZmljYW50ID0gcHJldmlvdXNUb2tlbi5pc1NpZ25pZmljYW50KCk7XG5cbiAgICBpZiAoIXByZXZpb3VzVG9rZW5TaWduaWZpY2FudCkge1xuICAgICAgZmlyc3RUb2tlbkluZGV4LS07XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdG9rZW5zTGVuZ3RoID0gdG9rZW5zLmxlbmd0aDtcblxuICBpZiAobmV4dFRva2VuSW5kZXggPCB0b2tlbnNMZW5ndGgpIHtcbiAgICBjb25zdCBuZXh0VG9rZW4gPSB0b2tlbnNbbmV4dFRva2VuSW5kZXhdLFxuICAgICAgICAgIG5leHRUb2tlblNpZ25pZmljYW50ID0gbmV4dFRva2VuLmlzU2lnbmlmaWNhbnQoKTtcblxuICAgIGlmICghbmV4dFRva2VuU2lnbmlmaWNhbnQpIHtcbiAgICAgIGxhc3RUb2tlbkluZGV4Kys7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3RhcnQgPSBmaXJzdFRva2VuSW5kZXgsICAvLy9cbiAgICAgICAgZW5kID0gbGFzdFRva2VuSW5kZXggKyAxO1xuXG4gIHRva2VucyA9IHRva2Vucy5zbGljZShzdGFydCwgZW5kKTtcblxuICB0b2tlbnMuZm9yRWFjaCgodG9rZW4pID0+IHtcbiAgICBjb25zdCB0b2tlbkNvbnRlbnQgPSB0b2tlbkNvbnRlbnRGcm9tVG9rZW4odG9rZW4pO1xuXG4gICAgY29udGVudCArPSB0b2tlbkNvbnRlbnQ7XG4gIH0pO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiB0b2tlbkNvbnRlbnRGcm9tVG9rZW4odG9rZW4pIHtcbiAgbGV0IHRva2VuQ29udGVudCA9IHRva2VuLmdldENvbnRlbnQoKTtcblxuICBjb25zdCB0eXBlID0gdG9rZW4uZ2V0VHlwZSgpO1xuXG4gIGlmICh0eXBlID09PSBFU0NBUEVEX1RPS0VOX1RZUEUpIHtcbiAgICBjb25zdCBzdGFydCA9IDE7XG5cbiAgICB0b2tlbkNvbnRlbnQgPSB0b2tlbkNvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0KTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbkNvbnRlbnQ7XG59XG4iXSwibmFtZXMiOlsiY29udGVudEZyb21NYXJrZG93bk5vZGVzIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsImxhc3QiLCJtYXJrZG93bk5vZGVzIiwiY29udGV4dCIsImNvbnRlbnQiLCJFTVBUWV9TVFJJTkciLCJ0b2tlbnMiLCJtYXJrZG93bk5vZGVzTGVuZ3RoIiwibGVuZ3RoIiwiZmlyc3RNYXJrZG93bk5vZGUiLCJsYXN0TWFya2Rvd25Ob2RlIiwiZmlyc3RTaWduaWZpY2FudFRva2VuIiwiZ2V0Rmlyc3RTaWduaWZpY2FudFRva2VuIiwibGFzdFNpZ25pZmljYW50VG9rZW4iLCJnZXRMYXN0U2lnbmlmaWNhbnRUb2tlbiIsImZpcnN0U2lnbmlmaWNhbnRUb2tlbkluZGV4IiwiaW5kZXhPZiIsImxhc3RTaWduaWZpY2FudFRva2VuSW5kZXgiLCJmaXJzdFRva2VuSW5kZXgiLCJsYXN0VG9rZW5JbmRleCIsInByZXZpb3VzVG9rZW5JbmRleCIsIm5leHRUb2tlbkluZGV4IiwicHJldmlvdXNUb2tlbiIsInByZXZpb3VzVG9rZW5TaWduaWZpY2FudCIsImlzU2lnbmlmaWNhbnQiLCJ0b2tlbnNMZW5ndGgiLCJuZXh0VG9rZW4iLCJuZXh0VG9rZW5TaWduaWZpY2FudCIsInN0YXJ0IiwiZW5kIiwic2xpY2UiLCJmb3JFYWNoIiwidG9rZW4iLCJ0b2tlbkNvbnRlbnQiLCJ0b2tlbkNvbnRlbnRGcm9tVG9rZW4iLCJnZXRDb250ZW50IiwidHlwZSIsImdldFR5cGUiLCJFU0NBUEVEX1RPS0VOX1RZUEUiLCJzdWJzdHJpbmciXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBU2dCQTs7O2VBQUFBOzs7eUJBUGU7eUJBRUY7MEJBQ007QUFFbkMsSUFBUUMsUUFBZ0JDLHlCQUFjLENBQTlCRCxPQUFPRSxPQUFTRCx5QkFBYyxDQUF2QkM7QUFFUixTQUFTSCx5QkFBeUJJLGFBQWEsRUFBRUMsT0FBTztJQUM3RCxJQUFJQyxVQUFVQyx1QkFBWTtJQUUxQixJQUFJLEFBQUVDLFNBQVdILFFBQVhHO0lBRU4sSUFBTUMsc0JBQXNCTCxjQUFjTSxNQUFNLEVBQzFDQyxvQkFBb0JWLE1BQU1HLGdCQUMxQlEsbUJBQW1CLEFBQUNILHdCQUF3QixJQUNyQkUsb0JBQ0VSLEtBQUtDLGdCQUM5QlMsd0JBQXdCRixrQkFBa0JHLHdCQUF3QixJQUNsRUMsdUJBQXVCSCxpQkFBaUJJLHVCQUF1QixJQUMvREMsNkJBQTZCVCxPQUFPVSxPQUFPLENBQUNMLHdCQUM1Q00sNEJBQTRCWCxPQUFPVSxPQUFPLENBQUNIO0lBRWpELElBQUlLLGtCQUFrQkgsNEJBQ2xCSSxpQkFBaUJGLDJCQUEyQixHQUFHO0lBRW5ELElBQU1HLHFCQUFxQkYsa0JBQWtCLEdBQ3ZDRyxpQkFBaUJGLGlCQUFpQjtJQUV4QyxJQUFJQyxxQkFBcUIsQ0FBQyxHQUFHO1FBQzNCLElBQU1FLGdCQUFnQmhCLE1BQU0sQ0FBQ2MsbUJBQW1CLEVBQzFDRywyQkFBMkJELGNBQWNFLGFBQWE7UUFFNUQsSUFBSSxDQUFDRCwwQkFBMEI7WUFDN0JMO1FBQ0Y7SUFDRjtJQUVBLElBQU1PLGVBQWVuQixPQUFPRSxNQUFNO0lBRWxDLElBQUlhLGlCQUFpQkksY0FBYztRQUNqQyxJQUFNQyxZQUFZcEIsTUFBTSxDQUFDZSxlQUFlLEVBQ2xDTSx1QkFBdUJELFVBQVVGLGFBQWE7UUFFcEQsSUFBSSxDQUFDRyxzQkFBc0I7WUFDekJSO1FBQ0Y7SUFDRjtJQUVBLElBQU1TLFFBQVFWLGlCQUNSVyxNQUFNVixpQkFBaUI7SUFFN0JiLFNBQVNBLE9BQU93QixLQUFLLENBQUNGLE9BQU9DO0lBRTdCdkIsT0FBT3lCLE9BQU8sQ0FBQyxTQUFDQztRQUNkLElBQU1DLGVBQWVDLHNCQUFzQkY7UUFFM0M1QixXQUFXNkI7SUFDYjtJQUVBLE9BQU83QjtBQUNUO0FBRUEsU0FBUzhCLHNCQUFzQkYsS0FBSztJQUNsQyxJQUFJQyxlQUFlRCxNQUFNRyxVQUFVO0lBRW5DLElBQU1DLE9BQU9KLE1BQU1LLE9BQU87SUFFMUIsSUFBSUQsU0FBU0UsOEJBQWtCLEVBQUU7UUFDL0IsSUFBTVYsUUFBUTtRQUVkSyxlQUFlQSxhQUFhTSxTQUFTLENBQUNYO0lBQ3hDO0lBRUEsT0FBT0s7QUFDVCJ9