"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    postprocess: function() {
        return postprocess;
    }
});
var _necessary = require("necessary");
var clear = _necessary.arrayUtilities.clear, first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push;
function postprocess(divisionMarkdownNode, context) {
    var divisionMarkdownNodes = [
        divisionMarkdownNode
    ];
    resolveIncludes(divisionMarkdownNodes, context);
    resolveEmbeddings(divisionMarkdownNodes, context);
    paginateAndFootnotes(divisionMarkdownNodes, context);
    createContents(divisionMarkdownNodes, context);
    return divisionMarkdownNodes;
}
function createContents(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var contentsCreated = divisionMarkdownNode.createContents(divisionMarkdownNodes, context);
        if (contentsCreated) {
            return true;
        }
    });
}
function resolveIncludes(divisionMarkdownNodes, context) {
    var firstDivisionMarkdownNode = first(divisionMarkdownNodes), divisionMarkdownNode = firstDivisionMarkdownNode; ///
    Object.assign(context, {
        divisionMarkdownNodes: divisionMarkdownNodes
    });
    divisionMarkdownNode.resolveIncludes(context);
    delete context.divisionMarkdownNodes;
    return divisionMarkdownNodes;
}
function resolveEmbeddings(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.resolveEmbeddings(context);
    });
}
function paginateAndFootnotes(divisionMarkdownNodes, context) {
    var _context_linesPerPage = context.linesPerPage, linesPerPage = _context_linesPerPage === void 0 ? null : _context_linesPerPage;
    var footnoteNumberMap = {};
    Object.assign(context, {
        footnoteNumberMap: footnoteNumberMap
    });
    var pageNumber = 1;
    if (linesPerPage === null) {
        divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
            var footnoteReplacements = divisionMarkdownNode.prepareFootnotes(context);
            divisionMarkdownNode.setPageNumber(pageNumber);
            divisionMarkdownNode.createFootnotes(footnoteReplacements, context);
            pageNumber++;
        });
    } else {
        var paginatedDivisionMarkdownNodes = [];
        divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
            var footnoteReplacements = divisionMarkdownNode.prepareFootnotes(context), _$divisionMarkdownNodes = divisionMarkdownNode.paginate(context);
            _$divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
                divisionMarkdownNode.setPageNumber(pageNumber);
                divisionMarkdownNode.createFootnotes(footnoteReplacements, context);
                pageNumber++;
            });
            push(paginatedDivisionMarkdownNodes, _$divisionMarkdownNodes);
        });
        clear(divisionMarkdownNodes);
        push(divisionMarkdownNodes, paginatedDivisionMarkdownNodes);
    }
    delete context.footnoteNumberMap;
}
var _default = {
    postprocess: postprocess
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWFya2Rvd24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5jb25zdCB7IGNsZWFyLCBmaXJzdCwgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgY29udGV4dCkge1xuICBjb25zdCBkaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBbXG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGVcbiAgXTtcblxuICByZXNvbHZlSW5jbHVkZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICByZXNvbHZlRW1iZWRkaW5ncyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIHBhZ2luYXRlQW5kRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICByZXR1cm4gZGl2aXNpb25NYXJrZG93bk5vZGVzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250ZW50cyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLnNvbWUoKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3QgY29udGVudHNDcmVhdGVkID0gZGl2aXNpb25NYXJrZG93bk5vZGUuY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICAgIGlmIChjb250ZW50c0NyZWF0ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmNsdWRlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgY29uc3QgZmlyc3REaXZpc2lvbk1hcmtkb3duTm9kZSA9IGZpcnN0KGRpdmlzaW9uTWFya2Rvd25Ob2RlcyksXG4gICAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlID0gZmlyc3REaXZpc2lvbk1hcmtkb3duTm9kZTsgLy8vXG5cbiAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGVzXG4gIH0pO1xuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVJbmNsdWRlcyhjb250ZXh0KTtcblxuICBkZWxldGUgY29udGV4dC5kaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUVtYmVkZGluZ3MoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVFbWJlZGRpbmdzKGNvbnRleHQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFnaW5hdGVBbmRGb290bm90ZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgbGluZXNQZXJQYWdlID0gbnVsbCB9ID0gY29udGV4dDtcblxuICBjb25zdCBmb290bm90ZU51bWJlck1hcCA9IHt9O1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIGZvb3Rub3RlTnVtYmVyTWFwXG4gIH0pO1xuXG4gIGxldCBwYWdlTnVtYmVyID0gMTtcblxuICBpZiAobGluZXNQZXJQYWdlID09PSBudWxsKSB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgICBjb25zdCBmb290bm90ZVJlcGxhY2VtZW50cyA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLnByZXBhcmVGb290bm90ZXMoY29udGV4dCk7XG5cbiAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnNldFBhZ2VOdW1iZXIocGFnZU51bWJlcik7XG5cbiAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUZvb3Rub3Rlcyhmb290bm90ZVJlcGxhY2VtZW50cywgY29udGV4dCk7XG5cbiAgICAgIHBhZ2VOdW1iZXIrKztcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBbXTtcblxuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgICAgY29uc3QgZm9vdG5vdGVSZXBsYWNlbWVudHMgPSBkaXZpc2lvbk1hcmtkb3duTm9kZS5wcmVwYXJlRm9vdG5vdGVzKGNvbnRleHQpLFxuICAgICAgICAgICAgZGl2aXNpb25NYXJrZG93bk5vZGVzID0gZGl2aXNpb25NYXJrZG93bk5vZGUucGFnaW5hdGUoY29udGV4dCk7XG5cbiAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgICAgICBkaXZpc2lvbk1hcmtkb3duTm9kZS5zZXRQYWdlTnVtYmVyKHBhZ2VOdW1iZXIpO1xuXG4gICAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUZvb3Rub3Rlcyhmb290bm90ZVJlcGxhY2VtZW50cywgY29udGV4dCk7XG5cbiAgICAgICAgcGFnZU51bWJlcisrO1xuICAgICAgfSk7XG5cbiAgICAgIHB1c2gocGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGVzLCBkaXZpc2lvbk1hcmtkb3duTm9kZXMpO1xuICAgIH0pO1xuXG4gICAgY2xlYXIoZGl2aXNpb25NYXJrZG93bk5vZGVzKTtcblxuICAgIHB1c2goZGl2aXNpb25NYXJrZG93bk5vZGVzLCBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMpO1xuICB9XG5cbiAgZGVsZXRlIGNvbnRleHQuZm9vdG5vdGVOdW1iZXJNYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcG9zdHByb2Nlc3Ncbn07XG4iXSwibmFtZXMiOlsicG9zdHByb2Nlc3MiLCJjbGVhciIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJwdXNoIiwiZGl2aXNpb25NYXJrZG93bk5vZGUiLCJjb250ZXh0IiwiZGl2aXNpb25NYXJrZG93bk5vZGVzIiwicmVzb2x2ZUluY2x1ZGVzIiwicmVzb2x2ZUVtYmVkZGluZ3MiLCJwYWdpbmF0ZUFuZEZvb3Rub3RlcyIsImNyZWF0ZUNvbnRlbnRzIiwic29tZSIsImNvbnRlbnRzQ3JlYXRlZCIsImZpcnN0RGl2aXNpb25NYXJrZG93bk5vZGUiLCJPYmplY3QiLCJhc3NpZ24iLCJmb3JFYWNoIiwibGluZXNQZXJQYWdlIiwiZm9vdG5vdGVOdW1iZXJNYXAiLCJwYWdlTnVtYmVyIiwiZm9vdG5vdGVSZXBsYWNlbWVudHMiLCJwcmVwYXJlRm9vdG5vdGVzIiwic2V0UGFnZU51bWJlciIsImNyZWF0ZUZvb3Rub3RlcyIsInBhZ2luYXRlZERpdmlzaW9uTWFya2Rvd25Ob2RlcyIsInBhZ2luYXRlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBb0dBLE9BRUU7ZUFGRjs7SUE5RmdCQSxXQUFXO2VBQVhBOzs7eUJBSmU7QUFFL0IsSUFBUUMsUUFBdUJDLHlCQUFjLENBQXJDRCxPQUFPRSxRQUFnQkQseUJBQWMsQ0FBOUJDLE9BQU9DLE9BQVNGLHlCQUFjLENBQXZCRTtBQUVmLFNBQVNKLFlBQVlLLG9CQUFvQixFQUFFQyxPQUFPO0lBQ3ZELElBQU1DLHdCQUF3QjtRQUM1QkY7S0FDRDtJQUVERyxnQkFBZ0JELHVCQUF1QkQ7SUFFdkNHLGtCQUFrQkYsdUJBQXVCRDtJQUV6Q0kscUJBQXFCSCx1QkFBdUJEO0lBRTVDSyxlQUFlSix1QkFBdUJEO0lBRXRDLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTSSxlQUFlSixxQkFBcUIsRUFBRUQsT0FBTztJQUNwREMsc0JBQXNCSyxJQUFJLENBQUMsU0FBQ1A7UUFDMUIsSUFBTVEsa0JBQWtCUixxQkFBcUJNLGNBQWMsQ0FBQ0osdUJBQXVCRDtRQUVuRixJQUFJTyxpQkFBaUI7WUFDbkIsT0FBTztRQUNUO0lBQ0Y7QUFDRjtBQUVBLFNBQVNMLGdCQUFnQkQscUJBQXFCLEVBQUVELE9BQU87SUFDckQsSUFBTVEsNEJBQTRCWCxNQUFNSSx3QkFDbENGLHVCQUF1QlMsMkJBQTJCLEdBQUc7SUFFM0RDLE9BQU9DLE1BQU0sQ0FBQ1YsU0FBUztRQUNyQkMsdUJBQUFBO0lBQ0Y7SUFFQUYscUJBQXFCRyxlQUFlLENBQUNGO0lBRXJDLE9BQU9BLFFBQVFDLHFCQUFxQjtJQUVwQyxPQUFPQTtBQUNUO0FBRUEsU0FBU0Usa0JBQWtCRixxQkFBcUIsRUFBRUQsT0FBTztJQUN2REMsc0JBQXNCVSxPQUFPLENBQUMsU0FBQ1o7UUFDN0JBLHFCQUFxQkksaUJBQWlCLENBQUNIO0lBQ3pDO0FBQ0Y7QUFFQSxTQUFTSSxxQkFBcUJILHFCQUFxQixFQUFFRCxPQUFPO0lBQzFELDRCQUFnQ0EsUUFBeEJZLGNBQUFBLGtEQUFlO0lBRXZCLElBQU1DLG9CQUFvQixDQUFDO0lBRTNCSixPQUFPQyxNQUFNLENBQUNWLFNBQVM7UUFDckJhLG1CQUFBQTtJQUNGO0lBRUEsSUFBSUMsYUFBYTtJQUVqQixJQUFJRixpQkFBaUIsTUFBTTtRQUN6Qlgsc0JBQXNCVSxPQUFPLENBQUMsU0FBQ1o7WUFDN0IsSUFBTWdCLHVCQUF1QmhCLHFCQUFxQmlCLGdCQUFnQixDQUFDaEI7WUFFbkVELHFCQUFxQmtCLGFBQWEsQ0FBQ0g7WUFFbkNmLHFCQUFxQm1CLGVBQWUsQ0FBQ0gsc0JBQXNCZjtZQUUzRGM7UUFDRjtJQUNGLE9BQU87UUFDTCxJQUFNSyxpQ0FBaUMsRUFBRTtRQUV6Q2xCLHNCQUFzQlUsT0FBTyxDQUFDLFNBQUNaO1lBQzdCLElBQU1nQix1QkFBdUJoQixxQkFBcUJpQixnQkFBZ0IsQ0FBQ2hCLFVBQzdEQywwQkFBd0JGLHFCQUFxQnFCLFFBQVEsQ0FBQ3BCO1lBRTVEQyx3QkFBc0JVLE9BQU8sQ0FBQyxTQUFDWjtnQkFDN0JBLHFCQUFxQmtCLGFBQWEsQ0FBQ0g7Z0JBRW5DZixxQkFBcUJtQixlQUFlLENBQUNILHNCQUFzQmY7Z0JBRTNEYztZQUNGO1lBRUFoQixLQUFLcUIsZ0NBQWdDbEI7UUFDdkM7UUFFQU4sTUFBTU07UUFFTkgsS0FBS0csdUJBQXVCa0I7SUFDOUI7SUFFQSxPQUFPbkIsUUFBUWEsaUJBQWlCO0FBQ2xDO0lBRUEsV0FBZTtJQUNibkIsYUFBQUE7QUFDRiJ9