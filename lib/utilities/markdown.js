"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    divisionMarkdownNodeFromNode: function() {
        return divisionMarkdownNodeFromNode;
    },
    divisionMarkdownNodesFromNode: function() {
        return divisionMarkdownNodesFromNode;
    },
    embedDirectiveMarkdownNodesFromNode: function() {
        return embedDirectiveMarkdownNodesFromNode;
    },
    ignoreDirectiveMarkdownNodeFromNode: function() {
        return ignoreDirectiveMarkdownNodeFromNode;
    },
    includeDirectiveMarkdownNodesFromNode: function() {
        return includeDirectiveMarkdownNodesFromNode;
    },
    subDivisionMarkdownNodeFromNode: function() {
        return subDivisionMarkdownNodeFromNode;
    },
    subDivisionMarkdownNodesFromNode: function() {
        return subDivisionMarkdownNodesFromNode;
    }
});
var _occamquery = require("occam-query");
var _query = require("../utilities/query");
var divisionMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/markdown/division"), subDivisionMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/division/subDivision"), ignoreDirectiveMarkdownNodeQuery = _occamquery.Query.fromExpressionString("/division/subDivision/directives/ignoreDirective"), divisionMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/markdown/division"), subDivisionMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/division/subDivision"), embedDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/subDivision/directives/embedDirective"), includeDirectiveMarkdownNodesQuery = _occamquery.Query.fromExpressionString("/division/subDivision/directives/includeDirective");
function divisionMarkdownNodeFromNode(node) {
    var divisionMarkdownNode = (0, _query.nodeFromNodeAndQuery)(node, divisionMarkdownNodeQuery);
    return divisionMarkdownNode;
}
function subDivisionMarkdownNodeFromNode(node) {
    var subDivisionMarkdownNode = (0, _query.nodeFromNodeAndQuery)(node, subDivisionMarkdownNodeQuery);
    return subDivisionMarkdownNode;
}
function ignoreDirectiveMarkdownNodeFromNode(node) {
    var ignoreDirectiveMarkdownNode = (0, _query.nodeFromNodeAndQuery)(node, ignoreDirectiveMarkdownNodeQuery);
    return ignoreDirectiveMarkdownNode;
}
function divisionMarkdownNodesFromNode(node) {
    var divisionMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, divisionMarkdownNodesQuery, divisionMarkdownNodes);
    return divisionMarkdownNodes;
}
function subDivisionMarkdownNodesFromNode(node) {
    var subDivisionMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, subDivisionMarkdownNodesQuery, subDivisionMarkdownNodes);
    return subDivisionMarkdownNodes;
}
function embedDirectiveMarkdownNodesFromNode(node) {
    var embedDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, embedDirectiveMarkdownNodesQuery, embedDirectiveMarkdownNodes);
    return embedDirectiveMarkdownNodes;
}
function includeDirectiveMarkdownNodesFromNode(node) {
    var includeDirectiveMarkdownNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    (0, _query.nodesFromNodeAndQuery)(node, includeDirectiveMarkdownNodesQuery, includeDirectiveMarkdownNodes);
    return includeDirectiveMarkdownNodes;
}
var _default = {
    divisionMarkdownNodeFromNode: divisionMarkdownNodeFromNode,
    subDivisionMarkdownNodeFromNode: subDivisionMarkdownNodeFromNode,
    ignoreDirectiveMarkdownNodeFromNode: ignoreDirectiveMarkdownNodeFromNode,
    divisionMarkdownNodesFromNode: divisionMarkdownNodesFromNode,
    embedDirectiveMarkdownNodesFromNode: embedDirectiveMarkdownNodesFromNode,
    includeDirectiveMarkdownNodesFromNode: includeDirectiveMarkdownNodesFromNode
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWFya2Rvd24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIm9jY2FtLXF1ZXJ5XCI7XG5cbmltcG9ydCB7IG5vZGVGcm9tTm9kZUFuZFF1ZXJ5LCBub2Rlc0Zyb21Ob2RlQW5kUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGRpdmlzaW9uTWFya2Rvd25Ob2RlUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvblN0cmluZyhcIi9tYXJrZG93bi9kaXZpc2lvblwiKSxcbiAgICAgIHN1YkRpdmlzaW9uTWFya2Rvd25Ob2RlUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvblN0cmluZyhcIi9kaXZpc2lvbi9zdWJEaXZpc2lvblwiKSxcbiAgICAgIGlnbm9yZURpcmVjdGl2ZU1hcmtkb3duTm9kZVF1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvZGl2aXNpb24vc3ViRGl2aXNpb24vZGlyZWN0aXZlcy9pZ25vcmVEaXJlY3RpdmVcIiksXG4gICAgICBkaXZpc2lvbk1hcmtkb3duTm9kZXNRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uU3RyaW5nKFwiL21hcmtkb3duL2RpdmlzaW9uXCIpLFxuICAgICAgc3ViRGl2aXNpb25NYXJrZG93bk5vZGVzUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvblN0cmluZyhcIi9kaXZpc2lvbi9zdWJEaXZpc2lvblwiKSxcbiAgICAgIGVtYmVkRGlyZWN0aXZlTWFya2Rvd25Ob2Rlc1F1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvc3ViRGl2aXNpb24vZGlyZWN0aXZlcy9lbWJlZERpcmVjdGl2ZVwiKSxcbiAgICAgIGluY2x1ZGVEaXJlY3RpdmVNYXJrZG93bk5vZGVzUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvblN0cmluZyhcIi9kaXZpc2lvbi9zdWJEaXZpc2lvbi9kaXJlY3RpdmVzL2luY2x1ZGVEaXJlY3RpdmVcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZpc2lvbk1hcmtkb3duTm9kZUZyb21Ob2RlKG5vZGUpIHtcbiAgY29uc3QgZGl2aXNpb25NYXJrZG93bk5vZGUgPSBub2RlRnJvbU5vZGVBbmRRdWVyeShub2RlLCBkaXZpc2lvbk1hcmtkb3duTm9kZVF1ZXJ5KTtcblxuICByZXR1cm4gZGl2aXNpb25NYXJrZG93bk5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJEaXZpc2lvbk1hcmtkb3duTm9kZUZyb21Ob2RlKG5vZGUpIHtcbiAgY29uc3Qgc3ViRGl2aXNpb25NYXJrZG93bk5vZGUgPSBub2RlRnJvbU5vZGVBbmRRdWVyeShub2RlLCBzdWJEaXZpc2lvbk1hcmtkb3duTm9kZVF1ZXJ5KTtcblxuICByZXR1cm4gc3ViRGl2aXNpb25NYXJrZG93bk5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpZ25vcmVEaXJlY3RpdmVNYXJrZG93bk5vZGVGcm9tTm9kZShub2RlKSB7XG4gIGNvbnN0IGlnbm9yZURpcmVjdGl2ZU1hcmtkb3duTm9kZSA9IG5vZGVGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIGlnbm9yZURpcmVjdGl2ZU1hcmtkb3duTm9kZVF1ZXJ5KTtcblxuICByZXR1cm4gaWdub3JlRGlyZWN0aXZlTWFya2Rvd25Ob2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2aXNpb25NYXJrZG93bk5vZGVzRnJvbU5vZGUobm9kZSwgZGl2aXNpb25NYXJrZG93bk5vZGVzID0gW10pIHtcbiAgbm9kZXNGcm9tTm9kZUFuZFF1ZXJ5KG5vZGUsIGRpdmlzaW9uTWFya2Rvd25Ob2Rlc1F1ZXJ5LCBkaXZpc2lvbk1hcmtkb3duTm9kZXMpO1xuXG4gIHJldHVybiBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJEaXZpc2lvbk1hcmtkb3duTm9kZXNGcm9tTm9kZShub2RlLCBzdWJEaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBbXSkge1xuICBub2Rlc0Zyb21Ob2RlQW5kUXVlcnkobm9kZSwgc3ViRGl2aXNpb25NYXJrZG93bk5vZGVzUXVlcnksIHN1YkRpdmlzaW9uTWFya2Rvd25Ob2Rlcyk7XG5cbiAgcmV0dXJuIHN1YkRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVtYmVkRGlyZWN0aXZlTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlKG5vZGUsIGVtYmVkRGlyZWN0aXZlTWFya2Rvd25Ob2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBlbWJlZERpcmVjdGl2ZU1hcmtkb3duTm9kZXNRdWVyeSwgZW1iZWREaXJlY3RpdmVNYXJrZG93bk5vZGVzKTtcblxuICByZXR1cm4gZW1iZWREaXJlY3RpdmVNYXJrZG93bk5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5jbHVkZURpcmVjdGl2ZU1hcmtkb3duTm9kZXNGcm9tTm9kZShub2RlLCBpbmNsdWRlRGlyZWN0aXZlTWFya2Rvd25Ob2RlcyA9IFtdKSB7XG4gIG5vZGVzRnJvbU5vZGVBbmRRdWVyeShub2RlLCBpbmNsdWRlRGlyZWN0aXZlTWFya2Rvd25Ob2Rlc1F1ZXJ5LCBpbmNsdWRlRGlyZWN0aXZlTWFya2Rvd25Ob2Rlcyk7XG5cbiAgcmV0dXJuIGluY2x1ZGVEaXJlY3RpdmVNYXJrZG93bk5vZGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlRnJvbU5vZGUsXG4gIHN1YkRpdmlzaW9uTWFya2Rvd25Ob2RlRnJvbU5vZGUsXG4gIGlnbm9yZURpcmVjdGl2ZU1hcmtkb3duTm9kZUZyb21Ob2RlLFxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXNGcm9tTm9kZSxcbiAgZW1iZWREaXJlY3RpdmVNYXJrZG93bk5vZGVzRnJvbU5vZGUsXG4gIGluY2x1ZGVEaXJlY3RpdmVNYXJrZG93bk5vZGVzRnJvbU5vZGVcbn07XG4iXSwibmFtZXMiOlsiZGl2aXNpb25NYXJrZG93bk5vZGVGcm9tTm9kZSIsImRpdmlzaW9uTWFya2Rvd25Ob2Rlc0Zyb21Ob2RlIiwiZW1iZWREaXJlY3RpdmVNYXJrZG93bk5vZGVzRnJvbU5vZGUiLCJpZ25vcmVEaXJlY3RpdmVNYXJrZG93bk5vZGVGcm9tTm9kZSIsImluY2x1ZGVEaXJlY3RpdmVNYXJrZG93bk5vZGVzRnJvbU5vZGUiLCJzdWJEaXZpc2lvbk1hcmtkb3duTm9kZUZyb21Ob2RlIiwic3ViRGl2aXNpb25NYXJrZG93bk5vZGVzRnJvbU5vZGUiLCJkaXZpc2lvbk1hcmtkb3duTm9kZVF1ZXJ5IiwiUXVlcnkiLCJmcm9tRXhwcmVzc2lvblN0cmluZyIsInN1YkRpdmlzaW9uTWFya2Rvd25Ob2RlUXVlcnkiLCJpZ25vcmVEaXJlY3RpdmVNYXJrZG93bk5vZGVRdWVyeSIsImRpdmlzaW9uTWFya2Rvd25Ob2Rlc1F1ZXJ5Iiwic3ViRGl2aXNpb25NYXJrZG93bk5vZGVzUXVlcnkiLCJlbWJlZERpcmVjdGl2ZU1hcmtkb3duTm9kZXNRdWVyeSIsImluY2x1ZGVEaXJlY3RpdmVNYXJrZG93bk5vZGVzUXVlcnkiLCJub2RlIiwiZGl2aXNpb25NYXJrZG93bk5vZGUiLCJub2RlRnJvbU5vZGVBbmRRdWVyeSIsInN1YkRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiaWdub3JlRGlyZWN0aXZlTWFya2Rvd25Ob2RlIiwiZGl2aXNpb25NYXJrZG93bk5vZGVzIiwibm9kZXNGcm9tTm9kZUFuZFF1ZXJ5Iiwic3ViRGl2aXNpb25NYXJrZG93bk5vZGVzIiwiZW1iZWREaXJlY3RpdmVNYXJrZG93bk5vZGVzIiwiaW5jbHVkZURpcmVjdGl2ZU1hcmtkb3duTm9kZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXdEQSxPQU9FO2VBUEY7O0lBMUNnQkEsNEJBQTRCO2VBQTVCQTs7SUFrQkFDLDZCQUE2QjtlQUE3QkE7O0lBWUFDLG1DQUFtQztlQUFuQ0E7O0lBbEJBQyxtQ0FBbUM7ZUFBbkNBOztJQXdCQUMscUNBQXFDO2VBQXJDQTs7SUE5QkFDLCtCQUErQjtlQUEvQkE7O0lBa0JBQyxnQ0FBZ0M7ZUFBaENBOzs7MEJBcENNO3FCQUVzQztBQUU1RCxJQUFNQyw0QkFBNEJDLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDLHVCQUN2REMsK0JBQStCRixpQkFBSyxDQUFDQyxvQkFBb0IsQ0FBQywwQkFDMURFLG1DQUFtQ0gsaUJBQUssQ0FBQ0Msb0JBQW9CLENBQUMscURBQzlERyw2QkFBNkJKLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDLHVCQUN4REksZ0NBQWdDTCxpQkFBSyxDQUFDQyxvQkFBb0IsQ0FBQywwQkFDM0RLLG1DQUFtQ04saUJBQUssQ0FBQ0Msb0JBQW9CLENBQUMsMkNBQzlETSxxQ0FBcUNQLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDO0FBRS9ELFNBQVNULDZCQUE2QmdCLElBQUk7SUFDL0MsSUFBTUMsdUJBQXVCQyxJQUFBQSwyQkFBb0IsRUFBQ0YsTUFBTVQ7SUFFeEQsT0FBT1U7QUFDVDtBQUVPLFNBQVNaLGdDQUFnQ1csSUFBSTtJQUNsRCxJQUFNRywwQkFBMEJELElBQUFBLDJCQUFvQixFQUFDRixNQUFNTjtJQUUzRCxPQUFPUztBQUNUO0FBRU8sU0FBU2hCLG9DQUFvQ2EsSUFBSTtJQUN0RCxJQUFNSSw4QkFBOEJGLElBQUFBLDJCQUFvQixFQUFDRixNQUFNTDtJQUUvRCxPQUFPUztBQUNUO0FBRU8sU0FBU25CLDhCQUE4QmUsSUFBSTtRQUFFSyx3QkFBQUEsaUVBQXdCLEVBQUU7SUFDNUVDLElBQUFBLDRCQUFxQixFQUFDTixNQUFNSiw0QkFBNEJTO0lBRXhELE9BQU9BO0FBQ1Q7QUFFTyxTQUFTZixpQ0FBaUNVLElBQUk7UUFBRU8sMkJBQUFBLGlFQUEyQixFQUFFO0lBQ2xGRCxJQUFBQSw0QkFBcUIsRUFBQ04sTUFBTUgsK0JBQStCVTtJQUUzRCxPQUFPQTtBQUNUO0FBRU8sU0FBU3JCLG9DQUFvQ2MsSUFBSTtRQUFFUSw4QkFBQUEsaUVBQThCLEVBQUU7SUFDeEZGLElBQUFBLDRCQUFxQixFQUFDTixNQUFNRixrQ0FBa0NVO0lBRTlELE9BQU9BO0FBQ1Q7QUFFTyxTQUFTcEIsc0NBQXNDWSxJQUFJO1FBQUVTLGdDQUFBQSxpRUFBZ0MsRUFBRTtJQUM1RkgsSUFBQUEsNEJBQXFCLEVBQUNOLE1BQU1ELG9DQUFvQ1U7SUFFaEUsT0FBT0E7QUFDVDtJQUVBLFdBQWU7SUFDYnpCLDhCQUFBQTtJQUNBSyxpQ0FBQUE7SUFDQUYscUNBQUFBO0lBQ0FGLCtCQUFBQTtJQUNBQyxxQ0FBQUE7SUFDQUUsdUNBQUFBO0FBQ0YifQ==