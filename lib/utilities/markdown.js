"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    postprocess: function() {
        return postprocess;
    }
});
var _necessary = require("necessary");
var clear = _necessary.arrayUtilities.clear, push = _necessary.arrayUtilities.push;
function postprocess(divisionMarkdownNode, context) {
    var divisionMarkdownNodes = resolveIncludes(divisionMarkdownNode, context);
    resolveEmbeddings(divisionMarkdownNodes, context);
    paginateAndFootnotes(divisionMarkdownNodes, context);
    createContents(divisionMarkdownNodes, context);
    return divisionMarkdownNodes;
}
function createContents(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var contentsCreated = divisionMarkdownNode.createContents(divisionMarkdownNodes, context);
        if (contentsCreated) {
            return true;
        }
    });
}
function resolveIncludes(divisionMarkdownNode, context) {
    var divisionMarkdownNodes = [
        divisionMarkdownNode
    ];
    Object.assign(context, {
        divisionMarkdownNodes: divisionMarkdownNodes
    });
    divisionMarkdownNode.resolveIncludes(context);
    delete context.divisionMarkdownNodes;
    return divisionMarkdownNodes;
}
function resolveEmbeddings(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.resolveEmbeddings(context);
    });
}
function paginateAndFootnotes(divisionMarkdownNodes, context) {
    var _context_linesPerPage = context.linesPerPage, linesPerPage = _context_linesPerPage === void 0 ? null : _context_linesPerPage;
    var footnoteNumberMap = {};
    Object.assign(context, {
        footnoteNumberMap: footnoteNumberMap
    });
    var pageNumber = 1;
    if (linesPerPage === null) {
        divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
            var footnoteReplacements = divisionMarkdownNode.prepareFootnotes(context);
            divisionMarkdownNode.setPageNumber(pageNumber);
            divisionMarkdownNode.createFootnotes(footnoteReplacements, context);
            pageNumber++;
        });
    } else {
        var paginatedDivisionMarkdownNodes = [];
        divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
            var footnoteReplacements = divisionMarkdownNode.prepareFootnotes(context), _$divisionMarkdownNodes = divisionMarkdownNode.paginate(context);
            _$divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
                divisionMarkdownNode.setPageNumber(pageNumber);
                divisionMarkdownNode.createFootnotes(footnoteReplacements, context);
                pageNumber++;
            });
            push(paginatedDivisionMarkdownNodes, _$divisionMarkdownNodes);
        });
        clear(divisionMarkdownNodes);
        push(divisionMarkdownNodes, paginatedDivisionMarkdownNodes);
    }
    delete context.footnoteNumberMap;
}
var _default = {
    postprocess: postprocess
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWFya2Rvd24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5jb25zdCB7IGNsZWFyLCBwdXNoIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IHJlc29sdmVJbmNsdWRlcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgY29udGV4dCk7XG5cbiAgcmVzb2x2ZUVtYmVkZGluZ3MoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICBwYWdpbmF0ZUFuZEZvb3Rub3RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIGNyZWF0ZUNvbnRlbnRzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5zb21lKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzQ3JlYXRlZCA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUNvbnRlbnRzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgICBpZiAoY29udGVudHNDcmVhdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5jbHVkZXMoZGl2aXNpb25NYXJrZG93bk5vZGUsIGNvbnRleHQpIHtcbiAgY29uc3QgZGl2aXNpb25NYXJrZG93bk5vZGVzID0gW1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlXG4gIF07XG5cbiAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGVzXG4gIH0pO1xuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVJbmNsdWRlcyhjb250ZXh0KTtcblxuICBkZWxldGUgY29udGV4dC5kaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUVtYmVkZGluZ3MoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVFbWJlZGRpbmdzKGNvbnRleHQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFnaW5hdGVBbmRGb290bm90ZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgbGluZXNQZXJQYWdlID0gbnVsbCB9ID0gY29udGV4dDtcblxuICBjb25zdCBmb290bm90ZU51bWJlck1hcCA9IHt9O1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIGZvb3Rub3RlTnVtYmVyTWFwXG4gIH0pO1xuXG4gIGxldCBwYWdlTnVtYmVyID0gMTtcblxuICBpZiAobGluZXNQZXJQYWdlID09PSBudWxsKSB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgICBjb25zdCBmb290bm90ZVJlcGxhY2VtZW50cyA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLnByZXBhcmVGb290bm90ZXMoY29udGV4dCk7XG5cbiAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnNldFBhZ2VOdW1iZXIocGFnZU51bWJlcik7XG5cbiAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUZvb3Rub3Rlcyhmb290bm90ZVJlcGxhY2VtZW50cywgY29udGV4dCk7XG5cbiAgICAgIHBhZ2VOdW1iZXIrKztcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBbXTtcblxuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgICAgY29uc3QgZm9vdG5vdGVSZXBsYWNlbWVudHMgPSBkaXZpc2lvbk1hcmtkb3duTm9kZS5wcmVwYXJlRm9vdG5vdGVzKGNvbnRleHQpLFxuICAgICAgICAgICAgZGl2aXNpb25NYXJrZG93bk5vZGVzID0gZGl2aXNpb25NYXJrZG93bk5vZGUucGFnaW5hdGUoY29udGV4dCk7XG5cbiAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgICAgICBkaXZpc2lvbk1hcmtkb3duTm9kZS5zZXRQYWdlTnVtYmVyKHBhZ2VOdW1iZXIpO1xuXG4gICAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUZvb3Rub3Rlcyhmb290bm90ZVJlcGxhY2VtZW50cywgY29udGV4dCk7XG5cbiAgICAgICAgcGFnZU51bWJlcisrO1xuICAgICAgfSk7XG5cbiAgICAgIHB1c2gocGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGVzLCBkaXZpc2lvbk1hcmtkb3duTm9kZXMpO1xuICAgIH0pO1xuXG4gICAgY2xlYXIoZGl2aXNpb25NYXJrZG93bk5vZGVzKTtcblxuICAgIHB1c2goZGl2aXNpb25NYXJrZG93bk5vZGVzLCBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMpO1xuICB9XG5cbiAgZGVsZXRlIGNvbnRleHQuZm9vdG5vdGVOdW1iZXJNYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcG9zdHByb2Nlc3Ncbn07XG4iXSwibmFtZXMiOlsicG9zdHByb2Nlc3MiLCJjbGVhciIsImFycmF5VXRpbGl0aWVzIiwicHVzaCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiY29udGV4dCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlcyIsInJlc29sdmVJbmNsdWRlcyIsInJlc29sdmVFbWJlZGRpbmdzIiwicGFnaW5hdGVBbmRGb290bm90ZXMiLCJjcmVhdGVDb250ZW50cyIsInNvbWUiLCJjb250ZW50c0NyZWF0ZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJmb3JFYWNoIiwibGluZXNQZXJQYWdlIiwiZm9vdG5vdGVOdW1iZXJNYXAiLCJwYWdlTnVtYmVyIiwiZm9vdG5vdGVSZXBsYWNlbWVudHMiLCJwcmVwYXJlRm9vdG5vdGVzIiwic2V0UGFnZU51bWJlciIsImNyZWF0ZUZvb3Rub3RlcyIsInBhZ2luYXRlZERpdmlzaW9uTWFya2Rvd25Ob2RlcyIsInBhZ2luYXRlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFpR0EsT0FFRTtlQUZGOztJQTNGZ0JBLFdBQVc7ZUFBWEE7Ozt5QkFKZTtBQUUvQixJQUFRQyxRQUFnQkMseUJBQWMsQ0FBOUJELE9BQU9FLE9BQVNELHlCQUFjLENBQXZCQztBQUVSLFNBQVNILFlBQVlJLG9CQUFvQixFQUFFQyxPQUFPO0lBQ3ZELElBQU1DLHdCQUF3QkMsZ0JBQWdCSCxzQkFBc0JDO0lBRXBFRyxrQkFBa0JGLHVCQUF1QkQ7SUFFekNJLHFCQUFxQkgsdUJBQXVCRDtJQUU1Q0ssZUFBZUosdUJBQXVCRDtJQUV0QyxPQUFPQztBQUNUO0FBRUEsU0FBU0ksZUFBZUoscUJBQXFCLEVBQUVELE9BQU87SUFDcERDLHNCQUFzQkssSUFBSSxDQUFDLFNBQUNQO1FBQzFCLElBQU1RLGtCQUFrQlIscUJBQXFCTSxjQUFjLENBQUNKLHVCQUF1QkQ7UUFFbkYsSUFBSU8saUJBQWlCO1lBQ25CLE9BQU87UUFDVDtJQUNGO0FBQ0Y7QUFFQSxTQUFTTCxnQkFBZ0JILG9CQUFvQixFQUFFQyxPQUFPO0lBQ3BELElBQU1DLHdCQUF3QjtRQUM1QkY7S0FDRDtJQUVEUyxPQUFPQyxNQUFNLENBQUNULFNBQVM7UUFDckJDLHVCQUFBQTtJQUNGO0lBRUFGLHFCQUFxQkcsZUFBZSxDQUFDRjtJQUVyQyxPQUFPQSxRQUFRQyxxQkFBcUI7SUFFcEMsT0FBT0E7QUFDVDtBQUVBLFNBQVNFLGtCQUFrQkYscUJBQXFCLEVBQUVELE9BQU87SUFDdkRDLHNCQUFzQlMsT0FBTyxDQUFDLFNBQUNYO1FBQzdCQSxxQkFBcUJJLGlCQUFpQixDQUFDSDtJQUN6QztBQUNGO0FBRUEsU0FBU0kscUJBQXFCSCxxQkFBcUIsRUFBRUQsT0FBTztJQUMxRCw0QkFBZ0NBLFFBQXhCVyxjQUFBQSxrREFBZTtJQUV2QixJQUFNQyxvQkFBb0IsQ0FBQztJQUUzQkosT0FBT0MsTUFBTSxDQUFDVCxTQUFTO1FBQ3JCWSxtQkFBQUE7SUFDRjtJQUVBLElBQUlDLGFBQWE7SUFFakIsSUFBSUYsaUJBQWlCLE1BQU07UUFDekJWLHNCQUFzQlMsT0FBTyxDQUFDLFNBQUNYO1lBQzdCLElBQU1lLHVCQUF1QmYscUJBQXFCZ0IsZ0JBQWdCLENBQUNmO1lBRW5FRCxxQkFBcUJpQixhQUFhLENBQUNIO1lBRW5DZCxxQkFBcUJrQixlQUFlLENBQUNILHNCQUFzQmQ7WUFFM0RhO1FBQ0Y7SUFDRixPQUFPO1FBQ0wsSUFBTUssaUNBQWlDLEVBQUU7UUFFekNqQixzQkFBc0JTLE9BQU8sQ0FBQyxTQUFDWDtZQUM3QixJQUFNZSx1QkFBdUJmLHFCQUFxQmdCLGdCQUFnQixDQUFDZixVQUM3REMsMEJBQXdCRixxQkFBcUJvQixRQUFRLENBQUNuQjtZQUU1REMsd0JBQXNCUyxPQUFPLENBQUMsU0FBQ1g7Z0JBQzdCQSxxQkFBcUJpQixhQUFhLENBQUNIO2dCQUVuQ2QscUJBQXFCa0IsZUFBZSxDQUFDSCxzQkFBc0JkO2dCQUUzRGE7WUFDRjtZQUVBZixLQUFLb0IsZ0NBQWdDakI7UUFDdkM7UUFFQUwsTUFBTUs7UUFFTkgsS0FBS0csdUJBQXVCaUI7SUFDOUI7SUFFQSxPQUFPbEIsUUFBUVksaUJBQWlCO0FBQ2xDO0lBRUEsV0FBZTtJQUNiakIsYUFBQUE7QUFDRiJ9