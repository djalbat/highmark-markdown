"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "postprocess", {
    enumerable: true,
    get: function() {
        return postprocess;
    }
});
var _necessary = require("necessary");
var clear = _necessary.arrayUtilities.clear, first = _necessary.arrayUtilities.first, push = _necessary.arrayUtilities.push;
function postprocess(divisionMarkdownNode, context) {
    var divisionMarkdownNodes = [
        divisionMarkdownNode
    ];
    resolveIncludes(divisionMarkdownNodes, context);
    resolveEmbeddings(divisionMarkdownNodes, context);
    paginateAndFootnotes(divisionMarkdownNodes, context);
    createContents(divisionMarkdownNodes, context);
    return divisionMarkdownNodes;
}
function createContents(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var contentsCreated = divisionMarkdownNode.createContents(context);
        if (contentsCreated) {
            return true;
        }
    });
}
function resolveIncludes(divisionMarkdownNodes, context) {
    var firstDivisionMarkdownNode = first(divisionMarkdownNodes), divisionMarkdownNode = firstDivisionMarkdownNode; ///
    Object.assign(context, {
        divisionMarkdownNodes: divisionMarkdownNodes
    });
    divisionMarkdownNode.resolveIncludes(context);
    delete context.divisionMarkdownNodes;
    return divisionMarkdownNodes;
}
function resolveEmbeddings(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.resolveEmbeddings(context);
    });
}
function paginateAndFootnotes(divisionMarkdownNodes, context) {
    var _context_linesPerPage = context.linesPerPage, linesPerPage = _context_linesPerPage === void 0 ? null : _context_linesPerPage;
    var identifierToFootnoteNumberMap = {};
    Object.assign(context, {
        identifierToFootnoteNumberMap: identifierToFootnoteNumberMap
    });
    if (linesPerPage === null) {
        divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
            var footnoteReplacements = divisionMarkdownNode.prepareFootnotes(context);
            divisionMarkdownNode.createFootnotes(footnoteReplacements, context);
        });
    } else {
        var paginatedDivisionMarkdownNodes = [];
        divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
            var footnoteReplacements = divisionMarkdownNode.prepareFootnotes(context), _$divisionMarkdownNodes = divisionMarkdownNode.paginate(context);
            _$divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
                divisionMarkdownNode.createFootnotes(footnoteReplacements, context);
            });
            push(paginatedDivisionMarkdownNodes, _$divisionMarkdownNodes);
        });
        clear(divisionMarkdownNodes);
        push(divisionMarkdownNodes, paginatedDivisionMarkdownNodes);
    }
    delete context.identifierToFootnoteNumberMap;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWFya2Rvd24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5jb25zdCB7IGNsZWFyLCBmaXJzdCwgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgY29udGV4dCkge1xuICBjb25zdCBkaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBbXG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGVcbiAgXTtcblxuICByZXNvbHZlSW5jbHVkZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICByZXNvbHZlRW1iZWRkaW5ncyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIHBhZ2luYXRlQW5kRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICByZXR1cm4gZGl2aXNpb25NYXJrZG93bk5vZGVzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250ZW50cyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLnNvbWUoKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3QgY29udGVudHNDcmVhdGVkID0gZGl2aXNpb25NYXJrZG93bk5vZGUuY3JlYXRlQ29udGVudHMoY29udGV4dCk7XG5cbiAgICBpZiAoY29udGVudHNDcmVhdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5jbHVkZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGZpcnN0RGl2aXNpb25NYXJrZG93bk5vZGUgPSBmaXJzdChkaXZpc2lvbk1hcmtkb3duTm9kZXMpLFxuICAgICAgICBkaXZpc2lvbk1hcmtkb3duTm9kZSA9IGZpcnN0RGl2aXNpb25NYXJrZG93bk5vZGU7IC8vL1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlc1xuICB9KTtcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZS5yZXNvbHZlSW5jbHVkZXMoY29udGV4dCk7XG5cbiAgZGVsZXRlIGNvbnRleHQuZGl2aXNpb25NYXJrZG93bk5vZGVzO1xuXG4gIHJldHVybiBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVFbWJlZGRpbmdzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCkge1xuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZS5yZXNvbHZlRW1iZWRkaW5ncyhjb250ZXh0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhZ2luYXRlQW5kRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCkge1xuICBjb25zdCB7IGxpbmVzUGVyUGFnZSA9IG51bGwgfSA9IGNvbnRleHQ7XG5cbiAgY29uc3QgaWRlbnRpZmllclRvRm9vdG5vdGVOdW1iZXJNYXAgPSB7fTtcblxuICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICBpZGVudGlmaWVyVG9Gb290bm90ZU51bWJlck1hcFxuICB9KTtcblxuICBpZiAobGluZXNQZXJQYWdlID09PSBudWxsKSB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgICBjb25zdCBmb290bm90ZVJlcGxhY2VtZW50cyA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLnByZXBhcmVGb290bm90ZXMoY29udGV4dCk7XG5cbiAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUZvb3Rub3Rlcyhmb290bm90ZVJlcGxhY2VtZW50cywgY29udGV4dCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGVzID0gW107XG5cbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICAgIGNvbnN0IGZvb3Rub3RlUmVwbGFjZW1lbnRzID0gZGl2aXNpb25NYXJrZG93bk5vZGUucHJlcGFyZUZvb3Rub3Rlcyhjb250ZXh0KSxcbiAgICAgICAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLnBhZ2luYXRlKGNvbnRleHQpO1xuXG4gICAgICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICAgICAgZGl2aXNpb25NYXJrZG93bk5vZGUuY3JlYXRlRm9vdG5vdGVzKGZvb3Rub3RlUmVwbGFjZW1lbnRzLCBjb250ZXh0KTtcbiAgICAgIH0pO1xuXG4gICAgICBwdXNoKHBhZ2luYXRlZERpdmlzaW9uTWFya2Rvd25Ob2RlcywgZGl2aXNpb25NYXJrZG93bk5vZGVzKTtcbiAgICB9KTtcblxuICAgIGNsZWFyKGRpdmlzaW9uTWFya2Rvd25Ob2Rlcyk7XG5cbiAgICBwdXNoKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgcGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGVzKTtcbiAgfVxuXG4gIGRlbGV0ZSBjb250ZXh0LmlkZW50aWZpZXJUb0Zvb3Rub3RlTnVtYmVyTWFwO1xufVxuIl0sIm5hbWVzIjpbInBvc3Rwcm9jZXNzIiwiY2xlYXIiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0IiwicHVzaCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiY29udGV4dCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlcyIsInJlc29sdmVJbmNsdWRlcyIsInJlc29sdmVFbWJlZGRpbmdzIiwicGFnaW5hdGVBbmRGb290bm90ZXMiLCJjcmVhdGVDb250ZW50cyIsInNvbWUiLCJjb250ZW50c0NyZWF0ZWQiLCJmaXJzdERpdmlzaW9uTWFya2Rvd25Ob2RlIiwiT2JqZWN0IiwiYXNzaWduIiwiZm9yRWFjaCIsImxpbmVzUGVyUGFnZSIsImlkZW50aWZpZXJUb0Zvb3Rub3RlTnVtYmVyTWFwIiwiZm9vdG5vdGVSZXBsYWNlbWVudHMiLCJwcmVwYXJlRm9vdG5vdGVzIiwiY3JlYXRlRm9vdG5vdGVzIiwicGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGVzIiwicGFnaW5hdGUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7OytCQU1nQkE7OztlQUFBQTs7O3lCQUplO0FBRS9CLElBQVFDLFFBQXVCQyx5QkFBYyxDQUFyQ0QsT0FBT0UsUUFBZ0JELHlCQUFjLENBQTlCQyxPQUFPQyxPQUFTRix5QkFBYyxDQUF2QkU7QUFFZixTQUFTSixZQUFZSyxvQkFBb0IsRUFBRUMsT0FBTztJQUN2RCxJQUFNQyx3QkFBd0I7UUFDNUJGO0tBQ0Q7SUFFREcsZ0JBQWdCRCx1QkFBdUJEO0lBRXZDRyxrQkFBa0JGLHVCQUF1QkQ7SUFFekNJLHFCQUFxQkgsdUJBQXVCRDtJQUU1Q0ssZUFBZUosdUJBQXVCRDtJQUV0QyxPQUFPQztBQUNUO0FBRUEsU0FBU0ksZUFBZUoscUJBQXFCLEVBQUVELE9BQU87SUFDcERDLHNCQUFzQkssSUFBSSxDQUFDLFNBQUNQO1FBQzFCLElBQU1RLGtCQUFrQlIscUJBQXFCTSxjQUFjLENBQUNMO1FBRTVELElBQUlPLGlCQUFpQjtZQUNuQixPQUFPO1FBQ1Q7SUFDRjtBQUNGO0FBRUEsU0FBU0wsZ0JBQWdCRCxxQkFBcUIsRUFBRUQsT0FBTztJQUNyRCxJQUFNUSw0QkFBNEJYLE1BQU1JLHdCQUNsQ0YsdUJBQXVCUywyQkFBMkIsR0FBRztJQUUzREMsT0FBT0MsTUFBTSxDQUFDVixTQUFTO1FBQ3JCQyx1QkFBQUE7SUFDRjtJQUVBRixxQkFBcUJHLGVBQWUsQ0FBQ0Y7SUFFckMsT0FBT0EsUUFBUUMscUJBQXFCO0lBRXBDLE9BQU9BO0FBQ1Q7QUFFQSxTQUFTRSxrQkFBa0JGLHFCQUFxQixFQUFFRCxPQUFPO0lBQ3ZEQyxzQkFBc0JVLE9BQU8sQ0FBQyxTQUFDWjtRQUM3QkEscUJBQXFCSSxpQkFBaUIsQ0FBQ0g7SUFDekM7QUFDRjtBQUVBLFNBQVNJLHFCQUFxQkgscUJBQXFCLEVBQUVELE9BQU87SUFDMUQsNEJBQWdDQSxRQUF4QlksY0FBQUEsa0RBQWU7SUFFdkIsSUFBTUMsZ0NBQWdDLENBQUM7SUFFdkNKLE9BQU9DLE1BQU0sQ0FBQ1YsU0FBUztRQUNyQmEsK0JBQUFBO0lBQ0Y7SUFFQSxJQUFJRCxpQkFBaUIsTUFBTTtRQUN6Qlgsc0JBQXNCVSxPQUFPLENBQUMsU0FBQ1o7WUFDN0IsSUFBTWUsdUJBQXVCZixxQkFBcUJnQixnQkFBZ0IsQ0FBQ2Y7WUFFbkVELHFCQUFxQmlCLGVBQWUsQ0FBQ0Ysc0JBQXNCZDtRQUM3RDtJQUNGLE9BQU87UUFDTCxJQUFNaUIsaUNBQWlDLEVBQUU7UUFFekNoQixzQkFBc0JVLE9BQU8sQ0FBQyxTQUFDWjtZQUM3QixJQUFNZSx1QkFBdUJmLHFCQUFxQmdCLGdCQUFnQixDQUFDZixVQUM3REMsMEJBQXdCRixxQkFBcUJtQixRQUFRLENBQUNsQjtZQUU1REMsd0JBQXNCVSxPQUFPLENBQUMsU0FBQ1o7Z0JBQzdCQSxxQkFBcUJpQixlQUFlLENBQUNGLHNCQUFzQmQ7WUFDN0Q7WUFFQUYsS0FBS21CLGdDQUFnQ2hCO1FBQ3ZDO1FBRUFOLE1BQU1NO1FBRU5ILEtBQUtHLHVCQUF1QmdCO0lBQzlCO0lBRUEsT0FBT2pCLFFBQVFhLDZCQUE2QjtBQUM5QyJ9