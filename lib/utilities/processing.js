"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    postprocess: function() {
        return postprocess;
    }
});
function postprocess(divisionMarkdownNode, context) {
    var divisionMarkdownNodes;
    divisionMarkdownNodes = resolveIncludes(divisionMarkdownNode, context);
    resolveEmbeddings(divisionMarkdownNodes, context);
    var footnoteMap = prepareFootnotes(divisionMarkdownNodes, context);
    divisionMarkdownNodes = paginate(divisionMarkdownNodes, context);
    // createFootnotes(divisionMarkdownNodes, footnotesMap, context);
    // createContents(divisionMarkdownNodes, context);
    return divisionMarkdownNodes;
}
function paginate(divisionMarkdownNodes, context) {
    var paginatedDivisionMarkdownNodes = [];
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.paginate(paginatedDivisionMarkdownNodes, context);
    });
    // paginatedDivisionMarkdownNodes.forEach((paginatedDivisionMarkdownNode, index) => {
    //   const pageNumber = index + 1;
    //
    //   paginatedDivisionMarkdownNode.setPageNumber(pageNumber);
    // });
    divisionMarkdownNodes = paginatedDivisionMarkdownNodes; ///
    return divisionMarkdownNodes;
}
function createContents(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var contentsCreated = divisionMarkdownNode.createContents(divisionMarkdownNodes, context);
        if (contentsCreated) {
            return true;
        }
    });
}
function createFootnotes(divisionMarkdownNodes, footnotesMap, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.createFootnotes(footnotesMap, context);
    });
}
function resolveIncludes(divisionMarkdownNode, context) {
    var divisionMarkdownNodes = [];
    Object.assign(context, {
        divisionMarkdownNodes: divisionMarkdownNodes
    });
    var divisionMarkdownNodeIgnored = divisionMarkdownNode.isIgnored();
    if (!divisionMarkdownNodeIgnored) {
        divisionMarkdownNodes.push(divisionMarkdownNode);
    }
    divisionMarkdownNode.resolveIncludes(context);
    delete context.divisionMarkdownNodes;
    return divisionMarkdownNodes;
}
function prepareFootnotes(divisionMarkdownNodes, context) {
    var footnoteMap = {};
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.prepareFootnotes(footnoteMap, context);
    });
    return footnoteMap;
}
function resolveEmbeddings(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.resolveEmbeddings(context);
    });
}
var _default = {
    postprocess: postprocess
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcHJvY2Vzc2luZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KSB7XG4gIGxldCBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzID0gcmVzb2x2ZUluY2x1ZGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KTtcblxuICByZXNvbHZlRW1iZWRkaW5ncyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIGNvbnN0IGZvb3Rub3RlTWFwID0gcHJlcGFyZUZvb3Rub3RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IHBhZ2luYXRlKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgLy8gY3JlYXRlRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgZm9vdG5vdGVzTWFwLCBjb250ZXh0KTtcblxuICAvLyBjcmVhdGVDb250ZW50cyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIHJldHVybiBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG59XG5cbmZ1bmN0aW9uIHBhZ2luYXRlKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCkge1xuICBjb25zdCBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBbXTtcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZS5wYWdpbmF0ZShwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuICB9KTtcblxuICAvLyBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgocGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGUsIGluZGV4KSA9PiB7XG4gIC8vICAgY29uc3QgcGFnZU51bWJlciA9IGluZGV4ICsgMTtcbiAgLy9cbiAgLy8gICBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZS5zZXRQYWdlTnVtYmVyKHBhZ2VOdW1iZXIpO1xuICAvLyB9KTtcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXM7IC8vL1xuXG4gIHJldHVybiBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRlbnRzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCkge1xuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuc29tZSgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICBjb25zdCBjb250ZW50c0NyZWF0ZWQgPSBkaXZpc2lvbk1hcmtkb3duTm9kZS5jcmVhdGVDb250ZW50cyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gICAgaWYgKGNvbnRlbnRzQ3JlYXRlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgZm9vdG5vdGVzTWFwLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUZvb3Rub3Rlcyhmb290bm90ZXNNYXAsIGNvbnRleHQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluY2x1ZGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IFtdO1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlc1xuICB9KTtcblxuICBjb25zdCBkaXZpc2lvbk1hcmtkb3duTm9kZUlnbm9yZWQgPSBkaXZpc2lvbk1hcmtkb3duTm9kZS5pc0lnbm9yZWQoKTtcblxuICBpZiAoIWRpdmlzaW9uTWFya2Rvd25Ob2RlSWdub3JlZCkge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5wdXNoKGRpdmlzaW9uTWFya2Rvd25Ob2RlKTtcbiAgfVxuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVJbmNsdWRlcyhjb250ZXh0KTtcblxuICBkZWxldGUgY29udGV4dC5kaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUZvb3Rub3RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgY29uc3QgZm9vdG5vdGVNYXAgPSB7fTtcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZS5wcmVwYXJlRm9vdG5vdGVzKGZvb3Rub3RlTWFwLCBjb250ZXh0KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZvb3Rub3RlTWFwO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRW1iZWRkaW5ncyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGUucmVzb2x2ZUVtYmVkZGluZ3MoY29udGV4dCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHBvc3Rwcm9jZXNzXG59O1xuIl0sIm5hbWVzIjpbInBvc3Rwcm9jZXNzIiwiZGl2aXNpb25NYXJrZG93bk5vZGUiLCJjb250ZXh0IiwiZGl2aXNpb25NYXJrZG93bk5vZGVzIiwicmVzb2x2ZUluY2x1ZGVzIiwicmVzb2x2ZUVtYmVkZGluZ3MiLCJmb290bm90ZU1hcCIsInByZXBhcmVGb290bm90ZXMiLCJwYWdpbmF0ZSIsInBhZ2luYXRlZERpdmlzaW9uTWFya2Rvd25Ob2RlcyIsImZvckVhY2giLCJjcmVhdGVDb250ZW50cyIsInNvbWUiLCJjb250ZW50c0NyZWF0ZWQiLCJjcmVhdGVGb290bm90ZXMiLCJmb290bm90ZXNNYXAiLCJPYmplY3QiLCJhc3NpZ24iLCJkaXZpc2lvbk1hcmtkb3duTm9kZUlnbm9yZWQiLCJpc0lnbm9yZWQiLCJwdXNoIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBMEZBLE9BRUU7ZUFGRjs7SUF4RmdCQSxXQUFXO2VBQVhBOzs7QUFBVCxTQUFTQSxZQUFZQyxvQkFBb0IsRUFBRUMsT0FBTztJQUN2RCxJQUFJQztJQUVKQSx3QkFBd0JDLGdCQUFnQkgsc0JBQXNCQztJQUU5REcsa0JBQWtCRix1QkFBdUJEO0lBRXpDLElBQU1JLGNBQWNDLGlCQUFpQkosdUJBQXVCRDtJQUU1REMsd0JBQXdCSyxTQUFTTCx1QkFBdUJEO0lBRXhELGlFQUFpRTtJQUVqRSxrREFBa0Q7SUFFbEQsT0FBT0M7QUFDVDtBQUVBLFNBQVNLLFNBQVNMLHFCQUFxQixFQUFFRCxPQUFPO0lBQzlDLElBQU1PLGlDQUFpQyxFQUFFO0lBRXpDTixzQkFBc0JPLE9BQU8sQ0FBQyxTQUFDVDtRQUM3QkEscUJBQXFCTyxRQUFRLENBQUNDLGdDQUFnQ1A7SUFDaEU7SUFFQSxxRkFBcUY7SUFDckYsa0NBQWtDO0lBQ2xDLEVBQUU7SUFDRiw2REFBNkQ7SUFDN0QsTUFBTTtJQUVOQyx3QkFBd0JNLGdDQUFnQyxHQUFHO0lBRTNELE9BQU9OO0FBQ1Q7QUFFQSxTQUFTUSxlQUFlUixxQkFBcUIsRUFBRUQsT0FBTztJQUNwREMsc0JBQXNCUyxJQUFJLENBQUMsU0FBQ1g7UUFDMUIsSUFBTVksa0JBQWtCWixxQkFBcUJVLGNBQWMsQ0FBQ1IsdUJBQXVCRDtRQUVuRixJQUFJVyxpQkFBaUI7WUFDbkIsT0FBTztRQUNUO0lBQ0Y7QUFDRjtBQUVBLFNBQVNDLGdCQUFnQlgscUJBQXFCLEVBQUVZLFlBQVksRUFBRWIsT0FBTztJQUNuRUMsc0JBQXNCTyxPQUFPLENBQUMsU0FBQ1Q7UUFDN0JBLHFCQUFxQmEsZUFBZSxDQUFDQyxjQUFjYjtJQUNyRDtBQUNGO0FBRUEsU0FBU0UsZ0JBQWdCSCxvQkFBb0IsRUFBRUMsT0FBTztJQUNwRCxJQUFNQyx3QkFBd0IsRUFBRTtJQUVoQ2EsT0FBT0MsTUFBTSxDQUFDZixTQUFTO1FBQ3JCQyx1QkFBQUE7SUFDRjtJQUVBLElBQU1lLDhCQUE4QmpCLHFCQUFxQmtCLFNBQVM7SUFFbEUsSUFBSSxDQUFDRCw2QkFBNkI7UUFDaENmLHNCQUFzQmlCLElBQUksQ0FBQ25CO0lBQzdCO0lBRUFBLHFCQUFxQkcsZUFBZSxDQUFDRjtJQUVyQyxPQUFPQSxRQUFRQyxxQkFBcUI7SUFFcEMsT0FBT0E7QUFDVDtBQUVBLFNBQVNJLGlCQUFpQkoscUJBQXFCLEVBQUVELE9BQU87SUFDdEQsSUFBTUksY0FBYyxDQUFDO0lBRXJCSCxzQkFBc0JPLE9BQU8sQ0FBQyxTQUFDVDtRQUM3QkEscUJBQXFCTSxnQkFBZ0IsQ0FBQ0QsYUFBYUo7SUFDckQ7SUFFQSxPQUFPSTtBQUNUO0FBRUEsU0FBU0Qsa0JBQWtCRixxQkFBcUIsRUFBRUQsT0FBTztJQUN2REMsc0JBQXNCTyxPQUFPLENBQUMsU0FBQ1Q7UUFDN0JBLHFCQUFxQkksaUJBQWlCLENBQUNIO0lBQ3pDO0FBQ0Y7SUFFQSxXQUFlO0lBQ2JGLGFBQUFBO0FBQ0YifQ==