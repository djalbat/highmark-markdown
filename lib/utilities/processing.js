"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    postprocess: function() {
        return postprocess;
    }
});
function postprocess(divisionMarkdownNode, context) {
    var divisionMarkdownNodes;
    divisionMarkdownNodes = resolveIncludes(divisionMarkdownNode, context);
    resolveEmbeddings(divisionMarkdownNodes, context);
    // divisionMarkdownNodes = paginate(divisionMarkdownNodes, context);
    // createFootnotes(divisionMarkdownNodes, context);
    // createContents(divisionMarkdownNodes, context);
    return divisionMarkdownNodes;
}
function paginate(divisionMarkdownNodes, context) {
    var paginatedDivisionMarkdownNodes = [];
    Object.assign(context, {
        paginatedDivisionMarkdownNodes: paginatedDivisionMarkdownNodes
    });
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.paginate(context);
    });
    paginatedDivisionMarkdownNodes.forEach(function(paginatedDivisionMarkdownNode, index) {
        var pageNumber = index + 1;
        paginatedDivisionMarkdownNode.setPageNumber(pageNumber);
    });
    divisionMarkdownNodes = paginatedDivisionMarkdownNodes; ///
    delete context.paginatedDivisionMarkdownNodes;
    return divisionMarkdownNodes;
}
function createContents(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var contentsCreated = divisionMarkdownNode.createContents(divisionMarkdownNodes, context);
        if (contentsCreated) {
            return true;
        }
    });
}
function createFootnotes(divisionMarkdownNodes, context) {
    var footnoteNumberMap = {};
    Object.assign(context, {
        footnoteNumberMap: footnoteNumberMap
    });
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.createFootnotes(context);
    });
    delete context.footnoteNumberMap;
}
function resolveIncludes(divisionMarkdownNode, context) {
    var divisionMarkdownNodes = [];
    Object.assign(context, {
        divisionMarkdownNodes: divisionMarkdownNodes
    });
    var divisionMarkdownNodeIgnored = divisionMarkdownNode.isIgnored();
    if (!divisionMarkdownNodeIgnored) {
        divisionMarkdownNodes.push(divisionMarkdownNode);
    }
    divisionMarkdownNode.resolveIncludes(context);
    delete context.divisionMarkdownNodes;
    return divisionMarkdownNodes;
}
function resolveEmbeddings(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.resolveEmbeddings(context);
    });
}
var _default = {
    postprocess: postprocess
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcHJvY2Vzc2luZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KSB7XG4gIGxldCBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzID0gcmVzb2x2ZUluY2x1ZGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KTtcblxuICByZXNvbHZlRW1iZWRkaW5ncyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIC8vIGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IHBhZ2luYXRlKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgLy8gY3JlYXRlRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgLy8gY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICByZXR1cm4gZGl2aXNpb25NYXJrZG93bk5vZGVzO1xufVxuXG5mdW5jdGlvbiBwYWdpbmF0ZShkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgY29uc3QgcGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGVzID0gW107XG5cbiAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgcGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGVzXG4gIH0pO1xuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnBhZ2luYXRlKGNvbnRleHQpO1xuICB9KTtcblxuICBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgocGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGUsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcGFnZU51bWJlciA9IGluZGV4ICsgMTtcblxuICAgIHBhZ2luYXRlZERpdmlzaW9uTWFya2Rvd25Ob2RlLnNldFBhZ2VOdW1iZXIocGFnZU51bWJlcik7XG4gIH0pXG5cbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzID0gcGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGVzOyAvLy9cblxuICBkZWxldGUgY29udGV4dC5wYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5zb21lKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzQ3JlYXRlZCA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUNvbnRlbnRzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgICBpZiAoY29udGVudHNDcmVhdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGb290bm90ZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGZvb3Rub3RlTnVtYmVyTWFwID0ge307XG5cbiAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgZm9vdG5vdGVOdW1iZXJNYXBcbiAgfSk7XG5cbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGUuY3JlYXRlRm9vdG5vdGVzKGNvbnRleHQpO1xuICB9KTtcblxuICBkZWxldGUgY29udGV4dC5mb290bm90ZU51bWJlck1hcDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluY2x1ZGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IFtdO1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlc1xuICB9KTtcblxuICBjb25zdCBkaXZpc2lvbk1hcmtkb3duTm9kZUlnbm9yZWQgPSBkaXZpc2lvbk1hcmtkb3duTm9kZS5pc0lnbm9yZWQoKTtcblxuICBpZiAoIWRpdmlzaW9uTWFya2Rvd25Ob2RlSWdub3JlZCkge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5wdXNoKGRpdmlzaW9uTWFya2Rvd25Ob2RlKTtcbiAgfVxuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVJbmNsdWRlcyhjb250ZXh0KTtcblxuICBkZWxldGUgY29udGV4dC5kaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUVtYmVkZGluZ3MoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVFbWJlZGRpbmdzKGNvbnRleHQpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwb3N0cHJvY2Vzc1xufTtcbiJdLCJuYW1lcyI6WyJwb3N0cHJvY2VzcyIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiY29udGV4dCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlcyIsInJlc29sdmVJbmNsdWRlcyIsInJlc29sdmVFbWJlZGRpbmdzIiwicGFnaW5hdGUiLCJwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJmb3JFYWNoIiwicGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGUiLCJpbmRleCIsInBhZ2VOdW1iZXIiLCJzZXRQYWdlTnVtYmVyIiwiY3JlYXRlQ29udGVudHMiLCJzb21lIiwiY29udGVudHNDcmVhdGVkIiwiY3JlYXRlRm9vdG5vdGVzIiwiZm9vdG5vdGVOdW1iZXJNYXAiLCJkaXZpc2lvbk1hcmtkb3duTm9kZUlnbm9yZWQiLCJpc0lnbm9yZWQiLCJwdXNoIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBNEZBLE9BRUU7ZUFGRjs7SUExRmdCQSxXQUFXO2VBQVhBOzs7QUFBVCxTQUFTQSxZQUFZQyxvQkFBb0IsRUFBRUMsT0FBTztJQUN2RCxJQUFJQztJQUVKQSx3QkFBd0JDLGdCQUFnQkgsc0JBQXNCQztJQUU5REcsa0JBQWtCRix1QkFBdUJEO0lBRXpDLG9FQUFvRTtJQUVwRSxtREFBbUQ7SUFFbkQsa0RBQWtEO0lBRWxELE9BQU9DO0FBQ1Q7QUFFQSxTQUFTRyxTQUFTSCxxQkFBcUIsRUFBRUQsT0FBTztJQUM5QyxJQUFNSyxpQ0FBaUMsRUFBRTtJQUV6Q0MsT0FBT0MsTUFBTSxDQUFDUCxTQUFTO1FBQ3JCSyxnQ0FBQUE7SUFDRjtJQUVBSixzQkFBc0JPLE9BQU8sQ0FBQyxTQUFDVDtRQUM3QkEscUJBQXFCSyxRQUFRLENBQUNKO0lBQ2hDO0lBRUFLLCtCQUErQkcsT0FBTyxDQUFDLFNBQUNDLCtCQUErQkM7UUFDckUsSUFBTUMsYUFBYUQsUUFBUTtRQUUzQkQsOEJBQThCRyxhQUFhLENBQUNEO0lBQzlDO0lBRUFWLHdCQUF3QkksZ0NBQWdDLEdBQUc7SUFFM0QsT0FBT0wsUUFBUUssOEJBQThCO0lBRTdDLE9BQU9KO0FBQ1Q7QUFFQSxTQUFTWSxlQUFlWixxQkFBcUIsRUFBRUQsT0FBTztJQUNwREMsc0JBQXNCYSxJQUFJLENBQUMsU0FBQ2Y7UUFDMUIsSUFBTWdCLGtCQUFrQmhCLHFCQUFxQmMsY0FBYyxDQUFDWix1QkFBdUJEO1FBRW5GLElBQUllLGlCQUFpQjtZQUNuQixPQUFPO1FBQ1Q7SUFDRjtBQUNGO0FBRUEsU0FBU0MsZ0JBQWdCZixxQkFBcUIsRUFBRUQsT0FBTztJQUNyRCxJQUFNaUIsb0JBQW9CLENBQUM7SUFFM0JYLE9BQU9DLE1BQU0sQ0FBQ1AsU0FBUztRQUNyQmlCLG1CQUFBQTtJQUNGO0lBRUFoQixzQkFBc0JPLE9BQU8sQ0FBQyxTQUFDVDtRQUM3QkEscUJBQXFCaUIsZUFBZSxDQUFDaEI7SUFDdkM7SUFFQSxPQUFPQSxRQUFRaUIsaUJBQWlCO0FBQ2xDO0FBRUEsU0FBU2YsZ0JBQWdCSCxvQkFBb0IsRUFBRUMsT0FBTztJQUNwRCxJQUFNQyx3QkFBd0IsRUFBRTtJQUVoQ0ssT0FBT0MsTUFBTSxDQUFDUCxTQUFTO1FBQ3JCQyx1QkFBQUE7SUFDRjtJQUVBLElBQU1pQiw4QkFBOEJuQixxQkFBcUJvQixTQUFTO0lBRWxFLElBQUksQ0FBQ0QsNkJBQTZCO1FBQ2hDakIsc0JBQXNCbUIsSUFBSSxDQUFDckI7SUFDN0I7SUFFQUEscUJBQXFCRyxlQUFlLENBQUNGO0lBRXJDLE9BQU9BLFFBQVFDLHFCQUFxQjtJQUVwQyxPQUFPQTtBQUNUO0FBRUEsU0FBU0Usa0JBQWtCRixxQkFBcUIsRUFBRUQsT0FBTztJQUN2REMsc0JBQXNCTyxPQUFPLENBQUMsU0FBQ1Q7UUFDN0JBLHFCQUFxQkksaUJBQWlCLENBQUNIO0lBQ3pDO0FBQ0Y7SUFFQSxXQUFlO0lBQ2JGLGFBQUFBO0FBQ0YifQ==