"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    divisionMarkdownNodesFromMarkdownNodes: function() {
        return divisionMarkdownNodesFromMarkdownNodes;
    },
    postprocess: function() {
        return postprocess;
    }
});
function postprocess(divisionMarkdownNode, context) {
    var divisionMarkdownNodes;
    divisionMarkdownNodes = resolveIncludes(divisionMarkdownNode, context);
    resolveEmbeddings(divisionMarkdownNodes, context);
    var footnoteReplacementMap = prepareFootnotes(divisionMarkdownNodes, context), markdownNodes = paginate(divisionMarkdownNodes, context);
    divisionMarkdownNodes = divisionMarkdownNodesFromMarkdownNodes(markdownNodes); ///
    createFootnotes(divisionMarkdownNodes, footnoteReplacementMap, context);
    createContents(divisionMarkdownNodes, context);
    createIndex(divisionMarkdownNodes, context);
    return markdownNodes;
}
function paginate(divisionMarkdownNodes, context) {
    var markdownNOdes = [];
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.paginate(markdownNOdes, context);
    });
    return markdownNOdes;
}
function createIndex(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var indexCreated = divisionMarkdownNode.createIndex(divisionMarkdownNodes, context);
        if (indexCreated) {
            return true;
        }
    });
}
function createContents(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var contentsCreated = divisionMarkdownNode.createContents(divisionMarkdownNodes, context);
        if (contentsCreated) {
            return true;
        }
    });
}
function createFootnotes(divisionMarkdownNodes, footnoteReplacementMap, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.createFootnotes(footnoteReplacementMap, context);
    });
}
function resolveIncludes(divisionMarkdownNode, context) {
    var divisionMarkdownNodes = [];
    Object.assign(context, {
        divisionMarkdownNodes: divisionMarkdownNodes
    });
    var divisionMarkdownNodeIgnored = divisionMarkdownNode.isIgnored();
    if (!divisionMarkdownNodeIgnored) {
        divisionMarkdownNodes.push(divisionMarkdownNode);
    }
    divisionMarkdownNode.resolveIncludes(context);
    delete context.divisionMarkdownNodes;
    return divisionMarkdownNodes;
}
function prepareFootnotes(divisionMarkdownNodes, context) {
    var footnoteReplacementMap = {};
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.prepareFootnotes(footnoteReplacementMap, context);
    });
    return footnoteReplacementMap;
}
function resolveEmbeddings(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.resolveEmbeddings(context);
    });
}
function divisionMarkdownNodesFromMarkdownNodes(markdownNodes) {
    var divisionMarkdownNodes = markdownNodes.reduce(function(divisionMarkdownNodes, markdownNode) {
        var markdownNodeDivisionMarkdownNode = markdownNode.isDivisionMarkdownNode();
        if (markdownNodeDivisionMarkdownNode) {
            var divisionMarkdownNode = markdownNode; ///
            divisionMarkdownNodes.push(divisionMarkdownNode);
        }
        return divisionMarkdownNodes;
    }, []);
    return divisionMarkdownNodes;
}
var _default = {
    postprocess: postprocess,
    divisionMarkdownNodesFromMarkdownNodes: divisionMarkdownNodesFromMarkdownNodes
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcHJvY2Vzc2luZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KSB7XG4gIGxldCBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzID0gcmVzb2x2ZUluY2x1ZGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KTtcblxuICByZXNvbHZlRW1iZWRkaW5ncyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIGNvbnN0IGZvb3Rub3RlUmVwbGFjZW1lbnRNYXAgPSBwcmVwYXJlRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCksXG4gICAgICAgIG1hcmtkb3duTm9kZXMgPSBwYWdpbmF0ZShkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IGRpdmlzaW9uTWFya2Rvd25Ob2Rlc0Zyb21NYXJrZG93bk5vZGVzKG1hcmtkb3duTm9kZXMpOyAgLy8vXG5cbiAgY3JlYXRlRm9vdG5vdGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgZm9vdG5vdGVSZXBsYWNlbWVudE1hcCwgY29udGV4dCk7XG5cbiAgY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICBjcmVhdGVJbmRleChkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIHJldHVybiBtYXJrZG93bk5vZGVzO1xufVxuXG5mdW5jdGlvbiBwYWdpbmF0ZShkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgY29uc3QgbWFya2Rvd25OT2RlcyA9IFtdO1xuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnBhZ2luYXRlKG1hcmtkb3duTk9kZXMsIGNvbnRleHQpO1xuICB9KTtcblxuICByZXR1cm4gbWFya2Rvd25OT2Rlcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5kZXgoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5zb21lKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGNvbnN0IGluZGV4Q3JlYXRlZCA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUluZGV4KGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgICBpZiAoaW5kZXhDcmVhdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250ZW50cyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLnNvbWUoKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3QgY29udGVudHNDcmVhdGVkID0gZGl2aXNpb25NYXJrZG93bk5vZGUuY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICAgIGlmIChjb250ZW50c0NyZWF0ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZvb3Rub3RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGZvb3Rub3RlUmVwbGFjZW1lbnRNYXAsIGNvbnRleHQpIHtcbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGUuY3JlYXRlRm9vdG5vdGVzKGZvb3Rub3RlUmVwbGFjZW1lbnRNYXAsIGNvbnRleHQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluY2x1ZGVzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IFtdO1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlc1xuICB9KTtcblxuICBjb25zdCBkaXZpc2lvbk1hcmtkb3duTm9kZUlnbm9yZWQgPSBkaXZpc2lvbk1hcmtkb3duTm9kZS5pc0lnbm9yZWQoKTtcblxuICBpZiAoIWRpdmlzaW9uTWFya2Rvd25Ob2RlSWdub3JlZCkge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5wdXNoKGRpdmlzaW9uTWFya2Rvd25Ob2RlKTtcbiAgfVxuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVJbmNsdWRlcyhjb250ZXh0KTtcblxuICBkZWxldGUgY29udGV4dC5kaXZpc2lvbk1hcmtkb3duTm9kZXM7XG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUZvb3Rub3RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgY29uc3QgZm9vdG5vdGVSZXBsYWNlbWVudE1hcCA9IHt9O1xuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnByZXBhcmVGb290bm90ZXMoZm9vdG5vdGVSZXBsYWNlbWVudE1hcCwgY29udGV4dCk7XG4gIH0pO1xuXG4gIHJldHVybiBmb290bm90ZVJlcGxhY2VtZW50TWFwO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRW1iZWRkaW5ncyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpIHtcbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLmZvckVhY2goKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgZGl2aXNpb25NYXJrZG93bk5vZGUucmVzb2x2ZUVtYmVkZGluZ3MoY29udGV4dCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2aXNpb25NYXJrZG93bk5vZGVzRnJvbU1hcmtkb3duTm9kZXMobWFya2Rvd25Ob2Rlcykge1xuICBjb25zdCBkaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBtYXJrZG93bk5vZGVzLnJlZHVjZSgoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBtYXJrZG93bk5vZGUpID0+IHtcbiAgICBjb25zdCBtYXJrZG93bk5vZGVEaXZpc2lvbk1hcmtkb3duTm9kZSA9IG1hcmtkb3duTm9kZS5pc0RpdmlzaW9uTWFya2Rvd25Ob2RlKCk7XG5cbiAgICBpZiAobWFya2Rvd25Ob2RlRGl2aXNpb25NYXJrZG93bk5vZGUpIHtcbiAgICAgIGNvbnN0IGRpdmlzaW9uTWFya2Rvd25Ob2RlID0gbWFya2Rvd25Ob2RlOyAgLy8vXG5cbiAgICAgIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5wdXNoKGRpdmlzaW9uTWFya2Rvd25Ob2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGl2aXNpb25NYXJrZG93bk5vZGVzO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwb3N0cHJvY2VzcyxcbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzRnJvbU1hcmtkb3duTm9kZXNcbn0iXSwibmFtZXMiOlsiZGl2aXNpb25NYXJrZG93bk5vZGVzRnJvbU1hcmtkb3duTm9kZXMiLCJwb3N0cHJvY2VzcyIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiY29udGV4dCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlcyIsInJlc29sdmVJbmNsdWRlcyIsInJlc29sdmVFbWJlZGRpbmdzIiwiZm9vdG5vdGVSZXBsYWNlbWVudE1hcCIsInByZXBhcmVGb290bm90ZXMiLCJtYXJrZG93bk5vZGVzIiwicGFnaW5hdGUiLCJjcmVhdGVGb290bm90ZXMiLCJjcmVhdGVDb250ZW50cyIsImNyZWF0ZUluZGV4IiwibWFya2Rvd25OT2RlcyIsImZvckVhY2giLCJzb21lIiwiaW5kZXhDcmVhdGVkIiwiY29udGVudHNDcmVhdGVkIiwiT2JqZWN0IiwiYXNzaWduIiwiZGl2aXNpb25NYXJrZG93bk5vZGVJZ25vcmVkIiwiaXNJZ25vcmVkIiwicHVzaCIsInJlZHVjZSIsIm1hcmtkb3duTm9kZSIsIm1hcmtkb3duTm9kZURpdmlzaW9uTWFya2Rvd25Ob2RlIiwiaXNEaXZpc2lvbk1hcmtkb3duTm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBK0dBLE9BR0M7ZUFIRDs7SUFoQmdCQSxzQ0FBc0M7ZUFBdENBOztJQTdGQUMsV0FBVztlQUFYQTs7O0FBQVQsU0FBU0EsWUFBWUMsb0JBQW9CLEVBQUVDLE9BQU87SUFDdkQsSUFBSUM7SUFFSkEsd0JBQXdCQyxnQkFBZ0JILHNCQUFzQkM7SUFFOURHLGtCQUFrQkYsdUJBQXVCRDtJQUV6QyxJQUFNSSx5QkFBeUJDLGlCQUFpQkosdUJBQXVCRCxVQUNqRU0sZ0JBQWdCQyxTQUFTTix1QkFBdUJEO0lBRXREQyx3QkFBd0JKLHVDQUF1Q1MsZ0JBQWlCLEdBQUc7SUFFbkZFLGdCQUFnQlAsdUJBQXVCRyx3QkFBd0JKO0lBRS9EUyxlQUFlUix1QkFBdUJEO0lBRXRDVSxZQUFZVCx1QkFBdUJEO0lBRW5DLE9BQU9NO0FBQ1Q7QUFFQSxTQUFTQyxTQUFTTixxQkFBcUIsRUFBRUQsT0FBTztJQUM5QyxJQUFNVyxnQkFBZ0IsRUFBRTtJQUV4QlYsc0JBQXNCVyxPQUFPLENBQUMsU0FBQ2I7UUFDN0JBLHFCQUFxQlEsUUFBUSxDQUFDSSxlQUFlWDtJQUMvQztJQUVBLE9BQU9XO0FBQ1Q7QUFFQSxTQUFTRCxZQUFZVCxxQkFBcUIsRUFBRUQsT0FBTztJQUNqREMsc0JBQXNCWSxJQUFJLENBQUMsU0FBQ2Q7UUFDMUIsSUFBTWUsZUFBZWYscUJBQXFCVyxXQUFXLENBQUNULHVCQUF1QkQ7UUFFN0UsSUFBSWMsY0FBYztZQUNoQixPQUFPO1FBQ1Q7SUFDRjtBQUNGO0FBRUEsU0FBU0wsZUFBZVIscUJBQXFCLEVBQUVELE9BQU87SUFDcERDLHNCQUFzQlksSUFBSSxDQUFDLFNBQUNkO1FBQzFCLElBQU1nQixrQkFBa0JoQixxQkFBcUJVLGNBQWMsQ0FBQ1IsdUJBQXVCRDtRQUVuRixJQUFJZSxpQkFBaUI7WUFDbkIsT0FBTztRQUNUO0lBQ0Y7QUFDRjtBQUVBLFNBQVNQLGdCQUFnQlAscUJBQXFCLEVBQUVHLHNCQUFzQixFQUFFSixPQUFPO0lBQzdFQyxzQkFBc0JXLE9BQU8sQ0FBQyxTQUFDYjtRQUM3QkEscUJBQXFCUyxlQUFlLENBQUNKLHdCQUF3Qko7SUFDL0Q7QUFDRjtBQUVBLFNBQVNFLGdCQUFnQkgsb0JBQW9CLEVBQUVDLE9BQU87SUFDcEQsSUFBTUMsd0JBQXdCLEVBQUU7SUFFaENlLE9BQU9DLE1BQU0sQ0FBQ2pCLFNBQVM7UUFDckJDLHVCQUFBQTtJQUNGO0lBRUEsSUFBTWlCLDhCQUE4Qm5CLHFCQUFxQm9CLFNBQVM7SUFFbEUsSUFBSSxDQUFDRCw2QkFBNkI7UUFDaENqQixzQkFBc0JtQixJQUFJLENBQUNyQjtJQUM3QjtJQUVBQSxxQkFBcUJHLGVBQWUsQ0FBQ0Y7SUFFckMsT0FBT0EsUUFBUUMscUJBQXFCO0lBRXBDLE9BQU9BO0FBQ1Q7QUFFQSxTQUFTSSxpQkFBaUJKLHFCQUFxQixFQUFFRCxPQUFPO0lBQ3RELElBQU1JLHlCQUF5QixDQUFDO0lBRWhDSCxzQkFBc0JXLE9BQU8sQ0FBQyxTQUFDYjtRQUM3QkEscUJBQXFCTSxnQkFBZ0IsQ0FBQ0Qsd0JBQXdCSjtJQUNoRTtJQUVBLE9BQU9JO0FBQ1Q7QUFFQSxTQUFTRCxrQkFBa0JGLHFCQUFxQixFQUFFRCxPQUFPO0lBQ3ZEQyxzQkFBc0JXLE9BQU8sQ0FBQyxTQUFDYjtRQUM3QkEscUJBQXFCSSxpQkFBaUIsQ0FBQ0g7SUFDekM7QUFDRjtBQUVPLFNBQVNILHVDQUF1Q1MsYUFBYTtJQUNsRSxJQUFNTCx3QkFBd0JLLGNBQWNlLE1BQU0sQ0FBQyxTQUFDcEIsdUJBQXVCcUI7UUFDekUsSUFBTUMsbUNBQW1DRCxhQUFhRSxzQkFBc0I7UUFFNUUsSUFBSUQsa0NBQWtDO1lBQ3BDLElBQU14Qix1QkFBdUJ1QixjQUFlLEdBQUc7WUFFL0NyQixzQkFBc0JtQixJQUFJLENBQUNyQjtRQUM3QjtRQUVBLE9BQU9FO0lBQ1QsR0FBRyxFQUFFO0lBRUwsT0FBT0E7QUFDVDtJQUVBLFdBQWU7SUFDYkgsYUFBQUE7SUFDQUQsd0NBQUFBO0FBQ0YifQ==