"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    postprocess: function() {
        return postprocess;
    }
});
function postprocess(divisionMarkdownNode, indexEntries, context) {
    var divisionMarkdownNodes;
    divisionMarkdownNodes = resolveIncludes(divisionMarkdownNode, context);
    resolveEmbeddings(divisionMarkdownNodes, context);
    var footnoteReplacementMap = prepareFootnotes(divisionMarkdownNodes, context);
    divisionMarkdownNodes = paginate(divisionMarkdownNodes, context);
    createFootnotes(divisionMarkdownNodes, footnoteReplacementMap, context);
    createContents(divisionMarkdownNodes, context);
    createIndex(divisionMarkdownNodes, indexEntries, context);
    return divisionMarkdownNodes;
}
function paginate(divisionMarkdownNodes, context) {
    var paginatedDivisionMarkdownNodes = [];
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.paginate(paginatedDivisionMarkdownNodes, context);
    });
    paginatedDivisionMarkdownNodes.forEach(function(paginatedDivisionMarkdownNode, index) {
        var pageNumber = index + 1;
        paginatedDivisionMarkdownNode.setPageNumber(pageNumber);
    });
    divisionMarkdownNodes = paginatedDivisionMarkdownNodes; ///
    return divisionMarkdownNodes;
}
function createIndex(divisionMarkdownNodes, indexEntries, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var indexCreated = divisionMarkdownNode.createIndex(divisionMarkdownNodes, indexEntries, context);
        if (indexCreated) {
            return true;
        }
    });
}
function createContents(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.some(function(divisionMarkdownNode) {
        var contentsCreated = divisionMarkdownNode.createContents(divisionMarkdownNodes, context);
        if (contentsCreated) {
            return true;
        }
    });
}
function createFootnotes(divisionMarkdownNodes, footnoteReplacementMap, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.createFootnotes(footnoteReplacementMap, context);
    });
}
function resolveIncludes(divisionMarkdownNode, context) {
    var divisionMarkdownNodes = [];
    Object.assign(context, {
        divisionMarkdownNodes: divisionMarkdownNodes
    });
    var divisionMarkdownNodeIgnored = divisionMarkdownNode.isIgnored();
    if (!divisionMarkdownNodeIgnored) {
        divisionMarkdownNodes.push(divisionMarkdownNode);
    }
    divisionMarkdownNode.resolveIncludes(context);
    delete context.divisionMarkdownNodes;
    return divisionMarkdownNodes;
}
function prepareFootnotes(divisionMarkdownNodes, context) {
    var footnoteReplacementMap = {};
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.prepareFootnotes(footnoteReplacementMap, context);
    });
    return footnoteReplacementMap;
}
function resolveEmbeddings(divisionMarkdownNodes, context) {
    divisionMarkdownNodes.forEach(function(divisionMarkdownNode) {
        divisionMarkdownNode.resolveEmbeddings(context);
    });
}
var _default = {
    postprocess: postprocess
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcHJvY2Vzc2luZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBpbmRleEVudHJpZXMsIGNvbnRleHQpIHtcbiAgbGV0IGRpdmlzaW9uTWFya2Rvd25Ob2RlcztcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMgPSByZXNvbHZlSW5jbHVkZXMoZGl2aXNpb25NYXJrZG93bk5vZGUsIGNvbnRleHQpO1xuXG4gIHJlc29sdmVFbWJlZGRpbmdzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgY29uc3QgZm9vdG5vdGVSZXBsYWNlbWVudE1hcCA9IHByZXBhcmVGb290bm90ZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KTtcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBwYWdpbmF0ZShkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuXG4gIGNyZWF0ZUZvb3Rub3RlcyhkaXZpc2lvbk1hcmtkb3duTm9kZXMsIGZvb3Rub3RlUmVwbGFjZW1lbnRNYXAsIGNvbnRleHQpO1xuXG4gIGNyZWF0ZUNvbnRlbnRzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgY3JlYXRlSW5kZXgoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBpbmRleEVudHJpZXMsIGNvbnRleHQpO1xuXG4gIHJldHVybiBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG59XG5cbmZ1bmN0aW9uIHBhZ2luYXRlKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCkge1xuICBjb25zdCBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBbXTtcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZS5wYWdpbmF0ZShwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMsIGNvbnRleHQpO1xuICB9KTtcblxuICBwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgocGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGUsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcGFnZU51bWJlciA9IGluZGV4ICsgMTtcblxuICAgIHBhZ2luYXRlZERpdmlzaW9uTWFya2Rvd25Ob2RlLnNldFBhZ2VOdW1iZXIocGFnZU51bWJlcik7XG4gIH0pO1xuXG4gIGRpdmlzaW9uTWFya2Rvd25Ob2RlcyA9IHBhZ2luYXRlZERpdmlzaW9uTWFya2Rvd25Ob2RlczsgLy8vXG5cbiAgcmV0dXJuIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5kZXgoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBpbmRleEVudHJpZXMsIGNvbnRleHQpIHtcbiAgZGl2aXNpb25NYXJrZG93bk5vZGVzLnNvbWUoKGRpdmlzaW9uTWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgY29uc3QgaW5kZXhDcmVhdGVkID0gZGl2aXNpb25NYXJrZG93bk5vZGUuY3JlYXRlSW5kZXgoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBpbmRleEVudHJpZXMsIGNvbnRleHQpO1xuXG4gICAgaWYgKGluZGV4Q3JlYXRlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udGVudHMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5zb21lKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzQ3JlYXRlZCA9IGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUNvbnRlbnRzKGRpdmlzaW9uTWFya2Rvd25Ob2RlcywgY29udGV4dCk7XG5cbiAgICBpZiAoY29udGVudHNDcmVhdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGb290bm90ZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBmb290bm90ZVJlcGxhY2VtZW50TWFwLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLmNyZWF0ZUZvb3Rub3Rlcyhmb290bm90ZVJlcGxhY2VtZW50TWFwLCBjb250ZXh0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmNsdWRlcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgY29udGV4dCkge1xuICBjb25zdCBkaXZpc2lvbk1hcmtkb3duTm9kZXMgPSBbXTtcblxuICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZXNcbiAgfSk7XG5cbiAgY29uc3QgZGl2aXNpb25NYXJrZG93bk5vZGVJZ25vcmVkID0gZGl2aXNpb25NYXJrZG93bk5vZGUuaXNJZ25vcmVkKCk7XG5cbiAgaWYgKCFkaXZpc2lvbk1hcmtkb3duTm9kZUlnbm9yZWQpIHtcbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZXMucHVzaChkaXZpc2lvbk1hcmtkb3duTm9kZSk7XG4gIH1cblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZS5yZXNvbHZlSW5jbHVkZXMoY29udGV4dCk7XG5cbiAgZGVsZXRlIGNvbnRleHQuZGl2aXNpb25NYXJrZG93bk5vZGVzO1xuXG4gIHJldHVybiBkaXZpc2lvbk1hcmtkb3duTm9kZXM7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVGb290bm90ZXMoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGZvb3Rub3RlUmVwbGFjZW1lbnRNYXAgPSB7fTtcblxuICBkaXZpc2lvbk1hcmtkb3duTm9kZXMuZm9yRWFjaCgoZGl2aXNpb25NYXJrZG93bk5vZGUpID0+IHtcbiAgICBkaXZpc2lvbk1hcmtkb3duTm9kZS5wcmVwYXJlRm9vdG5vdGVzKGZvb3Rub3RlUmVwbGFjZW1lbnRNYXAsIGNvbnRleHQpO1xuICB9KTtcblxuICByZXR1cm4gZm9vdG5vdGVSZXBsYWNlbWVudE1hcDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUVtYmVkZGluZ3MoZGl2aXNpb25NYXJrZG93bk5vZGVzLCBjb250ZXh0KSB7XG4gIGRpdmlzaW9uTWFya2Rvd25Ob2Rlcy5mb3JFYWNoKChkaXZpc2lvbk1hcmtkb3duTm9kZSkgPT4ge1xuICAgIGRpdmlzaW9uTWFya2Rvd25Ob2RlLnJlc29sdmVFbWJlZGRpbmdzKGNvbnRleHQpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwb3N0cHJvY2Vzc1xufTtcbiJdLCJuYW1lcyI6WyJwb3N0cHJvY2VzcyIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiaW5kZXhFbnRyaWVzIiwiY29udGV4dCIsImRpdmlzaW9uTWFya2Rvd25Ob2RlcyIsInJlc29sdmVJbmNsdWRlcyIsInJlc29sdmVFbWJlZGRpbmdzIiwiZm9vdG5vdGVSZXBsYWNlbWVudE1hcCIsInByZXBhcmVGb290bm90ZXMiLCJwYWdpbmF0ZSIsImNyZWF0ZUZvb3Rub3RlcyIsImNyZWF0ZUNvbnRlbnRzIiwiY3JlYXRlSW5kZXgiLCJwYWdpbmF0ZWREaXZpc2lvbk1hcmtkb3duTm9kZXMiLCJmb3JFYWNoIiwicGFnaW5hdGVkRGl2aXNpb25NYXJrZG93bk5vZGUiLCJpbmRleCIsInBhZ2VOdW1iZXIiLCJzZXRQYWdlTnVtYmVyIiwic29tZSIsImluZGV4Q3JlYXRlZCIsImNvbnRlbnRzQ3JlYXRlZCIsIk9iamVjdCIsImFzc2lnbiIsImRpdmlzaW9uTWFya2Rvd25Ob2RlSWdub3JlZCIsImlzSWdub3JlZCIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXNHQSxPQUVFO2VBRkY7O0lBcEdnQkEsV0FBVztlQUFYQTs7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