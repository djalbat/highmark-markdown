"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
function removeChildNode(childNode) {
    var childNodes = this.getChildNodes(), index = childNodes.indexOf(childNode), start = index, deleteCount = 1;
    childNodes.splice(start, deleteCount);
}
function prependChildNode(childNode) {
    var childNodes = this.getChildNodes();
    childNodes.unshift(childNode);
}
function appendChildNode(childNode) {
    var childNodes = this.getChildNodes();
    childNodes.push(childNode);
}
function replaceChildNode(replacedChildNode, replacementChildNode) {
    var childNodes = this.getChildNodes(), index = childNodes.indexOf(replacedChildNode), start = index, deleteCount = 1;
    childNodes.splice(start, deleteCount, replacementChildNode);
}
function getDescendantNodes() {
    var descendantNodes = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var descendantNode = this; ///
    descendantNodes.push(descendantNode);
    var childNodes = this.getChildNodes();
    childNodes.forEach(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var nonTerminalNode = childNode; ///
            nonTerminalNode.getDescendantNodes(descendantNodes);
        }
    });
    return descendantNodes;
}
var nodeMixins = {
    removeChildNode: removeChildNode,
    appendChildNode: appendChildNode,
    prependChildNode: prependChildNode,
    replaceChildNode: replaceChildNode,
    getDescendantNodes: getDescendantNodes
};
var _default = nodeMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGROb2RlKGNoaWxkTm9kZSkge1xuICBjb25zdCBjaGlsZE5vZGVzID0gdGhpcy5nZXRDaGlsZE5vZGVzKCksXG4gICAgICAgIGluZGV4ID0gY2hpbGROb2Rlcy5pbmRleE9mKGNoaWxkTm9kZSksXG4gICAgICAgIHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gIGNoaWxkTm9kZXMuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRDaGlsZE5vZGUoY2hpbGROb2RlKSB7XG4gIGNvbnN0IGNoaWxkTm9kZXMgPSB0aGlzLmdldENoaWxkTm9kZXMoKTtcblxuICBjaGlsZE5vZGVzLnVuc2hpZnQoY2hpbGROb2RlKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGROb2RlKGNoaWxkTm9kZSkge1xuICBjb25zdCBjaGlsZE5vZGVzID0gdGhpcy5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgY2hpbGROb2Rlcy5wdXNoKGNoaWxkTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VDaGlsZE5vZGUocmVwbGFjZWRDaGlsZE5vZGUsIHJlcGxhY2VtZW50Q2hpbGROb2RlKSB7XG4gIGNvbnN0IGNoaWxkTm9kZXMgPSB0aGlzLmdldENoaWxkTm9kZXMoKSxcbiAgICAgICAgaW5kZXggPSBjaGlsZE5vZGVzLmluZGV4T2YocmVwbGFjZWRDaGlsZE5vZGUpLFxuICAgICAgICBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICBjaGlsZE5vZGVzLnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIHJlcGxhY2VtZW50Q2hpbGROb2RlKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVzY2VuZGFudE5vZGVzKGRlc2NlbmRhbnROb2RlcyA9IFtdKSB7XG4gIGNvbnN0IGRlc2NlbmRhbnROb2RlID0gdGhpczsgLy8vXG5cbiAgZGVzY2VuZGFudE5vZGVzLnB1c2goZGVzY2VuZGFudE5vZGUpO1xuXG4gIGNvbnN0IGNoaWxkTm9kZXMgPSB0aGlzLmdldENoaWxkTm9kZXMoKTtcblxuICBjaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkTm9kZSkgPT4ge1xuICAgIGNvbnN0IGNoaWxkTm9kZU5vblRlcm1pbmFsTm9kZSA9IGNoaWxkTm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gICAgaWYgKGNoaWxkTm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gY2hpbGROb2RlOyAgLy8vXG5cbiAgICAgIG5vblRlcm1pbmFsTm9kZS5nZXREZXNjZW5kYW50Tm9kZXMoZGVzY2VuZGFudE5vZGVzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkZXNjZW5kYW50Tm9kZXM7XG59XG5cbmNvbnN0IG5vZGVNaXhpbnMgPSB7XG4gIHJlbW92ZUNoaWxkTm9kZSxcbiAgYXBwZW5kQ2hpbGROb2RlLFxuICBwcmVwZW5kQ2hpbGROb2RlLFxuICByZXBsYWNlQ2hpbGROb2RlLFxuICBnZXREZXNjZW5kYW50Tm9kZXNcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5vZGVNaXhpbnM7XG4iXSwibmFtZXMiOlsicmVtb3ZlQ2hpbGROb2RlIiwiY2hpbGROb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJpbmRleCIsImluZGV4T2YiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwicHJlcGVuZENoaWxkTm9kZSIsInVuc2hpZnQiLCJhcHBlbmRDaGlsZE5vZGUiLCJwdXNoIiwicmVwbGFjZUNoaWxkTm9kZSIsInJlcGxhY2VkQ2hpbGROb2RlIiwicmVwbGFjZW1lbnRDaGlsZE5vZGUiLCJnZXREZXNjZW5kYW50Tm9kZXMiLCJkZXNjZW5kYW50Tm9kZXMiLCJkZXNjZW5kYW50Tm9kZSIsImZvckVhY2giLCJjaGlsZE5vZGVOb25UZXJtaW5hbE5vZGUiLCJpc05vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZSIsIm5vZGVNaXhpbnMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7OytCQTREQTs7O2VBQUE7OztBQTFEQSxTQUFTQSxnQkFBZ0JDLFNBQVM7SUFDaEMsSUFBTUMsYUFBYSxJQUFJLENBQUNDLGFBQWEsSUFDL0JDLFFBQVFGLFdBQVdHLE9BQU8sQ0FBQ0osWUFDM0JLLFFBQVFGLE9BQ1JHLGNBQWM7SUFFcEJMLFdBQVdNLE1BQU0sQ0FBQ0YsT0FBT0M7QUFDM0I7QUFFQSxTQUFTRSxpQkFBaUJSLFNBQVM7SUFDakMsSUFBTUMsYUFBYSxJQUFJLENBQUNDLGFBQWE7SUFFckNELFdBQVdRLE9BQU8sQ0FBQ1Q7QUFDckI7QUFFQSxTQUFTVSxnQkFBZ0JWLFNBQVM7SUFDaEMsSUFBTUMsYUFBYSxJQUFJLENBQUNDLGFBQWE7SUFFckNELFdBQVdVLElBQUksQ0FBQ1g7QUFDbEI7QUFFQSxTQUFTWSxpQkFBaUJDLGlCQUFpQixFQUFFQyxvQkFBb0I7SUFDL0QsSUFBTWIsYUFBYSxJQUFJLENBQUNDLGFBQWEsSUFDL0JDLFFBQVFGLFdBQVdHLE9BQU8sQ0FBQ1Msb0JBQzNCUixRQUFRRixPQUNSRyxjQUFjO0lBRXBCTCxXQUFXTSxNQUFNLENBQUNGLE9BQU9DLGFBQWFRO0FBQ3hDO0FBRUEsU0FBU0M7UUFBbUJDLGtCQUFBQSxpRUFBa0IsRUFBRTtJQUM5QyxJQUFNQyxpQkFBaUIsSUFBSSxFQUFFLEdBQUc7SUFFaENELGdCQUFnQkwsSUFBSSxDQUFDTTtJQUVyQixJQUFNaEIsYUFBYSxJQUFJLENBQUNDLGFBQWE7SUFFckNELFdBQVdpQixPQUFPLENBQUMsU0FBQ2xCO1FBQ2xCLElBQU1tQiwyQkFBMkJuQixVQUFVb0IsaUJBQWlCO1FBRTVELElBQUlELDBCQUEwQjtZQUM1QixJQUFNRSxrQkFBa0JyQixXQUFZLEdBQUc7WUFFdkNxQixnQkFBZ0JOLGtCQUFrQixDQUFDQztRQUNyQztJQUNGO0lBRUEsT0FBT0E7QUFDVDtBQUVBLElBQU1NLGFBQWE7SUFDakJ2QixpQkFBQUE7SUFDQVcsaUJBQUFBO0lBQ0FGLGtCQUFBQTtJQUNBSSxrQkFBQUE7SUFDQUcsb0JBQUFBO0FBQ0Y7SUFFQSxXQUFlTyJ9