"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    forEachCSSNode: function() {
        return forEachCSSNode;
    }
});
var _name = /*#__PURE__*/ _interop_require_default(require("../../node/css/name"));
var _value = /*#__PURE__*/ _interop_require_default(require("../../node/css/value"));
var _style = /*#__PURE__*/ _interop_require_default(require("../../node/css/style"));
var _class = /*#__PURE__*/ _interop_require_default(require("../../node/css/class"));
var _error = /*#__PURE__*/ _interop_require_default(require("../../node/css/error"));
var _values = /*#__PURE__*/ _interop_require_default(require("../../node/css/values"));
var _ruleSet = /*#__PURE__*/ _interop_require_default(require("../../node/css/ruleSet"));
var _nonsense = /*#__PURE__*/ _interop_require_default(require("../../node/css/nonsense"));
var _argument = /*#__PURE__*/ _interop_require_default(require("../../node/css/argument"));
var _selector = /*#__PURE__*/ _interop_require_default(require("../../node/css/selector"));
var _selectors = /*#__PURE__*/ _interop_require_default(require("../../node/css/selectors"));
var _arguments = /*#__PURE__*/ _interop_require_default(require("../../node/css/arguments"));
var _identifier = /*#__PURE__*/ _interop_require_default(require("../../node/css/identifier"));
var _declaration = /*#__PURE__*/ _interop_require_default(require("../../node/css/declaration"));
var _pseudoClass = /*#__PURE__*/ _interop_require_default(require("../../node/css/pseudoClass"));
var _selectorsList = /*#__PURE__*/ _interop_require_default(require("../../node/css/selectorsList"));
var _markdown = require("../../ruleNames/markdown");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _obj;
var cssNodeMap = (_obj = {}, _define_property(_obj, _markdown.NAME_MARKDOWN_STYLE_RULE_NAME, _name.default), _define_property(_obj, _markdown.VALUE_MARKDOWN_STYLE_RULE_NAME, _value.default), _define_property(_obj, _markdown.STYLE_MARKDOWN_STYLE_RULE_NAME, _style.default), _define_property(_obj, _markdown.CLASS_MARKDOWN_STYLE_RULE_NAME, _class.default), _define_property(_obj, _markdown.ERROR_MARKDOWN_STYLE_RULE_NAME, _error.default), _define_property(_obj, _markdown.VALUES_MARKDOWN_STYLE_RULE_NAME, _values.default), _define_property(_obj, _markdown.RULE_SET_MARKDOWN_STYLE_RULE_NAME, _ruleSet.default), _define_property(_obj, _markdown.NONSENSE_MARKDOWN_STYLE_RULE_NAME, _nonsense.default), _define_property(_obj, _markdown.ARGUMENT_MARKDOWN_STYLE_RULE_NAME, _argument.default), _define_property(_obj, _markdown.SELECTOR_MARKDOWN_STYLE_RULE_NAME, _selector.default), _define_property(_obj, _markdown.SELECTORS_MARKDOWN_STYLE_RULE_NAME, _selectors.default), _define_property(_obj, _markdown.ARGUMENTS_MARKDOWN_STYLE_RULE_NAME, _arguments.default), _define_property(_obj, _markdown.IDENTIFIER_MARKDOWN_STYLE_RULE_NAME, _identifier.default), _define_property(_obj, _markdown.DECLARATION_MARKDOWN_STYLE_RULE_NAME, _declaration.default), _define_property(_obj, _markdown.PSEUDO_CLASS_MARKDOWN_STYLE_RULE_NAME, _pseudoClass.default), _define_property(_obj, _markdown.SELECTORS_LIST_MARKDOWN_STYLE_RULE_NAME, _selectorsList.default), _obj);
function forEachCSSNode(callback) {
    var ruleNames = Object.keys(cssNodeMap);
    ruleNames.forEach(function(ruleName) {
        var CSSNode = cssNodeMap[ruleName], Class = CSSNode;
        callback(Class, ruleName);
    });
}
var _default = cssNodeMap;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYXAvbm9kZS9jc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBOYW1lQ1NTTm9kZSBmcm9tIFwiLi4vLi4vbm9kZS9jc3MvbmFtZVwiO1xuaW1wb3J0IFZhbHVlQ1NTTm9kZSBmcm9tIFwiLi4vLi4vbm9kZS9jc3MvdmFsdWVcIjtcbmltcG9ydCBTdHlsZUNTU05vZGUgZnJvbSBcIi4uLy4uL25vZGUvY3NzL3N0eWxlXCI7XG5pbXBvcnQgQ2xhc3NDU1NOb2RlIGZyb20gXCIuLi8uLi9ub2RlL2Nzcy9jbGFzc1wiO1xuaW1wb3J0IEVycm9yQ1NTTm9kZSBmcm9tIFwiLi4vLi4vbm9kZS9jc3MvZXJyb3JcIjtcbmltcG9ydCBWYWx1ZXNDU1NOb2RlIGZyb20gXCIuLi8uLi9ub2RlL2Nzcy92YWx1ZXNcIjtcbmltcG9ydCBSdWxlU2V0Q1NTTm9kZSBmcm9tIFwiLi4vLi4vbm9kZS9jc3MvcnVsZVNldFwiO1xuaW1wb3J0IE5vbnNlbnNlQ1NTTm9kZSBmcm9tIFwiLi4vLi4vbm9kZS9jc3Mvbm9uc2Vuc2VcIjtcbmltcG9ydCBBcmd1bWVudENTU05vZGUgZnJvbSBcIi4uLy4uL25vZGUvY3NzL2FyZ3VtZW50XCI7XG5pbXBvcnQgU2VsZWN0b3JDU1NOb2RlIGZyb20gXCIuLi8uLi9ub2RlL2Nzcy9zZWxlY3RvclwiO1xuaW1wb3J0IFNlbGVjdG9yc0NTU05vZGUgZnJvbSBcIi4uLy4uL25vZGUvY3NzL3NlbGVjdG9yc1wiO1xuaW1wb3J0IEFyZ3VtZW50c0NTU05vZGUgZnJvbSBcIi4uLy4uL25vZGUvY3NzL2FyZ3VtZW50c1wiO1xuaW1wb3J0IElkZW50aWZpZXJDU1NOb2RlIGZyb20gXCIuLi8uLi9ub2RlL2Nzcy9pZGVudGlmaWVyXCI7XG5pbXBvcnQgRGVjbGFyYXRpb25DU1NOb2RlIGZyb20gXCIuLi8uLi9ub2RlL2Nzcy9kZWNsYXJhdGlvblwiO1xuaW1wb3J0IFBzZXVkb0NsYXNzQ1NTTm9kZSBmcm9tIFwiLi4vLi4vbm9kZS9jc3MvcHNldWRvQ2xhc3NcIjtcbmltcG9ydCBTZWxlY3RvcnNMaXN0Q1NTTm9kZSBmcm9tIFwiLi4vLi4vbm9kZS9jc3Mvc2VsZWN0b3JzTGlzdFwiO1xuXG5pbXBvcnQgeyBOQU1FX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSxcbiAgICAgICAgIFZBTFVFX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSxcbiAgICAgICAgIFNUWUxFX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSxcbiAgICAgICAgIENMQVNTX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSxcbiAgICAgICAgIEVSUk9SX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSxcbiAgICAgICAgIFZBTFVFU19NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUsXG4gICAgICAgICBSVUxFX1NFVF9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUsXG4gICAgICAgICBOT05TRU5TRV9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUsXG4gICAgICAgICBBUkdVTUVOVF9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUsXG4gICAgICAgICBTRUxFQ1RPUl9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUsXG4gICAgICAgICBTRUxFQ1RPUlNfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FLFxuICAgICAgICAgQVJHVU1FTlRTX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSxcbiAgICAgICAgIElERU5USUZJRVJfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FLFxuICAgICAgICAgREVDTEFSQVRJT05fTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FLFxuICAgICAgICAgUFNFVURPX0NMQVNTX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSxcbiAgICAgICAgIFNFTEVDVE9SU19MSVNUX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSB9IGZyb20gXCIuLi8uLi9ydWxlTmFtZXMvbWFya2Rvd25cIjtcblxuY29uc3QgY3NzTm9kZU1hcCA9IHtcbiAgW05BTUVfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogTmFtZUNTU05vZGUsXG4gIFtWQUxVRV9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUVdOiBWYWx1ZUNTU05vZGUsXG4gIFtTVFlMRV9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUVdOiBTdHlsZUNTU05vZGUsXG4gIFtDTEFTU19NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUVdOiBDbGFzc0NTU05vZGUsXG4gIFtFUlJPUl9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUVdOiBFcnJvckNTU05vZGUsXG4gIFtWQUxVRVNfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogVmFsdWVzQ1NTTm9kZSxcbiAgW1JVTEVfU0VUX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRV06IFJ1bGVTZXRDU1NOb2RlLFxuICBbTk9OU0VOU0VfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogTm9uc2Vuc2VDU1NOb2RlLFxuICBbQVJHVU1FTlRfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogQXJndW1lbnRDU1NOb2RlLFxuICBbU0VMRUNUT1JfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogU2VsZWN0b3JDU1NOb2RlLFxuICBbU0VMRUNUT1JTX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRV06IFNlbGVjdG9yc0NTU05vZGUsXG4gIFtBUkdVTUVOVFNfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogQXJndW1lbnRzQ1NTTm9kZSxcbiAgW0lERU5USUZJRVJfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogSWRlbnRpZmllckNTU05vZGUsXG4gIFtERUNMQVJBVElPTl9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUVdOiBEZWNsYXJhdGlvbkNTU05vZGUsXG4gIFtQU0VVRE9fQ0xBU1NfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogUHNldWRvQ2xhc3NDU1NOb2RlLFxuICBbU0VMRUNUT1JTX0xJU1RfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FXTogU2VsZWN0b3JzTGlzdENTU05vZGVcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoQ1NTTm9kZShjYWxsYmFjaykge1xuICBjb25zdCBydWxlTmFtZXMgPSBPYmplY3Qua2V5cyhjc3NOb2RlTWFwKTtcblxuICBydWxlTmFtZXMuZm9yRWFjaCgocnVsZU5hbWUpID0+IHtcbiAgICBjb25zdCBDU1NOb2RlID0gY3NzTm9kZU1hcFtydWxlTmFtZV0sXG4gICAgICAgICAgQ2xhc3MgPSBDU1NOb2RlO1xuXG4gICAgY2FsbGJhY2soQ2xhc3MsIHJ1bGVOYW1lKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNzc05vZGVNYXA7XG4iXSwibmFtZXMiOlsiZm9yRWFjaENTU05vZGUiLCJjc3NOb2RlTWFwIiwiTkFNRV9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJOYW1lQ1NTTm9kZSIsIlZBTFVFX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSIsIlZhbHVlQ1NTTm9kZSIsIlNUWUxFX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSIsIlN0eWxlQ1NTTm9kZSIsIkNMQVNTX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSIsIkNsYXNzQ1NTTm9kZSIsIkVSUk9SX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSIsIkVycm9yQ1NTTm9kZSIsIlZBTFVFU19NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJWYWx1ZXNDU1NOb2RlIiwiUlVMRV9TRVRfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FIiwiUnVsZVNldENTU05vZGUiLCJOT05TRU5TRV9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJOb25zZW5zZUNTU05vZGUiLCJBUkdVTUVOVF9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJBcmd1bWVudENTU05vZGUiLCJTRUxFQ1RPUl9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJTZWxlY3RvckNTU05vZGUiLCJTRUxFQ1RPUlNfTUFSS0RPV05fU1RZTEVfUlVMRV9OQU1FIiwiU2VsZWN0b3JzQ1NTTm9kZSIsIkFSR1VNRU5UU19NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJBcmd1bWVudHNDU1NOb2RlIiwiSURFTlRJRklFUl9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJJZGVudGlmaWVyQ1NTTm9kZSIsIkRFQ0xBUkFUSU9OX01BUktET1dOX1NUWUxFX1JVTEVfTkFNRSIsIkRlY2xhcmF0aW9uQ1NTTm9kZSIsIlBTRVVET19DTEFTU19NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJQc2V1ZG9DbGFzc0NTU05vZGUiLCJTRUxFQ1RPUlNfTElTVF9NQVJLRE9XTl9TVFlMRV9SVUxFX05BTUUiLCJTZWxlY3RvcnNMaXN0Q1NTTm9kZSIsImNhbGxiYWNrIiwicnVsZU5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJydWxlTmFtZSIsIkNTU05vZGUiLCJDbGFzcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBa0VBLE9BQTBCO2VBQTFCOztJQVhnQkEsY0FBYztlQUFkQTs7OzJEQXJEUTs0REFDQzs0REFDQTs0REFDQTs0REFDQTs2REFDQzs4REFDQzsrREFDQzsrREFDQTsrREFDQTtnRUFDQztnRUFDQTtpRUFDQztrRUFDQztrRUFDQTtvRUFDRTt3QkFpQnVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBRXJDO0FBQW5CLElBQU1DLGNBQWEsV0FDakIsaUJBRGlCLE1BQ2hCQyx1Q0FBNkIsRUFBR0MsYUFBVyxHQUM1QyxpQkFGaUIsTUFFaEJDLHdDQUE4QixFQUFHQyxjQUFZLEdBQzlDLGlCQUhpQixNQUdoQkMsd0NBQThCLEVBQUdDLGNBQVksR0FDOUMsaUJBSmlCLE1BSWhCQyx3Q0FBOEIsRUFBR0MsY0FBWSxHQUM5QyxpQkFMaUIsTUFLaEJDLHdDQUE4QixFQUFHQyxjQUFZLEdBQzlDLGlCQU5pQixNQU1oQkMseUNBQStCLEVBQUdDLGVBQWEsR0FDaEQsaUJBUGlCLE1BT2hCQywyQ0FBaUMsRUFBR0MsZ0JBQWMsR0FDbkQsaUJBUmlCLE1BUWhCQywyQ0FBaUMsRUFBR0MsaUJBQWUsR0FDcEQsaUJBVGlCLE1BU2hCQywyQ0FBaUMsRUFBR0MsaUJBQWUsR0FDcEQsaUJBVmlCLE1BVWhCQywyQ0FBaUMsRUFBR0MsaUJBQWUsR0FDcEQsaUJBWGlCLE1BV2hCQyw0Q0FBa0MsRUFBR0Msa0JBQWdCLEdBQ3RELGlCQVppQixNQVloQkMsNENBQWtDLEVBQUdDLGtCQUFnQixHQUN0RCxpQkFiaUIsTUFhaEJDLDZDQUFtQyxFQUFHQyxtQkFBaUIsR0FDeEQsaUJBZGlCLE1BY2hCQyw4Q0FBb0MsRUFBR0Msb0JBQWtCLEdBQzFELGlCQWZpQixNQWVoQkMsK0NBQXFDLEVBQUdDLG9CQUFrQixHQUMzRCxpQkFoQmlCLE1BZ0JoQkMsaURBQXVDLEVBQUdDLHNCQUFvQixHQWhCOUM7QUFtQlosU0FBU2pDLGVBQWVrQyxRQUFRO0lBQ3JDLElBQU1DLFlBQVlDLE9BQU9DLElBQUksQ0FBQ3BDO0lBRTlCa0MsVUFBVUcsT0FBTyxDQUFDLFNBQUNDO1FBQ2pCLElBQU1DLFVBQVV2QyxVQUFVLENBQUNzQyxTQUFTLEVBQzlCRSxRQUFRRDtRQUVkTixTQUFTTyxPQUFPRjtJQUNsQjtBQUNGO0lBRUEsV0FBZXRDIn0=