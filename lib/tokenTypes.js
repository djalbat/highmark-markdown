"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BACKTICKS_TOKEN_TYPE: function() {
        return BACKTICKS_TOKEN_TYPE;
    },
    BACKTICK_TOKEN_TYPE: function() {
        return BACKTICK_TOKEN_TYPE;
    },
    DASHES_TOKEN_TYPE: function() {
        return DASHES_TOKEN_TYPE;
    },
    DOMAIN_TOKEN_TYPE: function() {
        return DOMAIN_TOKEN_TYPE;
    },
    DOUBLE_ASTERISK_TOKEN_TYPE: function() {
        return DOUBLE_ASTERISK_TOKEN_TYPE;
    },
    DOUBLE_HASH_TOKEN_TYPE: function() {
        return DOUBLE_HASH_TOKEN_TYPE;
    },
    ESCAPED_TOKEN_TYPE: function() {
        return ESCAPED_TOKEN_TYPE;
    },
    IDENTIFIER_TOKEN_TYPE: function() {
        return IDENTIFIER_TOKEN_TYPE;
    },
    MANY_DASHES_TOKEN_TYPE: function() {
        return MANY_DASHES_TOKEN_TYPE;
    },
    NUMBER_TOKEN_TYPE: function() {
        return NUMBER_TOKEN_TYPE;
    },
    PATH_TOKEN_TYPE: function() {
        return PATH_TOKEN_TYPE;
    },
    QUADRUPLE_HASH_TOKEN_TYPE: function() {
        return QUADRUPLE_HASH_TOKEN_TYPE;
    },
    SCHEME_TOKEN_TYPE: function() {
        return SCHEME_TOKEN_TYPE;
    },
    SINGLE_ASTERISK_TOKEN_TYPE: function() {
        return SINGLE_ASTERISK_TOKEN_TYPE;
    },
    SINGLE_HASH_TOKEN_TYPE: function() {
        return SINGLE_HASH_TOKEN_TYPE;
    },
    SPECIAL_TOKEN_TYPE: function() {
        return SPECIAL_TOKEN_TYPE;
    },
    TRIPLE_ASTERISK_TOKEN_TYPE: function() {
        return TRIPLE_ASTERISK_TOKEN_TYPE;
    },
    TRIPLE_HASH_TOKEN_TYPE: function() {
        return TRIPLE_HASH_TOKEN_TYPE;
    },
    UNASSIGNED_TOKEN_TYPE: function() {
        return UNASSIGNED_TOKEN_TYPE;
    },
    VERTICAL_BAR_TOKEN_TYPE: function() {
        return VERTICAL_BAR_TOKEN_TYPE;
    },
    WORD_TOKEN_TYPE: function() {
        return WORD_TOKEN_TYPE;
    },
    default: function() {
        return _default;
    }
});
var WORD_TOKEN_TYPE = "word";
var PATH_TOKEN_TYPE = "path";
var DOMAIN_TOKEN_TYPE = "domain";
var NUMBER_TOKEN_TYPE = "number";
var DASHES_TOKEN_TYPE = "dashes";
var SCHEME_TOKEN_TYPE = "scheme";
var ESCAPED_TOKEN_TYPE = "escaped";
var SPECIAL_TOKEN_TYPE = "special";
var BACKTICK_TOKEN_TYPE = "backtick";
var BACKTICKS_TOKEN_TYPE = "backticks";
var IDENTIFIER_TOKEN_TYPE = "identifier";
var UNASSIGNED_TOKEN_TYPE = "unassigned";
var MANY_DASHES_TOKEN_TYPE = "many-dashes";
var SINGLE_HASH_TOKEN_TYPE = "single-hash";
var DOUBLE_HASH_TOKEN_TYPE = "double-hash";
var TRIPLE_HASH_TOKEN_TYPE = "triple-hash";
var VERTICAL_BAR_TOKEN_TYPE = "vertical-bar";
var QUADRUPLE_HASH_TOKEN_TYPE = "quadruple-hash";
var SINGLE_ASTERISK_TOKEN_TYPE = "single-asterisk";
var DOUBLE_ASTERISK_TOKEN_TYPE = "double-asterisk";
var TRIPLE_ASTERISK_TOKEN_TYPE = "triple-asterisk";
var tokenTypes = {
    WORD_TOKEN_TYPE: WORD_TOKEN_TYPE,
    PATH_TOKEN_TYPE: PATH_TOKEN_TYPE,
    DOMAIN_TOKEN_TYPE: DOMAIN_TOKEN_TYPE,
    NUMBER_TOKEN_TYPE: NUMBER_TOKEN_TYPE,
    DASHES_TOKEN_TYPE: DASHES_TOKEN_TYPE,
    SCHEME_TOKEN_TYPE: SCHEME_TOKEN_TYPE,
    ESCAPED_TOKEN_TYPE: ESCAPED_TOKEN_TYPE,
    SPECIAL_TOKEN_TYPE: SPECIAL_TOKEN_TYPE,
    BACKTICK_TOKEN_TYPE: BACKTICK_TOKEN_TYPE,
    BACKTICKS_TOKEN_TYPE: BACKTICKS_TOKEN_TYPE,
    IDENTIFIER_TOKEN_TYPE: IDENTIFIER_TOKEN_TYPE,
    UNASSIGNED_TOKEN_TYPE: UNASSIGNED_TOKEN_TYPE,
    MANY_DASHES_TOKEN_TYPE: MANY_DASHES_TOKEN_TYPE,
    SINGLE_HASH_TOKEN_TYPE: SINGLE_HASH_TOKEN_TYPE,
    DOUBLE_HASH_TOKEN_TYPE: DOUBLE_HASH_TOKEN_TYPE,
    TRIPLE_HASH_TOKEN_TYPE: TRIPLE_HASH_TOKEN_TYPE,
    VERTICAL_BAR_TOKEN_TYPE: VERTICAL_BAR_TOKEN_TYPE,
    QUADRUPLE_HASH_TOKEN_TYPE: QUADRUPLE_HASH_TOKEN_TYPE,
    SINGLE_ASTERISK_TOKEN_TYPE: SINGLE_ASTERISK_TOKEN_TYPE,
    DOUBLE_ASTERISK_TOKEN_TYPE: DOUBLE_ASTERISK_TOKEN_TYPE,
    TRIPLE_ASTERISK_TOKEN_TYPE: TRIPLE_ASTERISK_TOKEN_TYPE
};
var _default = tokenTypes;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90b2tlblR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgY29uc3QgV09SRF9UT0tFTl9UWVBFID0gXCJ3b3JkXCI7XG5leHBvcnQgY29uc3QgUEFUSF9UT0tFTl9UWVBFID0gXCJwYXRoXCI7XG5leHBvcnQgY29uc3QgRE9NQUlOX1RPS0VOX1RZUEUgPSBcImRvbWFpblwiO1xuZXhwb3J0IGNvbnN0IE5VTUJFUl9UT0tFTl9UWVBFID0gXCJudW1iZXJcIjtcbmV4cG9ydCBjb25zdCBEQVNIRVNfVE9LRU5fVFlQRSA9IFwiZGFzaGVzXCI7XG5leHBvcnQgY29uc3QgU0NIRU1FX1RPS0VOX1RZUEUgPSBcInNjaGVtZVwiO1xuZXhwb3J0IGNvbnN0IEVTQ0FQRURfVE9LRU5fVFlQRSA9IFwiZXNjYXBlZFwiO1xuZXhwb3J0IGNvbnN0IFNQRUNJQUxfVE9LRU5fVFlQRSA9IFwic3BlY2lhbFwiO1xuZXhwb3J0IGNvbnN0IEJBQ0tUSUNLX1RPS0VOX1RZUEUgPSBcImJhY2t0aWNrXCI7XG5leHBvcnQgY29uc3QgQkFDS1RJQ0tTX1RPS0VOX1RZUEUgPSBcImJhY2t0aWNrc1wiO1xuZXhwb3J0IGNvbnN0IElERU5USUZJRVJfVE9LRU5fVFlQRSA9IFwiaWRlbnRpZmllclwiO1xuZXhwb3J0IGNvbnN0IFVOQVNTSUdORURfVE9LRU5fVFlQRSA9IFwidW5hc3NpZ25lZFwiO1xuZXhwb3J0IGNvbnN0IE1BTllfREFTSEVTX1RPS0VOX1RZUEUgPSBcIm1hbnktZGFzaGVzXCI7XG5leHBvcnQgY29uc3QgU0lOR0xFX0hBU0hfVE9LRU5fVFlQRSA9IFwic2luZ2xlLWhhc2hcIjtcbmV4cG9ydCBjb25zdCBET1VCTEVfSEFTSF9UT0tFTl9UWVBFID0gXCJkb3VibGUtaGFzaFwiO1xuZXhwb3J0IGNvbnN0IFRSSVBMRV9IQVNIX1RPS0VOX1RZUEUgPSBcInRyaXBsZS1oYXNoXCI7XG5leHBvcnQgY29uc3QgVkVSVElDQUxfQkFSX1RPS0VOX1RZUEUgPSBcInZlcnRpY2FsLWJhclwiO1xuZXhwb3J0IGNvbnN0IFFVQURSVVBMRV9IQVNIX1RPS0VOX1RZUEUgPSBcInF1YWRydXBsZS1oYXNoXCI7XG5leHBvcnQgY29uc3QgU0lOR0xFX0FTVEVSSVNLX1RPS0VOX1RZUEUgPSBcInNpbmdsZS1hc3Rlcmlza1wiO1xuZXhwb3J0IGNvbnN0IERPVUJMRV9BU1RFUklTS19UT0tFTl9UWVBFID0gXCJkb3VibGUtYXN0ZXJpc2tcIjtcbmV4cG9ydCBjb25zdCBUUklQTEVfQVNURVJJU0tfVE9LRU5fVFlQRSA9IFwidHJpcGxlLWFzdGVyaXNrXCI7XG5cbmNvbnN0IHRva2VuVHlwZXMgPSB7XG4gIFdPUkRfVE9LRU5fVFlQRSxcbiAgUEFUSF9UT0tFTl9UWVBFLFxuICBET01BSU5fVE9LRU5fVFlQRSxcbiAgTlVNQkVSX1RPS0VOX1RZUEUsXG4gIERBU0hFU19UT0tFTl9UWVBFLFxuICBTQ0hFTUVfVE9LRU5fVFlQRSxcbiAgRVNDQVBFRF9UT0tFTl9UWVBFLFxuICBTUEVDSUFMX1RPS0VOX1RZUEUsXG4gIEJBQ0tUSUNLX1RPS0VOX1RZUEUsXG4gIEJBQ0tUSUNLU19UT0tFTl9UWVBFLFxuICBJREVOVElGSUVSX1RPS0VOX1RZUEUsXG4gIFVOQVNTSUdORURfVE9LRU5fVFlQRSxcbiAgTUFOWV9EQVNIRVNfVE9LRU5fVFlQRSxcbiAgU0lOR0xFX0hBU0hfVE9LRU5fVFlQRSxcbiAgRE9VQkxFX0hBU0hfVE9LRU5fVFlQRSxcbiAgVFJJUExFX0hBU0hfVE9LRU5fVFlQRSxcbiAgVkVSVElDQUxfQkFSX1RPS0VOX1RZUEUsXG4gIFFVQURSVVBMRV9IQVNIX1RPS0VOX1RZUEUsXG4gIFNJTkdMRV9BU1RFUklTS19UT0tFTl9UWVBFLFxuICBET1VCTEVfQVNURVJJU0tfVE9LRU5fVFlQRSxcbiAgVFJJUExFX0FTVEVSSVNLX1RPS0VOX1RZUEVcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRva2VuVHlwZXM7XG4iXSwibmFtZXMiOlsiQkFDS1RJQ0tTX1RPS0VOX1RZUEUiLCJCQUNLVElDS19UT0tFTl9UWVBFIiwiREFTSEVTX1RPS0VOX1RZUEUiLCJET01BSU5fVE9LRU5fVFlQRSIsIkRPVUJMRV9BU1RFUklTS19UT0tFTl9UWVBFIiwiRE9VQkxFX0hBU0hfVE9LRU5fVFlQRSIsIkVTQ0FQRURfVE9LRU5fVFlQRSIsIklERU5USUZJRVJfVE9LRU5fVFlQRSIsIk1BTllfREFTSEVTX1RPS0VOX1RZUEUiLCJOVU1CRVJfVE9LRU5fVFlQRSIsIlBBVEhfVE9LRU5fVFlQRSIsIlFVQURSVVBMRV9IQVNIX1RPS0VOX1RZUEUiLCJTQ0hFTUVfVE9LRU5fVFlQRSIsIlNJTkdMRV9BU1RFUklTS19UT0tFTl9UWVBFIiwiU0lOR0xFX0hBU0hfVE9LRU5fVFlQRSIsIlNQRUNJQUxfVE9LRU5fVFlQRSIsIlRSSVBMRV9BU1RFUklTS19UT0tFTl9UWVBFIiwiVFJJUExFX0hBU0hfVE9LRU5fVFlQRSIsIlVOQVNTSUdORURfVE9LRU5fVFlQRSIsIlZFUlRJQ0FMX0JBUl9UT0tFTl9UWVBFIiwiV09SRF9UT0tFTl9UWVBFIiwidG9rZW5UeXBlcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBV2FBLG9CQUFvQjtlQUFwQkE7O0lBREFDLG1CQUFtQjtlQUFuQkE7O0lBSkFDLGlCQUFpQjtlQUFqQkE7O0lBRkFDLGlCQUFpQjtlQUFqQkE7O0lBaUJBQywwQkFBMEI7ZUFBMUJBOztJQUxBQyxzQkFBc0I7ZUFBdEJBOztJQVJBQyxrQkFBa0I7ZUFBbEJBOztJQUlBQyxxQkFBcUI7ZUFBckJBOztJQUVBQyxzQkFBc0I7ZUFBdEJBOztJQVRBQyxpQkFBaUI7ZUFBakJBOztJQUZBQyxlQUFlO2VBQWZBOztJQWdCQUMseUJBQXlCO2VBQXpCQTs7SUFaQUMsaUJBQWlCO2VBQWpCQTs7SUFhQUMsMEJBQTBCO2VBQTFCQTs7SUFMQUMsc0JBQXNCO2VBQXRCQTs7SUFOQUMsa0JBQWtCO2VBQWxCQTs7SUFhQUMsMEJBQTBCO2VBQTFCQTs7SUFMQUMsc0JBQXNCO2VBQXRCQTs7SUFKQUMscUJBQXFCO2VBQXJCQTs7SUFLQUMsdUJBQXVCO2VBQXZCQTs7SUFoQkFDLGVBQWU7ZUFBZkE7O0lBOENiLE9BQTBCO2VBQTFCOzs7QUE5Q08sSUFBTUEsa0JBQWtCO0FBQ3hCLElBQU1WLGtCQUFrQjtBQUN4QixJQUFNUCxvQkFBb0I7QUFDMUIsSUFBTU0sb0JBQW9CO0FBQzFCLElBQU1QLG9CQUFvQjtBQUMxQixJQUFNVSxvQkFBb0I7QUFDMUIsSUFBTU4scUJBQXFCO0FBQzNCLElBQU1TLHFCQUFxQjtBQUMzQixJQUFNZCxzQkFBc0I7QUFDNUIsSUFBTUQsdUJBQXVCO0FBQzdCLElBQU1PLHdCQUF3QjtBQUM5QixJQUFNVyx3QkFBd0I7QUFDOUIsSUFBTVYseUJBQXlCO0FBQy9CLElBQU1NLHlCQUF5QjtBQUMvQixJQUFNVCx5QkFBeUI7QUFDL0IsSUFBTVkseUJBQXlCO0FBQy9CLElBQU1FLDBCQUEwQjtBQUNoQyxJQUFNUiw0QkFBNEI7QUFDbEMsSUFBTUUsNkJBQTZCO0FBQ25DLElBQU1ULDZCQUE2QjtBQUNuQyxJQUFNWSw2QkFBNkI7QUFFMUMsSUFBTUssYUFBYTtJQUNqQkQsaUJBQUFBO0lBQ0FWLGlCQUFBQTtJQUNBUCxtQkFBQUE7SUFDQU0sbUJBQUFBO0lBQ0FQLG1CQUFBQTtJQUNBVSxtQkFBQUE7SUFDQU4sb0JBQUFBO0lBQ0FTLG9CQUFBQTtJQUNBZCxxQkFBQUE7SUFDQUQsc0JBQUFBO0lBQ0FPLHVCQUFBQTtJQUNBVyx1QkFBQUE7SUFDQVYsd0JBQUFBO0lBQ0FNLHdCQUFBQTtJQUNBVCx3QkFBQUE7SUFDQVksd0JBQUFBO0lBQ0FFLHlCQUFBQTtJQUNBUiwyQkFBQUE7SUFDQUUsNEJBQUFBO0lBQ0FULDRCQUFBQTtJQUNBWSw0QkFBQUE7QUFDRjtJQUVBLFdBQWVLIn0=