"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return importer;
    },
    defaultContent: function() {
        return defaultContent;
    }
});
var _index = require("../index");
var _constants = require("./constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var markdownLexer = _index.MarkdownLexer.fromNothing(), markdownParser = _index.MarkdownParser.fromNothing();
function importer(filePath, context) {
    var content = contentMap[filePath] || null;
    if (content !== null) {
        var startOfContent = true, startRule = markdownParser.getStartRule(), tokens = markdownLexer.tokenise(content), node = markdownParser.parse(tokens, startRule, startOfContent), importedNode = node, importedTokens = tokens, importedClassName = classNameFromFilePath(filePath);
        Object.assign(context, {
            importedNode: importedNode,
            importedTokens: importedTokens,
            importedClassName: importedClassName
        });
    }
}
function classNameFromFilePath(filePath) {
    var className = filePath.replace(/\.md/, _constants.EMPTY_STRING);
    return className;
}
var CONTENT_PATH = "content.md", CONTENTS_PATH = "contents.md", HALF_TITLE_PATH = "half-title.md", FRONT_MATTER_PATH = "front-matter.md", INTRODUCTION_PATH = "introduction.md", GETTING_STARTED_PATH = "getting-started.md", INSTALLING_THE_CLI_PATH = "installing-the-cli.md", GETTING_TO_GRIPS_WITH_THE_IDE_PATH = "getting-to-grips-with-the-ide.md";
var defaultContent = "@ignore\n\n@include ".concat(FRONT_MATTER_PATH, "\n@include ").concat(CONTENT_PATH);
var contentContent = "@ignore\n\n@include ".concat(INTRODUCTION_PATH, "\n@include ").concat(GETTING_STARTED_PATH), contentsContent = "## Contents\n\n@contents", halfTitleContent = "# Occam", frontMatterContent = "@ignore\n\n@include ".concat(HALF_TITLE_PATH, "\n@include ").concat(CONTENTS_PATH), introductionContent = "# Introduction\n      \nI have tried to make Occam[^occam] as useable as possible but there are limits.\nAt the end of the day it is an expert system and some of its parts, not least the verifier, need detailed explanation.\nIt is the purpose of this book is to provide these explanations.\n\nThis book also goes into considerable detail on the subject of Occam's approach to language, which largely boils down to its use of grammars.\nOccam has its own language, called Florence,[^florence] but it will also support controlled natural languages in the near future.\nIndeed, the verifier cannot distinguish between these languages at all.\nThis book explains how this is possible.\n", gettingStartedContent = "# Getting started\n      \nAnother short paragraph.\n      \n@embed ".concat(INSTALLING_THE_CLI_PATH, "\n@embed ").concat(GETTING_TO_GRIPS_WITH_THE_IDE_PATH, "\n"), installingTheCLIContent = "## Installing the CLI", gettingToGripsWithTheIDEIContent = "## Getting to grips with the IDE";
var _obj;
var contentMap = (_obj = {}, _define_property(_obj, CONTENT_PATH, contentContent), _define_property(_obj, CONTENTS_PATH, contentsContent), _define_property(_obj, HALF_TITLE_PATH, halfTitleContent), _define_property(_obj, FRONT_MATTER_PATH, frontMatterContent), _define_property(_obj, INTRODUCTION_PATH, introductionContent), _define_property(_obj, GETTING_STARTED_PATH, gettingStartedContent), _define_property(_obj, INSTALLING_THE_CLI_PATH, installingTheCLIContent), _define_property(_obj, GETTING_TO_GRIPS_WITH_THE_IDE_PATH, gettingToGripsWithTheIDEIContent), _obj);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2ltcG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBNYXJrZG93bkxleGVyLCBNYXJrZG93blBhcnNlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuY29uc3QgbWFya2Rvd25MZXhlciA9IE1hcmtkb3duTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duUGFyc2VyID0gTWFya2Rvd25QYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW1wb3J0ZXIoZmlsZVBhdGgsIGNvbnRleHQpIHtcbiAgY29uc3QgY29udGVudCA9IGNvbnRlbnRNYXBbZmlsZVBhdGhdIHx8IG51bGw7XG5cbiAgaWYgKGNvbnRlbnQgIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGFydE9mQ29udGVudCA9IHRydWUsXG4gICAgICAgICAgc3RhcnRSdWxlID0gbWFya2Rvd25QYXJzZXIuZ2V0U3RhcnRSdWxlKCksXG4gICAgICAgICAgdG9rZW5zID0gbWFya2Rvd25MZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgICBub2RlID0gbWFya2Rvd25QYXJzZXIucGFyc2UodG9rZW5zLCBzdGFydFJ1bGUsIHN0YXJ0T2ZDb250ZW50KSxcbiAgICAgICAgICBpbXBvcnRlZE5vZGUgPSBub2RlLCAgLy8vXG4gICAgICAgICAgaW1wb3J0ZWRUb2tlbnMgPSB0b2tlbnMsXG4gICAgICAgICAgaW1wb3J0ZWRDbGFzc05hbWUgPSBjbGFzc05hbWVGcm9tRmlsZVBhdGgoZmlsZVBhdGgpO1xuXG4gICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgICBpbXBvcnRlZE5vZGUsXG4gICAgICBpbXBvcnRlZFRva2VucyxcbiAgICAgIGltcG9ydGVkQ2xhc3NOYW1lXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xhc3NOYW1lRnJvbUZpbGVQYXRoKGZpbGVQYXRoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IGZpbGVQYXRoLnJlcGxhY2UoL1xcLm1kLywgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5jb25zdCBDT05URU5UX1BBVEggPSBcImNvbnRlbnQubWRcIixcbiAgICAgIENPTlRFTlRTX1BBVEggPSBcImNvbnRlbnRzLm1kXCIsXG4gICAgICBIQUxGX1RJVExFX1BBVEggPSBcImhhbGYtdGl0bGUubWRcIixcbiAgICAgIEZST05UX01BVFRFUl9QQVRIID0gXCJmcm9udC1tYXR0ZXIubWRcIixcbiAgICAgIElOVFJPRFVDVElPTl9QQVRIID0gXCJpbnRyb2R1Y3Rpb24ubWRcIixcbiAgICAgIEdFVFRJTkdfU1RBUlRFRF9QQVRIID0gXCJnZXR0aW5nLXN0YXJ0ZWQubWRcIixcbiAgICAgIElOU1RBTExJTkdfVEhFX0NMSV9QQVRIID0gXCJpbnN0YWxsaW5nLXRoZS1jbGkubWRcIixcbiAgICAgIEdFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEggPSBcImdldHRpbmctdG8tZ3JpcHMtd2l0aC10aGUtaWRlLm1kXCI7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29udGVudCA9IGBAaWdub3JlXG5cbkBpbmNsdWRlICR7RlJPTlRfTUFUVEVSX1BBVEh9XG5AaW5jbHVkZSAke0NPTlRFTlRfUEFUSH1gO1xuXG5jb25zdCBjb250ZW50Q29udGVudCA9IGBAaWdub3JlXG5cbkBpbmNsdWRlICR7SU5UUk9EVUNUSU9OX1BBVEh9XG5AaW5jbHVkZSAke0dFVFRJTkdfU1RBUlRFRF9QQVRIfWAsXG5cbiAgICAgIGNvbnRlbnRzQ29udGVudCA9IGAjIyBDb250ZW50c1xuXG5AY29udGVudHNgLFxuXG4gICAgICBoYWxmVGl0bGVDb250ZW50ID0gYCMgT2NjYW1gLFxuXG4gICAgICBmcm9udE1hdHRlckNvbnRlbnQgPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0hBTEZfVElUTEVfUEFUSH1cbkBpbmNsdWRlICR7Q09OVEVOVFNfUEFUSH1gLFxuXG4gICAgICBpbnRyb2R1Y3Rpb25Db250ZW50ID0gYCMgSW50cm9kdWN0aW9uXG4gICAgICBcbkkgaGF2ZSB0cmllZCB0byBtYWtlIE9jY2FtW15vY2NhbV0gYXMgdXNlYWJsZSBhcyBwb3NzaWJsZSBidXQgdGhlcmUgYXJlIGxpbWl0cy5cbkF0IHRoZSBlbmQgb2YgdGhlIGRheSBpdCBpcyBhbiBleHBlcnQgc3lzdGVtIGFuZCBzb21lIG9mIGl0cyBwYXJ0cywgbm90IGxlYXN0IHRoZSB2ZXJpZmllciwgbmVlZCBkZXRhaWxlZCBleHBsYW5hdGlvbi5cbkl0IGlzIHRoZSBwdXJwb3NlIG9mIHRoaXMgYm9vayBpcyB0byBwcm92aWRlIHRoZXNlIGV4cGxhbmF0aW9ucy5cblxuVGhpcyBib29rIGFsc28gZ29lcyBpbnRvIGNvbnNpZGVyYWJsZSBkZXRhaWwgb24gdGhlIHN1YmplY3Qgb2YgT2NjYW0ncyBhcHByb2FjaCB0byBsYW5ndWFnZSwgd2hpY2ggbGFyZ2VseSBib2lscyBkb3duIHRvIGl0cyB1c2Ugb2YgZ3JhbW1hcnMuXG5PY2NhbSBoYXMgaXRzIG93biBsYW5ndWFnZSwgY2FsbGVkIEZsb3JlbmNlLFteZmxvcmVuY2VdIGJ1dCBpdCB3aWxsIGFsc28gc3VwcG9ydCBjb250cm9sbGVkIG5hdHVyYWwgbGFuZ3VhZ2VzIGluIHRoZSBuZWFyIGZ1dHVyZS5cbkluZGVlZCwgdGhlIHZlcmlmaWVyIGNhbm5vdCBkaXN0aW5ndWlzaCBiZXR3ZWVuIHRoZXNlIGxhbmd1YWdlcyBhdCBhbGwuXG5UaGlzIGJvb2sgZXhwbGFpbnMgaG93IHRoaXMgaXMgcG9zc2libGUuXG5gLFxuXG4gICAgICBnZXR0aW5nU3RhcnRlZENvbnRlbnQgPSBgIyBHZXR0aW5nIHN0YXJ0ZWRcbiAgICAgIFxuQW5vdGhlciBzaG9ydCBwYXJhZ3JhcGguXG4gICAgICBcbkBlbWJlZCAke0lOU1RBTExJTkdfVEhFX0NMSV9QQVRIfVxuQGVtYmVkICR7R0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSH1cbmAsXG5cbiAgICAgIGluc3RhbGxpbmdUaGVDTElDb250ZW50ID0gYCMjIEluc3RhbGxpbmcgdGhlIENMSWAsXG5cbiAgICAgIGdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50ID0gYCMjIEdldHRpbmcgdG8gZ3JpcHMgd2l0aCB0aGUgSURFYDtcblxuY29uc3QgY29udGVudE1hcCA9IHtcblxuICBbQ09OVEVOVF9QQVRIXTogY29udGVudENvbnRlbnQsXG4gIFtDT05URU5UU19QQVRIXTogY29udGVudHNDb250ZW50LFxuICBbSEFMRl9USVRMRV9QQVRIXTogaGFsZlRpdGxlQ29udGVudCxcbiAgW0ZST05UX01BVFRFUl9QQVRIXTogZnJvbnRNYXR0ZXJDb250ZW50LFxuICBbSU5UUk9EVUNUSU9OX1BBVEhdOiBpbnRyb2R1Y3Rpb25Db250ZW50LFxuICBbR0VUVElOR19TVEFSVEVEX1BBVEhdOiBnZXR0aW5nU3RhcnRlZENvbnRlbnQsXG4gIFtJTlNUQUxMSU5HX1RIRV9DTElfUEFUSF06IGluc3RhbGxpbmdUaGVDTElDb250ZW50LFxuICBbR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSF06IGdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50XG5cbn07XG4iXSwibmFtZXMiOlsiaW1wb3J0ZXIiLCJkZWZhdWx0Q29udGVudCIsIm1hcmtkb3duTGV4ZXIiLCJNYXJrZG93bkxleGVyIiwiZnJvbU5vdGhpbmciLCJtYXJrZG93blBhcnNlciIsIk1hcmtkb3duUGFyc2VyIiwiZmlsZVBhdGgiLCJjb250ZXh0IiwiY29udGVudCIsImNvbnRlbnRNYXAiLCJzdGFydE9mQ29udGVudCIsInN0YXJ0UnVsZSIsImdldFN0YXJ0UnVsZSIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwiaW1wb3J0ZWROb2RlIiwiaW1wb3J0ZWRUb2tlbnMiLCJpbXBvcnRlZENsYXNzTmFtZSIsImNsYXNzTmFtZUZyb21GaWxlUGF0aCIsIk9iamVjdCIsImFzc2lnbiIsImNsYXNzTmFtZSIsInJlcGxhY2UiLCJFTVBUWV9TVFJJTkciLCJDT05URU5UX1BBVEgiLCJDT05URU5UU19QQVRIIiwiSEFMRl9USVRMRV9QQVRIIiwiRlJPTlRfTUFUVEVSX1BBVEgiLCJJTlRST0RVQ1RJT05fUEFUSCIsIkdFVFRJTkdfU1RBUlRFRF9QQVRIIiwiSU5TVEFMTElOR19USEVfQ0xJX1BBVEgiLCJHRVRUSU5HX1RPX0dSSVBTX1dJVEhfVEhFX0lERV9QQVRIIiwiY29udGVudENvbnRlbnQiLCJjb250ZW50c0NvbnRlbnQiLCJoYWxmVGl0bGVDb250ZW50IiwiZnJvbnRNYXR0ZXJDb250ZW50IiwiaW50cm9kdWN0aW9uQ29udGVudCIsImdldHRpbmdTdGFydGVkQ29udGVudCIsImluc3RhbGxpbmdUaGVDTElDb250ZW50IiwiZ2V0dGluZ1RvR3JpcHNXaXRoVGhlSURFSUNvbnRlbnQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNBLE9Ba0JDO2VBbEJ1QkE7O0lBbUNYQyxjQUFjO2VBQWRBOzs7cUJBMUNpQzt5QkFFakI7Ozs7Ozs7Ozs7Ozs7O0FBRTdCLElBQU1DLGdCQUFnQkMsb0JBQWEsQ0FBQ0MsV0FBVyxJQUN6Q0MsaUJBQWlCQyxxQkFBYyxDQUFDRixXQUFXO0FBRWxDLFNBQVNKLFNBQVNPLFFBQVEsRUFBRUMsT0FBTztJQUNoRCxJQUFNQyxVQUFVQyxVQUFVLENBQUNILFNBQVMsSUFBSTtJQUV4QyxJQUFJRSxZQUFZLE1BQU07UUFDcEIsSUFBTUUsaUJBQWlCLE1BQ2pCQyxZQUFZUCxlQUFlUSxZQUFZLElBQ3ZDQyxTQUFTWixjQUFjYSxRQUFRLENBQUNOLFVBQ2hDTyxPQUFPWCxlQUFlWSxLQUFLLENBQUNILFFBQVFGLFdBQVdELGlCQUMvQ08sZUFBZUYsTUFDZkcsaUJBQWlCTCxRQUNqQk0sb0JBQW9CQyxzQkFBc0JkO1FBRWhEZSxPQUFPQyxNQUFNLENBQUNmLFNBQVM7WUFDckJVLGNBQUFBO1lBQ0FDLGdCQUFBQTtZQUNBQyxtQkFBQUE7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxTQUFTQyxzQkFBc0JkLFFBQVE7SUFDckMsSUFBTWlCLFlBQVlqQixTQUFTa0IsT0FBTyxDQUFDLFFBQVFDLHVCQUFZO0lBRXZELE9BQU9GO0FBQ1Q7QUFFQSxJQUFNRyxlQUFlLGNBQ2ZDLGdCQUFnQixlQUNoQkMsa0JBQWtCLGlCQUNsQkMsb0JBQW9CLG1CQUNwQkMsb0JBQW9CLG1CQUNwQkMsdUJBQXVCLHNCQUN2QkMsMEJBQTBCLHlCQUMxQkMscUNBQXFDO0FBRXBDLElBQU1qQyxpQkFBaUIsQUFBQyx1QkFHcEIwQixPQURBRyxtQkFBa0IsZUFDTCxPQUFiSDtBQUVYLElBQU1RLGlCQUFpQixBQUFDLHVCQUdiSCxPQURBRCxtQkFBa0IsZUFDRyxPQUFyQkMsdUJBRUxJLGtCQUFtQiw0QkFJbkJDLG1CQUFvQixXQUVwQkMscUJBQXFCLEFBQUMsdUJBR2pCVixPQURBQyxpQkFBZ0IsZUFDRixPQUFkRCxnQkFFTFcsc0JBQXVCLDhxQkFZdkJDLHdCQUF3QixBQUFDLHVFQUt0Qk4sT0FEQUQseUJBQXdCLGFBQ1csT0FBbkNDLG9DQUFtQyxPQUd0Q08sMEJBQTJCLHlCQUUzQkMsbUNBQW9DO0lBRXZCO0FBQW5CLElBQU1oQyxjQUFhLFdBRWpCLGlCQUZpQixNQUVoQmlCLGNBQWVRLGlCQUNoQixpQkFIaUIsTUFHaEJQLGVBQWdCUSxrQkFDakIsaUJBSmlCLE1BSWhCUCxpQkFBa0JRLG1CQUNuQixpQkFMaUIsTUFLaEJQLG1CQUFvQlEscUJBQ3JCLGlCQU5pQixNQU1oQlAsbUJBQW9CUSxzQkFDckIsaUJBUGlCLE1BT2hCUCxzQkFBdUJRLHdCQUN4QixpQkFSaUIsTUFRaEJQLHlCQUEwQlEsMEJBQzNCLGlCQVRpQixNQVNoQlAsb0NBQXFDUSxtQ0FUckIifQ==