"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_PATH: function() {
        return DEFAULT_PATH;
    },
    default: function() {
        return importer;
    }
});
var _index = require("../index");
var _constants = require("./constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var markdownLexer = _index.MarkdownLexer.fromNothing(), markdownParser = _index.MarkdownParser.fromNothing();
var DEFAULT_PATH = "default.md";
function importer(filePath, context) {
    var content = contentMap[filePath] || null;
    if (content !== null) {
        var startOfContent = true, startRule = markdownParser.getStartRule(), tokens = markdownLexer.tokenise(content), node = markdownParser.parse(tokens, startRule, startOfContent), importedNode = node, importedTokens = tokens, importedClassName = classNameFromFilePath(filePath);
        Object.assign(context, {
            importedNode: importedNode,
            importedTokens: importedTokens,
            importedClassName: importedClassName
        });
    }
}
function classNameFromFilePath(filePath) {
    var className = filePath.replace(/\.md/, _constants.EMPTY_STRING);
    return className;
}
var CONTENT_PATH = "content.md", CONTENTS_PATH = "contents.md", HALF_TITLE_PATH = "half-title.md", FRONT_MATTER_PATH = "front-matter.md", INTRODUCTION_PATH = "introduction.md", GETTING_STARTED_PATH = "getting-started.md", INSTALLING_THE_CLI_PATH = "installing-the-cli.md", GETTING_TO_GRIPS_WITH_THE_IDE_PATH = "getting-to-grips-with-the-ide.md";
var defaultContent = "@embed ".concat(FRONT_MATTER_PATH, "\n@embed ").concat(CONTENT_PATH), contentContent = "@embed ".concat(INTRODUCTION_PATH, "\n@embed ").concat(GETTING_STARTED_PATH), contentsContent = "## Contents\n\n@contents", halfTitleContent = "# Occam", frontMatterContent = "@embed ".concat(HALF_TITLE_PATH, "\n@embed ").concat(CONTENTS_PATH), introductionContent = "# Introduction\n      \nA short paragraph.", gettingStartedContent = "# Getting started\n      \nAnother short paragraph.\n      \n@embed ".concat(INSTALLING_THE_CLI_PATH, "\n@embed ").concat(GETTING_TO_GRIPS_WITH_THE_IDE_PATH), installingTheCLIContent = "## Installing the CLI", gettingToGripsWithTheIDEIContent = "## Getting to grips with the IDE";
var _obj;
var contentMap = (_obj = {}, _define_property(_obj, DEFAULT_PATH, defaultContent), _define_property(_obj, CONTENT_PATH, contentContent), _define_property(_obj, CONTENTS_PATH, contentsContent), _define_property(_obj, HALF_TITLE_PATH, halfTitleContent), _define_property(_obj, FRONT_MATTER_PATH, frontMatterContent), _define_property(_obj, INTRODUCTION_PATH, introductionContent), _define_property(_obj, GETTING_STARTED_PATH, gettingStartedContent), _define_property(_obj, INSTALLING_THE_CLI_PATH, installingTheCLIContent), _define_property(_obj, GETTING_TO_GRIPS_WITH_THE_IDE_PATH, gettingToGripsWithTheIDEIContent), _obj);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2ltcG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBNYXJrZG93bkxleGVyLCBNYXJrZG93blBhcnNlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuY29uc3QgbWFya2Rvd25MZXhlciA9IE1hcmtkb3duTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duUGFyc2VyID0gTWFya2Rvd25QYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUEFUSCA9IFwiZGVmYXVsdC5tZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbXBvcnRlcihmaWxlUGF0aCwgY29udGV4dCkge1xuICBjb25zdCBjb250ZW50ID0gY29udGVudE1hcFtmaWxlUGF0aF0gfHwgbnVsbDtcblxuICBpZiAoY29udGVudCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0YXJ0T2ZDb250ZW50ID0gdHJ1ZSxcbiAgICAgICAgICBzdGFydFJ1bGUgPSBtYXJrZG93blBhcnNlci5nZXRTdGFydFJ1bGUoKSxcbiAgICAgICAgICB0b2tlbnMgPSBtYXJrZG93bkxleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICAgIG5vZGUgPSBtYXJrZG93blBhcnNlci5wYXJzZSh0b2tlbnMsIHN0YXJ0UnVsZSwgc3RhcnRPZkNvbnRlbnQpLFxuICAgICAgICAgIGltcG9ydGVkTm9kZSA9IG5vZGUsICAvLy9cbiAgICAgICAgICBpbXBvcnRlZFRva2VucyA9IHRva2VucyxcbiAgICAgICAgICBpbXBvcnRlZENsYXNzTmFtZSA9IGNsYXNzTmFtZUZyb21GaWxlUGF0aChmaWxlUGF0aCk7XG5cbiAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICAgIGltcG9ydGVkTm9kZSxcbiAgICAgIGltcG9ydGVkVG9rZW5zLFxuICAgICAgaW1wb3J0ZWRDbGFzc05hbWVcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGFzc05hbWVGcm9tRmlsZVBhdGgoZmlsZVBhdGgpIHtcbiAgY29uc3QgY2xhc3NOYW1lID0gZmlsZVBhdGgucmVwbGFjZSgvXFwubWQvLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBjbGFzc05hbWU7XG59XG5cbmNvbnN0IENPTlRFTlRfUEFUSCA9IFwiY29udGVudC5tZFwiLFxuICAgICAgQ09OVEVOVFNfUEFUSCA9IFwiY29udGVudHMubWRcIixcbiAgICAgIEhBTEZfVElUTEVfUEFUSCA9IFwiaGFsZi10aXRsZS5tZFwiLFxuICAgICAgRlJPTlRfTUFUVEVSX1BBVEggPSBcImZyb250LW1hdHRlci5tZFwiLFxuICAgICAgSU5UUk9EVUNUSU9OX1BBVEggPSBcImludHJvZHVjdGlvbi5tZFwiLFxuICAgICAgR0VUVElOR19TVEFSVEVEX1BBVEggPSBcImdldHRpbmctc3RhcnRlZC5tZFwiLFxuICAgICAgSU5TVEFMTElOR19USEVfQ0xJX1BBVEggPSBcImluc3RhbGxpbmctdGhlLWNsaS5tZFwiLFxuICAgICAgR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSCA9IFwiZ2V0dGluZy10by1ncmlwcy13aXRoLXRoZS1pZGUubWRcIjtcblxuY29uc3QgZGVmYXVsdENvbnRlbnQgPSBgQGVtYmVkICR7RlJPTlRfTUFUVEVSX1BBVEh9XG5AZW1iZWQgJHtDT05URU5UX1BBVEh9YCxcblxuICAgICAgY29udGVudENvbnRlbnQgPSBgQGVtYmVkICR7SU5UUk9EVUNUSU9OX1BBVEh9XG5AZW1iZWQgJHtHRVRUSU5HX1NUQVJURURfUEFUSH1gLFxuXG4gICAgICBjb250ZW50c0NvbnRlbnQgPSBgIyMgQ29udGVudHNcblxuQGNvbnRlbnRzYCxcblxuICAgICAgaGFsZlRpdGxlQ29udGVudCA9IGAjIE9jY2FtYCxcblxuICAgICAgZnJvbnRNYXR0ZXJDb250ZW50ID0gYEBlbWJlZCAke0hBTEZfVElUTEVfUEFUSH1cbkBlbWJlZCAke0NPTlRFTlRTX1BBVEh9YCxcblxuICAgICAgaW50cm9kdWN0aW9uQ29udGVudCA9IGAjIEludHJvZHVjdGlvblxuICAgICAgXG5BIHNob3J0IHBhcmFncmFwaC5gLFxuXG4gICAgICBnZXR0aW5nU3RhcnRlZENvbnRlbnQgPSBgIyBHZXR0aW5nIHN0YXJ0ZWRcbiAgICAgIFxuQW5vdGhlciBzaG9ydCBwYXJhZ3JhcGguXG4gICAgICBcbkBlbWJlZCAke0lOU1RBTExJTkdfVEhFX0NMSV9QQVRIfVxuQGVtYmVkICR7R0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSH1gLFxuXG4gICAgICBpbnN0YWxsaW5nVGhlQ0xJQ29udGVudCA9IGAjIyBJbnN0YWxsaW5nIHRoZSBDTElgLFxuXG4gICAgICBnZXR0aW5nVG9Hcmlwc1dpdGhUaGVJREVJQ29udGVudCA9IGAjIyBHZXR0aW5nIHRvIGdyaXBzIHdpdGggdGhlIElERWA7XG5cbmNvbnN0IGNvbnRlbnRNYXAgPSB7XG5cbiAgW0RFRkFVTFRfUEFUSF06IGRlZmF1bHRDb250ZW50LFxuICBbQ09OVEVOVF9QQVRIXTogY29udGVudENvbnRlbnQsXG4gIFtDT05URU5UU19QQVRIXTogY29udGVudHNDb250ZW50LFxuICBbSEFMRl9USVRMRV9QQVRIXTogaGFsZlRpdGxlQ29udGVudCxcbiAgW0ZST05UX01BVFRFUl9QQVRIXTogZnJvbnRNYXR0ZXJDb250ZW50LFxuICBbSU5UUk9EVUNUSU9OX1BBVEhdOiBpbnRyb2R1Y3Rpb25Db250ZW50LFxuICBbR0VUVElOR19TVEFSVEVEX1BBVEhdOiBnZXR0aW5nU3RhcnRlZENvbnRlbnQsXG4gIFtJTlNUQUxMSU5HX1RIRV9DTElfUEFUSF06IGluc3RhbGxpbmdUaGVDTElDb250ZW50LFxuICBbR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSF06IGdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50XG5cbn07XG4iXSwibmFtZXMiOlsiREVGQVVMVF9QQVRIIiwiaW1wb3J0ZXIiLCJtYXJrZG93bkxleGVyIiwiTWFya2Rvd25MZXhlciIsImZyb21Ob3RoaW5nIiwibWFya2Rvd25QYXJzZXIiLCJNYXJrZG93blBhcnNlciIsImZpbGVQYXRoIiwiY29udGV4dCIsImNvbnRlbnQiLCJjb250ZW50TWFwIiwic3RhcnRPZkNvbnRlbnQiLCJzdGFydFJ1bGUiLCJnZXRTdGFydFJ1bGUiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsImltcG9ydGVkTm9kZSIsImltcG9ydGVkVG9rZW5zIiwiaW1wb3J0ZWRDbGFzc05hbWUiLCJjbGFzc05hbWVGcm9tRmlsZVBhdGgiLCJPYmplY3QiLCJhc3NpZ24iLCJjbGFzc05hbWUiLCJyZXBsYWNlIiwiRU1QVFlfU1RSSU5HIiwiQ09OVEVOVF9QQVRIIiwiQ09OVEVOVFNfUEFUSCIsIkhBTEZfVElUTEVfUEFUSCIsIkZST05UX01BVFRFUl9QQVRIIiwiSU5UUk9EVUNUSU9OX1BBVEgiLCJHRVRUSU5HX1NUQVJURURfUEFUSCIsIklOU1RBTExJTkdfVEhFX0NMSV9QQVRIIiwiR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSCIsImRlZmF1bHRDb250ZW50IiwiY29udGVudENvbnRlbnQiLCJjb250ZW50c0NvbnRlbnQiLCJoYWxmVGl0bGVDb250ZW50IiwiZnJvbnRNYXR0ZXJDb250ZW50IiwiaW50cm9kdWN0aW9uQ29udGVudCIsImdldHRpbmdTdGFydGVkQ29udGVudCIsImluc3RhbGxpbmdUaGVDTElDb250ZW50IiwiZ2V0dGluZ1RvR3JpcHNXaXRoVGhlSURFSUNvbnRlbnQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNhQSxZQUFZO2VBQVpBOztJQUViLE9Ba0JDO2VBbEJ1QkM7OztxQkFUc0I7eUJBRWpCOzs7Ozs7Ozs7Ozs7OztBQUU3QixJQUFNQyxnQkFBZ0JDLG9CQUFhLENBQUNDLFdBQVcsSUFDekNDLGlCQUFpQkMscUJBQWMsQ0FBQ0YsV0FBVztBQUUxQyxJQUFNSixlQUFlO0FBRWIsU0FBU0MsU0FBU00sUUFBUSxFQUFFQyxPQUFPO0lBQ2hELElBQU1DLFVBQVVDLFVBQVUsQ0FBQ0gsU0FBUyxJQUFJO0lBRXhDLElBQUlFLFlBQVksTUFBTTtRQUNwQixJQUFNRSxpQkFBaUIsTUFDakJDLFlBQVlQLGVBQWVRLFlBQVksSUFDdkNDLFNBQVNaLGNBQWNhLFFBQVEsQ0FBQ04sVUFDaENPLE9BQU9YLGVBQWVZLEtBQUssQ0FBQ0gsUUFBUUYsV0FBV0QsaUJBQy9DTyxlQUFlRixNQUNmRyxpQkFBaUJMLFFBQ2pCTSxvQkFBb0JDLHNCQUFzQmQ7UUFFaERlLE9BQU9DLE1BQU0sQ0FBQ2YsU0FBUztZQUNyQlUsY0FBQUE7WUFDQUMsZ0JBQUFBO1lBQ0FDLG1CQUFBQTtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNDLHNCQUFzQmQsUUFBUTtJQUNyQyxJQUFNaUIsWUFBWWpCLFNBQVNrQixPQUFPLENBQUMsUUFBUUMsdUJBQVk7SUFFdkQsT0FBT0Y7QUFDVDtBQUVBLElBQU1HLGVBQWUsY0FDZkMsZ0JBQWdCLGVBQ2hCQyxrQkFBa0IsaUJBQ2xCQyxvQkFBb0IsbUJBQ3BCQyxvQkFBb0IsbUJBQ3BCQyx1QkFBdUIsc0JBQ3ZCQywwQkFBMEIseUJBQzFCQyxxQ0FBcUM7QUFFM0MsSUFBTUMsaUJBQWlCLEFBQUMsVUFDZlIsT0FEd0JHLG1CQUFrQixhQUM3QixPQUFiSCxlQUVIUyxpQkFBaUIsQUFBQyxVQUNmSixPQUR3QkQsbUJBQWtCLGFBQ3JCLE9BQXJCQyx1QkFFSEssa0JBQW1CLDRCQUluQkMsbUJBQW9CLFdBRXBCQyxxQkFBcUIsQUFBQyxVQUNuQlgsT0FENEJDLGlCQUFnQixhQUM5QixPQUFkRCxnQkFFSFksc0JBQXVCLDhDQUl2QkMsd0JBQXdCLEFBQUMsdUVBS3RCUCxPQURBRCx5QkFBd0IsYUFDVyxPQUFuQ0MscUNBRUhRLDBCQUEyQix5QkFFM0JDLG1DQUFvQztJQUV2QjtBQUFuQixJQUFNakMsY0FBYSxXQUVqQixpQkFGaUIsTUFFaEJWLGNBQWVtQyxpQkFDaEIsaUJBSGlCLE1BR2hCUixjQUFlUyxpQkFDaEIsaUJBSmlCLE1BSWhCUixlQUFnQlMsa0JBQ2pCLGlCQUxpQixNQUtoQlIsaUJBQWtCUyxtQkFDbkIsaUJBTmlCLE1BTWhCUixtQkFBb0JTLHFCQUNyQixpQkFQaUIsTUFPaEJSLG1CQUFvQlMsc0JBQ3JCLGlCQVJpQixNQVFoQlIsc0JBQXVCUyx3QkFDeEIsaUJBVGlCLE1BU2hCUix5QkFBMEJTLDBCQUMzQixpQkFWaUIsTUFVaEJSLG9DQUFxQ1MsbUNBVnJCIn0=