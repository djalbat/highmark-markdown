"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return importer;
    },
    initialMarkdown: function() {
        return initialMarkdown;
    }
});
var _index = require("../index");
var _constants = require("./constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var markdownLexer = _index.MarkdownLexer.fromNothing(), markdownParser = _index.MarkdownParser.fromNothing();
function importer(filePath, context) {
    var content = contentMap[filePath] || null;
    if (content !== null) {
        var startRule = markdownParser.getStartRule(), tokens = markdownLexer.tokenise(content), node = markdownParser.parse(tokens, startRule), importedNode = node, importedTokens = tokens, importedClassName = classNameFromFilePath(filePath);
        Object.assign(context, {
            importedNode: importedNode,
            importedTokens: importedTokens,
            importedClassName: importedClassName
        });
    }
}
function classNameFromFilePath(filePath) {
    var className = filePath.replace(/\.md/, _constants.EMPTY_STRING);
    return className;
}
var INDEX_PATH = "index.md", CONTENT_PATH = "content.md", CONTENTS_PATH = "contents.md", HALF_TITLE_PATH = "half-title.md", FRONT_MATTER_PATH = "front-matter.md", INTRODUCTION_PATH = "introduction.md", GETTING_STARTED_PATH = "getting-started.md", INSTALLING_THE_CLI_PATH = "installing-the-cli.md", GETTING_TO_GRIPS_WITH_THE_IDE_PATH = "getting-to-grips-with-the-ide.md";
var initialMarkdown = "\n@embed ".concat(INSTALLING_THE_CLI_PATH, "\n\n");
// export const initialMarkdown = `@ignore
//
// @include ${FRONT_MATTER_PATH}
// @include ${CONTENT_PATH}
// @include ${INDEX_PATH}
// `;
var indexContent = "## Index\n\n@index", contentContent = "@ignore\n\n@include ".concat(INTRODUCTION_PATH, "\n@include ").concat(GETTING_STARTED_PATH), contentsContent = "## Contents\n\n@contents", halfTitleContent = "# Occam", frontMatterContent = "@ignore\n\n@include ".concat(HALF_TITLE_PATH, "\n@include ").concat(CONTENTS_PATH), introductionContent = "# Introduction\n      \nConstructor.\n\n@footnotes\n\n@pageNumber\n", gettingStartedContent = "# Getting started\n      \nAnother short paragraph with a reference to a footnote[^occam].\n\n[^occam]: The word Occam is used somewhat nebulously here.\nIt is most often associated with Occam's IDE but in fact it encompasses a range of software and services.\nThis book explains these divers parts and there is a companion book, called The Foundations of Symbolic Reasoning, that covers the underlying theory.\n\n@footnotes\n\n@embed ".concat(INSTALLING_THE_CLI_PATH, "\n@embed ").concat(GETTING_TO_GRIPS_WITH_THE_IDE_PATH, "\n\n@pageNumber\n"), installingTheCLIContent = "## Installing the CLI\n", gettingToGripsWithTheIDEIContent = "## Getting to grips with the IDE\n            \n* An unordered list to test...\n* ...the indexing.\n      \n1. As well as an...\n2. ...ordered list.\n      \n";
var _obj;
var contentMap = (_obj = {}, _define_property(_obj, INDEX_PATH, indexContent), _define_property(_obj, CONTENT_PATH, contentContent), _define_property(_obj, CONTENTS_PATH, contentsContent), _define_property(_obj, HALF_TITLE_PATH, halfTitleContent), _define_property(_obj, FRONT_MATTER_PATH, frontMatterContent), _define_property(_obj, INTRODUCTION_PATH, introductionContent), _define_property(_obj, GETTING_STARTED_PATH, gettingStartedContent), _define_property(_obj, INSTALLING_THE_CLI_PATH, installingTheCLIContent), _define_property(_obj, GETTING_TO_GRIPS_WITH_THE_IDE_PATH, gettingToGripsWithTheIDEIContent), _obj);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2ltcG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBNYXJrZG93bkxleGVyLCBNYXJrZG93blBhcnNlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuY29uc3QgbWFya2Rvd25MZXhlciA9IE1hcmtkb3duTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duUGFyc2VyID0gTWFya2Rvd25QYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW1wb3J0ZXIoZmlsZVBhdGgsIGNvbnRleHQpIHtcbiAgY29uc3QgY29udGVudCA9IGNvbnRlbnRNYXBbZmlsZVBhdGhdIHx8IG51bGw7XG5cbiAgaWYgKGNvbnRlbnQgIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGFydFJ1bGUgPSBtYXJrZG93blBhcnNlci5nZXRTdGFydFJ1bGUoKSxcbiAgICAgICAgICB0b2tlbnMgPSBtYXJrZG93bkxleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICAgIG5vZGUgPSBtYXJrZG93blBhcnNlci5wYXJzZSh0b2tlbnMsIHN0YXJ0UnVsZSksXG4gICAgICAgICAgaW1wb3J0ZWROb2RlID0gbm9kZSwgIC8vL1xuICAgICAgICAgIGltcG9ydGVkVG9rZW5zID0gdG9rZW5zLFxuICAgICAgICAgIGltcG9ydGVkQ2xhc3NOYW1lID0gY2xhc3NOYW1lRnJvbUZpbGVQYXRoKGZpbGVQYXRoKTtcblxuICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgICAgaW1wb3J0ZWROb2RlLFxuICAgICAgaW1wb3J0ZWRUb2tlbnMsXG4gICAgICBpbXBvcnRlZENsYXNzTmFtZVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsYXNzTmFtZUZyb21GaWxlUGF0aChmaWxlUGF0aCkge1xuICBjb25zdCBjbGFzc05hbWUgPSBmaWxlUGF0aC5yZXBsYWNlKC9cXC5tZC8sIEVNUFRZX1NUUklORyk7XG5cbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxuY29uc3QgSU5ERVhfUEFUSCA9IFwiaW5kZXgubWRcIixcbiAgICAgIENPTlRFTlRfUEFUSCA9IFwiY29udGVudC5tZFwiLFxuICAgICAgQ09OVEVOVFNfUEFUSCA9IFwiY29udGVudHMubWRcIixcbiAgICAgIEhBTEZfVElUTEVfUEFUSCA9IFwiaGFsZi10aXRsZS5tZFwiLFxuICAgICAgRlJPTlRfTUFUVEVSX1BBVEggPSBcImZyb250LW1hdHRlci5tZFwiLFxuICAgICAgSU5UUk9EVUNUSU9OX1BBVEggPSBcImludHJvZHVjdGlvbi5tZFwiLFxuICAgICAgR0VUVElOR19TVEFSVEVEX1BBVEggPSBcImdldHRpbmctc3RhcnRlZC5tZFwiLFxuICAgICAgSU5TVEFMTElOR19USEVfQ0xJX1BBVEggPSBcImluc3RhbGxpbmctdGhlLWNsaS5tZFwiLFxuICAgICAgR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSCA9IFwiZ2V0dGluZy10by1ncmlwcy13aXRoLXRoZS1pZGUubWRcIjtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxNYXJrZG93biA9IGBcbkBlbWJlZCAke0lOU1RBTExJTkdfVEhFX0NMSV9QQVRIfVxuXG5gO1xuXG4vLyBleHBvcnQgY29uc3QgaW5pdGlhbE1hcmtkb3duID0gYEBpZ25vcmVcbi8vXG4vLyBAaW5jbHVkZSAke0ZST05UX01BVFRFUl9QQVRIfVxuLy8gQGluY2x1ZGUgJHtDT05URU5UX1BBVEh9XG4vLyBAaW5jbHVkZSAke0lOREVYX1BBVEh9XG4vLyBgO1xuXG5jb25zdCBpbmRleENvbnRlbnQgPSBgIyMgSW5kZXhcblxuQGluZGV4YCxcblxuICAgICAgY29udGVudENvbnRlbnQgPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0lOVFJPRFVDVElPTl9QQVRIfVxuQGluY2x1ZGUgJHtHRVRUSU5HX1NUQVJURURfUEFUSH1gLFxuXG4gICAgICBjb250ZW50c0NvbnRlbnQgPSBgIyMgQ29udGVudHNcblxuQGNvbnRlbnRzYCxcblxuICAgICAgaGFsZlRpdGxlQ29udGVudCA9IGAjIE9jY2FtYCxcblxuICAgICAgZnJvbnRNYXR0ZXJDb250ZW50ID0gYEBpZ25vcmVcblxuQGluY2x1ZGUgJHtIQUxGX1RJVExFX1BBVEh9XG5AaW5jbHVkZSAke0NPTlRFTlRTX1BBVEh9YCxcblxuICAgICAgaW50cm9kdWN0aW9uQ29udGVudCA9IGAjIEludHJvZHVjdGlvblxuICAgICAgXG5Db25zdHJ1Y3Rvci5cblxuQGZvb3Rub3Rlc1xuXG5AcGFnZU51bWJlclxuYCxcblxuICAgICAgZ2V0dGluZ1N0YXJ0ZWRDb250ZW50ID0gYCMgR2V0dGluZyBzdGFydGVkXG4gICAgICBcbkFub3RoZXIgc2hvcnQgcGFyYWdyYXBoIHdpdGggYSByZWZlcmVuY2UgdG8gYSBmb290bm90ZVteb2NjYW1dLlxuXG5bXm9jY2FtXTogVGhlIHdvcmQgT2NjYW0gaXMgdXNlZCBzb21ld2hhdCBuZWJ1bG91c2x5IGhlcmUuXG5JdCBpcyBtb3N0IG9mdGVuIGFzc29jaWF0ZWQgd2l0aCBPY2NhbSdzIElERSBidXQgaW4gZmFjdCBpdCBlbmNvbXBhc3NlcyBhIHJhbmdlIG9mIHNvZnR3YXJlIGFuZCBzZXJ2aWNlcy5cblRoaXMgYm9vayBleHBsYWlucyB0aGVzZSBkaXZlcnMgcGFydHMgYW5kIHRoZXJlIGlzIGEgY29tcGFuaW9uIGJvb2ssIGNhbGxlZCBUaGUgRm91bmRhdGlvbnMgb2YgU3ltYm9saWMgUmVhc29uaW5nLCB0aGF0IGNvdmVycyB0aGUgdW5kZXJseWluZyB0aGVvcnkuXG5cbkBmb290bm90ZXNcblxuQGVtYmVkICR7SU5TVEFMTElOR19USEVfQ0xJX1BBVEh9XG5AZW1iZWQgJHtHRVRUSU5HX1RPX0dSSVBTX1dJVEhfVEhFX0lERV9QQVRIfVxuXG5AcGFnZU51bWJlclxuYCxcblxuICAgICAgaW5zdGFsbGluZ1RoZUNMSUNvbnRlbnQgPSBgIyMgSW5zdGFsbGluZyB0aGUgQ0xJXG5gLFxuXG4gICAgICBnZXR0aW5nVG9Hcmlwc1dpdGhUaGVJREVJQ29udGVudCA9IGAjIyBHZXR0aW5nIHRvIGdyaXBzIHdpdGggdGhlIElERVxuICAgICAgICAgICAgXG4qIEFuIHVub3JkZXJlZCBsaXN0IHRvIHRlc3QuLi5cbiogLi4udGhlIGluZGV4aW5nLlxuICAgICAgXG4xLiBBcyB3ZWxsIGFzIGFuLi4uXG4yLiAuLi5vcmRlcmVkIGxpc3QuXG4gICAgICBcbmA7XG5cbmNvbnN0IGNvbnRlbnRNYXAgPSB7XG5cbiAgW0lOREVYX1BBVEhdOiBpbmRleENvbnRlbnQsXG4gIFtDT05URU5UX1BBVEhdOiBjb250ZW50Q29udGVudCxcbiAgW0NPTlRFTlRTX1BBVEhdOiBjb250ZW50c0NvbnRlbnQsXG4gIFtIQUxGX1RJVExFX1BBVEhdOiBoYWxmVGl0bGVDb250ZW50LFxuICBbRlJPTlRfTUFUVEVSX1BBVEhdOiBmcm9udE1hdHRlckNvbnRlbnQsXG4gIFtJTlRST0RVQ1RJT05fUEFUSF06IGludHJvZHVjdGlvbkNvbnRlbnQsXG4gIFtHRVRUSU5HX1NUQVJURURfUEFUSF06IGdldHRpbmdTdGFydGVkQ29udGVudCxcbiAgW0lOU1RBTExJTkdfVEhFX0NMSV9QQVRIXTogaW5zdGFsbGluZ1RoZUNMSUNvbnRlbnQsXG4gIFtHRVRUSU5HX1RPX0dSSVBTX1dJVEhfVEhFX0lERV9QQVRIXTogZ2V0dGluZ1RvR3JpcHNXaXRoVGhlSURFSUNvbnRlbnRcblxufTtcbiJdLCJuYW1lcyI6WyJpbXBvcnRlciIsImluaXRpYWxNYXJrZG93biIsIm1hcmtkb3duTGV4ZXIiLCJNYXJrZG93bkxleGVyIiwiZnJvbU5vdGhpbmciLCJtYXJrZG93blBhcnNlciIsIk1hcmtkb3duUGFyc2VyIiwiZmlsZVBhdGgiLCJjb250ZXh0IiwiY29udGVudCIsImNvbnRlbnRNYXAiLCJzdGFydFJ1bGUiLCJnZXRTdGFydFJ1bGUiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsImltcG9ydGVkTm9kZSIsImltcG9ydGVkVG9rZW5zIiwiaW1wb3J0ZWRDbGFzc05hbWUiLCJjbGFzc05hbWVGcm9tRmlsZVBhdGgiLCJPYmplY3QiLCJhc3NpZ24iLCJjbGFzc05hbWUiLCJyZXBsYWNlIiwiRU1QVFlfU1RSSU5HIiwiSU5ERVhfUEFUSCIsIkNPTlRFTlRfUEFUSCIsIkNPTlRFTlRTX1BBVEgiLCJIQUxGX1RJVExFX1BBVEgiLCJGUk9OVF9NQVRURVJfUEFUSCIsIklOVFJPRFVDVElPTl9QQVRIIiwiR0VUVElOR19TVEFSVEVEX1BBVEgiLCJJTlNUQUxMSU5HX1RIRV9DTElfUEFUSCIsIkdFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEgiLCJpbmRleENvbnRlbnQiLCJjb250ZW50Q29udGVudCIsImNvbnRlbnRzQ29udGVudCIsImhhbGZUaXRsZUNvbnRlbnQiLCJmcm9udE1hdHRlckNvbnRlbnQiLCJpbnRyb2R1Y3Rpb25Db250ZW50IiwiZ2V0dGluZ1N0YXJ0ZWRDb250ZW50IiwiaW5zdGFsbGluZ1RoZUNMSUNvbnRlbnQiLCJnZXR0aW5nVG9Hcmlwc1dpdGhUaGVJREVJQ29udGVudCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBU0EsT0FpQkM7ZUFqQnVCQTs7SUFtQ1hDLGVBQWU7ZUFBZkE7OztxQkExQ2lDO3lCQUVqQjs7Ozs7Ozs7Ozs7Ozs7QUFFN0IsSUFBTUMsZ0JBQWdCQyxvQkFBYSxDQUFDQyxXQUFXLElBQ3pDQyxpQkFBaUJDLHFCQUFjLENBQUNGLFdBQVc7QUFFbEMsU0FBU0osU0FBU08sUUFBUSxFQUFFQyxPQUFPO0lBQ2hELElBQU1DLFVBQVVDLFVBQVUsQ0FBQ0gsU0FBUyxJQUFJO0lBRXhDLElBQUlFLFlBQVksTUFBTTtRQUNwQixJQUFNRSxZQUFZTixlQUFlTyxZQUFZLElBQ3ZDQyxTQUFTWCxjQUFjWSxRQUFRLENBQUNMLFVBQ2hDTSxPQUFPVixlQUFlVyxLQUFLLENBQUNILFFBQVFGLFlBQ3BDTSxlQUFlRixNQUNmRyxpQkFBaUJMLFFBQ2pCTSxvQkFBb0JDLHNCQUFzQmI7UUFFaERjLE9BQU9DLE1BQU0sQ0FBQ2QsU0FBUztZQUNyQlMsY0FBQUE7WUFDQUMsZ0JBQUFBO1lBQ0FDLG1CQUFBQTtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNDLHNCQUFzQmIsUUFBUTtJQUNyQyxJQUFNZ0IsWUFBWWhCLFNBQVNpQixPQUFPLENBQUMsUUFBUUMsdUJBQVk7SUFFdkQsT0FBT0Y7QUFDVDtBQUVBLElBQU1HLGFBQWEsWUFDYkMsZUFBZSxjQUNmQyxnQkFBZ0IsZUFDaEJDLGtCQUFrQixpQkFDbEJDLG9CQUFvQixtQkFDcEJDLG9CQUFvQixtQkFDcEJDLHVCQUF1QixzQkFDdkJDLDBCQUEwQix5QkFDMUJDLHFDQUFxQztBQUVwQyxJQUFNakMsa0JBQWtCLEFBQUMsWUFDQyxPQUF4QmdDLHlCQUF3QjtBQUlqQywwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGdDQUFnQztBQUNoQywyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLEtBQUs7QUFFTCxJQUFNRSxlQUFnQixzQkFJaEJDLGlCQUFpQixBQUFDLHVCQUdiSixPQURBRCxtQkFBa0IsZUFDRyxPQUFyQkMsdUJBRUxLLGtCQUFtQiw0QkFJbkJDLG1CQUFvQixXQUVwQkMscUJBQXFCLEFBQUMsdUJBR2pCWCxPQURBQyxpQkFBZ0IsZUFDRixPQUFkRCxnQkFFTFksc0JBQXVCLHVFQVN2QkMsd0JBQXdCLEFBQUMsc2JBV3RCUCxPQURBRCx5QkFBd0IsYUFDVyxPQUFuQ0Msb0NBQW1DLHNCQUt0Q1EsMEJBQTJCLDJCQUczQkMsbUNBQW9DO0lBVXZCO0FBQW5CLElBQU1qQyxjQUFhLFdBRWpCLGlCQUZpQixNQUVoQmdCLFlBQWFTLGVBQ2QsaUJBSGlCLE1BR2hCUixjQUFlUyxpQkFDaEIsaUJBSmlCLE1BSWhCUixlQUFnQlMsa0JBQ2pCLGlCQUxpQixNQUtoQlIsaUJBQWtCUyxtQkFDbkIsaUJBTmlCLE1BTWhCUixtQkFBb0JTLHFCQUNyQixpQkFQaUIsTUFPaEJSLG1CQUFvQlMsc0JBQ3JCLGlCQVJpQixNQVFoQlIsc0JBQXVCUyx3QkFDeEIsaUJBVGlCLE1BU2hCUix5QkFBMEJTLDBCQUMzQixpQkFWaUIsTUFVaEJSLG9DQUFxQ1MsbUNBVnJCIn0=