"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    importer: function() {
        return importer;
    },
    initialMarkdown: function() {
        return initialMarkdown;
    }
});
var _index = require("../index");
var _constants = require("./constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var markdownLexer = _index.MarkdownLexer.fromNothing(), markdownParser = _index.MarkdownParser.fromNothing();
function importer(filePath, context) {
    var content = contentMap[filePath] || null;
    if (content !== null) {
        var startRule = markdownParser.getStartRule(), tokens = markdownLexer.tokenise(content), node = markdownParser.parse(tokens, startRule), importedNode = node, importedTokens = tokens, importedClassName = classNameFromFilePath(filePath);
        Object.assign(context, {
            importedNode: importedNode,
            importedTokens: importedTokens,
            importedClassName: importedClassName
        });
    }
}
function classNameFromFilePath(filePath) {
    var className = filePath.replace(/\.md/, _constants.EMPTY_STRING);
    return className;
}
var INDEX_PATH = "index.md", CONTENT_PATH = "content.md", CONTENTS_PATH = "contents.md", HALF_TITLE_PATH = "half-title.md", FRONT_MATTER_PATH = "front-matter.md", INTRODUCTION_PATH = "introduction.md", GETTING_STARTED_PATH = "getting-started.md", INSTALLING_THE_CLI_PATH = "installing-the-cli.md", GETTING_TO_GRIPS_WITH_THE_IDE_PATH = "getting-to-grips-with-the-ide.md";
var initialMarkdown = "@ignore\n\n@include ".concat(FRONT_MATTER_PATH, "\n@include ").concat(CONTENT_PATH, "\n");
var indexContent = "## Index\n\n@index", contentContent = "@ignore\n\n@include ".concat(GETTING_STARTED_PATH), contentsContent = "## Contents\n\n@contents", halfTitleContent = "# Occam", frontMatterContent = "@ignore\n\n@include ".concat(HALF_TITLE_PATH), introductionContent = "# Introduction\n      \nConstructor.\n\n@footnotes\n\n@pageNumber\n", gettingStartedContent = "# Getting started\n      \nA short paragraph with a reference to a footnote[^occam].\n\n[^occam]: The word Occam is used somewhat nebulously here.\nIt is most often associated with Occam's IDE but in fact it encompasses a range of software and services.\nThis book explains these divers parts and there is a companion book, called The Foundations of Symbolic Reasoning, that covers the underlying theory.\n\n@footnotes\n\n@include ".concat(INSTALLING_THE_CLI_PATH, "\n@include ").concat(GETTING_TO_GRIPS_WITH_THE_IDE_PATH, "\n\n@pageNumber\n"), installingTheCLIContent = "## Installing the CLI\n\n@pageNumber\n", gettingToGripsWithTheIDEIContent = "## Getting to grips with the IDE\n            \n* An unordered list to test...\n* ...the indexing.\n      \n1. As well as an...\n2. ...ordered list.\n      \n@pageNumber\n";
var _obj;
var contentMap = (_obj = {}, _define_property(_obj, INDEX_PATH, indexContent), _define_property(_obj, CONTENT_PATH, contentContent), _define_property(_obj, CONTENTS_PATH, contentsContent), _define_property(_obj, HALF_TITLE_PATH, halfTitleContent), _define_property(_obj, FRONT_MATTER_PATH, frontMatterContent), _define_property(_obj, INTRODUCTION_PATH, introductionContent), _define_property(_obj, GETTING_STARTED_PATH, gettingStartedContent), _define_property(_obj, INSTALLING_THE_CLI_PATH, installingTheCLIContent), _define_property(_obj, GETTING_TO_GRIPS_WITH_THE_IDE_PATH, gettingToGripsWithTheIDEIContent), _obj);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2ltcG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBNYXJrZG93bkxleGVyLCBNYXJrZG93blBhcnNlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuY29uc3QgbWFya2Rvd25MZXhlciA9IE1hcmtkb3duTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duUGFyc2VyID0gTWFya2Rvd25QYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGltcG9ydGVyKGZpbGVQYXRoLCBjb250ZXh0KSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBjb250ZW50TWFwW2ZpbGVQYXRoXSB8fCBudWxsO1xuXG4gIGlmIChjb250ZW50ICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3RhcnRSdWxlID0gbWFya2Rvd25QYXJzZXIuZ2V0U3RhcnRSdWxlKCksXG4gICAgICAgICAgdG9rZW5zID0gbWFya2Rvd25MZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgICBub2RlID0gbWFya2Rvd25QYXJzZXIucGFyc2UodG9rZW5zLCBzdGFydFJ1bGUpLFxuICAgICAgICAgIGltcG9ydGVkTm9kZSA9IG5vZGUsICAvLy9cbiAgICAgICAgICBpbXBvcnRlZFRva2VucyA9IHRva2VucyxcbiAgICAgICAgICBpbXBvcnRlZENsYXNzTmFtZSA9IGNsYXNzTmFtZUZyb21GaWxlUGF0aChmaWxlUGF0aCk7XG5cbiAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICAgIGltcG9ydGVkTm9kZSxcbiAgICAgIGltcG9ydGVkVG9rZW5zLFxuICAgICAgaW1wb3J0ZWRDbGFzc05hbWVcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGFzc05hbWVGcm9tRmlsZVBhdGgoZmlsZVBhdGgpIHtcbiAgY29uc3QgY2xhc3NOYW1lID0gZmlsZVBhdGgucmVwbGFjZSgvXFwubWQvLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBjbGFzc05hbWU7XG59XG5cbmNvbnN0IElOREVYX1BBVEggPSBcImluZGV4Lm1kXCIsXG4gICAgICBDT05URU5UX1BBVEggPSBcImNvbnRlbnQubWRcIixcbiAgICAgIENPTlRFTlRTX1BBVEggPSBcImNvbnRlbnRzLm1kXCIsXG4gICAgICBIQUxGX1RJVExFX1BBVEggPSBcImhhbGYtdGl0bGUubWRcIixcbiAgICAgIEZST05UX01BVFRFUl9QQVRIID0gXCJmcm9udC1tYXR0ZXIubWRcIixcbiAgICAgIElOVFJPRFVDVElPTl9QQVRIID0gXCJpbnRyb2R1Y3Rpb24ubWRcIixcbiAgICAgIEdFVFRJTkdfU1RBUlRFRF9QQVRIID0gXCJnZXR0aW5nLXN0YXJ0ZWQubWRcIixcbiAgICAgIElOU1RBTExJTkdfVEhFX0NMSV9QQVRIID0gXCJpbnN0YWxsaW5nLXRoZS1jbGkubWRcIixcbiAgICAgIEdFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEggPSBcImdldHRpbmctdG8tZ3JpcHMtd2l0aC10aGUtaWRlLm1kXCI7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsTWFya2Rvd24gPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0ZST05UX01BVFRFUl9QQVRIfVxuQGluY2x1ZGUgJHtDT05URU5UX1BBVEh9XG5gO1xuXG5jb25zdCBpbmRleENvbnRlbnQgPSBgIyMgSW5kZXhcblxuQGluZGV4YCxcblxuICAgICAgY29udGVudENvbnRlbnQgPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0dFVFRJTkdfU1RBUlRFRF9QQVRIfWAsXG5cbiAgICAgIGNvbnRlbnRzQ29udGVudCA9IGAjIyBDb250ZW50c1xuXG5AY29udGVudHNgLFxuXG4gICAgICBoYWxmVGl0bGVDb250ZW50ID0gYCMgT2NjYW1gLFxuXG4gICAgICBmcm9udE1hdHRlckNvbnRlbnQgPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0hBTEZfVElUTEVfUEFUSH1gLFxuXG4gICAgICBpbnRyb2R1Y3Rpb25Db250ZW50ID0gYCMgSW50cm9kdWN0aW9uXG4gICAgICBcbkNvbnN0cnVjdG9yLlxuXG5AZm9vdG5vdGVzXG5cbkBwYWdlTnVtYmVyXG5gLFxuXG4gICAgICBnZXR0aW5nU3RhcnRlZENvbnRlbnQgPSBgIyBHZXR0aW5nIHN0YXJ0ZWRcbiAgICAgIFxuQSBzaG9ydCBwYXJhZ3JhcGggd2l0aCBhIHJlZmVyZW5jZSB0byBhIGZvb3Rub3RlW15vY2NhbV0uXG5cblteb2NjYW1dOiBUaGUgd29yZCBPY2NhbSBpcyB1c2VkIHNvbWV3aGF0IG5lYnVsb3VzbHkgaGVyZS5cbkl0IGlzIG1vc3Qgb2Z0ZW4gYXNzb2NpYXRlZCB3aXRoIE9jY2FtJ3MgSURFIGJ1dCBpbiBmYWN0IGl0IGVuY29tcGFzc2VzIGEgcmFuZ2Ugb2Ygc29mdHdhcmUgYW5kIHNlcnZpY2VzLlxuVGhpcyBib29rIGV4cGxhaW5zIHRoZXNlIGRpdmVycyBwYXJ0cyBhbmQgdGhlcmUgaXMgYSBjb21wYW5pb24gYm9vaywgY2FsbGVkIFRoZSBGb3VuZGF0aW9ucyBvZiBTeW1ib2xpYyBSZWFzb25pbmcsIHRoYXQgY292ZXJzIHRoZSB1bmRlcmx5aW5nIHRoZW9yeS5cblxuQGZvb3Rub3Rlc1xuXG5AaW5jbHVkZSAke0lOU1RBTExJTkdfVEhFX0NMSV9QQVRIfVxuQGluY2x1ZGUgJHtHRVRUSU5HX1RPX0dSSVBTX1dJVEhfVEhFX0lERV9QQVRIfVxuXG5AcGFnZU51bWJlclxuYCxcblxuICAgICAgaW5zdGFsbGluZ1RoZUNMSUNvbnRlbnQgPSBgIyMgSW5zdGFsbGluZyB0aGUgQ0xJXG5cbkBwYWdlTnVtYmVyXG5gLFxuXG4gICAgICBnZXR0aW5nVG9Hcmlwc1dpdGhUaGVJREVJQ29udGVudCA9IGAjIyBHZXR0aW5nIHRvIGdyaXBzIHdpdGggdGhlIElERVxuICAgICAgICAgICAgXG4qIEFuIHVub3JkZXJlZCBsaXN0IHRvIHRlc3QuLi5cbiogLi4udGhlIGluZGV4aW5nLlxuICAgICAgXG4xLiBBcyB3ZWxsIGFzIGFuLi4uXG4yLiAuLi5vcmRlcmVkIGxpc3QuXG4gICAgICBcbkBwYWdlTnVtYmVyXG5gO1xuXG5jb25zdCBjb250ZW50TWFwID0ge1xuXG4gIFtJTkRFWF9QQVRIXTogaW5kZXhDb250ZW50LFxuICBbQ09OVEVOVF9QQVRIXTogY29udGVudENvbnRlbnQsXG4gIFtDT05URU5UU19QQVRIXTogY29udGVudHNDb250ZW50LFxuICBbSEFMRl9USVRMRV9QQVRIXTogaGFsZlRpdGxlQ29udGVudCxcbiAgW0ZST05UX01BVFRFUl9QQVRIXTogZnJvbnRNYXR0ZXJDb250ZW50LFxuICBbSU5UUk9EVUNUSU9OX1BBVEhdOiBpbnRyb2R1Y3Rpb25Db250ZW50LFxuICBbR0VUVElOR19TVEFSVEVEX1BBVEhdOiBnZXR0aW5nU3RhcnRlZENvbnRlbnQsXG4gIFtJTlNUQUxMSU5HX1RIRV9DTElfUEFUSF06IGluc3RhbGxpbmdUaGVDTElDb250ZW50LFxuICBbR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSF06IGdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50XG5cbn07XG4iXSwibmFtZXMiOlsiaW1wb3J0ZXIiLCJpbml0aWFsTWFya2Rvd24iLCJtYXJrZG93bkxleGVyIiwiTWFya2Rvd25MZXhlciIsImZyb21Ob3RoaW5nIiwibWFya2Rvd25QYXJzZXIiLCJNYXJrZG93blBhcnNlciIsImZpbGVQYXRoIiwiY29udGV4dCIsImNvbnRlbnQiLCJjb250ZW50TWFwIiwic3RhcnRSdWxlIiwiZ2V0U3RhcnRSdWxlIiwidG9rZW5zIiwidG9rZW5pc2UiLCJub2RlIiwicGFyc2UiLCJpbXBvcnRlZE5vZGUiLCJpbXBvcnRlZFRva2VucyIsImltcG9ydGVkQ2xhc3NOYW1lIiwiY2xhc3NOYW1lRnJvbUZpbGVQYXRoIiwiT2JqZWN0IiwiYXNzaWduIiwiY2xhc3NOYW1lIiwicmVwbGFjZSIsIkVNUFRZX1NUUklORyIsIklOREVYX1BBVEgiLCJDT05URU5UX1BBVEgiLCJDT05URU5UU19QQVRIIiwiSEFMRl9USVRMRV9QQVRIIiwiRlJPTlRfTUFUVEVSX1BBVEgiLCJJTlRST0RVQ1RJT05fUEFUSCIsIkdFVFRJTkdfU1RBUlRFRF9QQVRIIiwiSU5TVEFMTElOR19USEVfQ0xJX1BBVEgiLCJHRVRUSU5HX1RPX0dSSVBTX1dJVEhfVEhFX0lERV9QQVRIIiwiaW5kZXhDb250ZW50IiwiY29udGVudENvbnRlbnQiLCJjb250ZW50c0NvbnRlbnQiLCJoYWxmVGl0bGVDb250ZW50IiwiZnJvbnRNYXR0ZXJDb250ZW50IiwiaW50cm9kdWN0aW9uQ29udGVudCIsImdldHRpbmdTdGFydGVkQ29udGVudCIsImluc3RhbGxpbmdUaGVDTElDb250ZW50IiwiZ2V0dGluZ1RvR3JpcHNXaXRoVGhlSURFSUNvbnRlbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVNnQkEsUUFBUTtlQUFSQTs7SUFtQ0hDLGVBQWU7ZUFBZkE7OztxQkExQ2lDO3lCQUVqQjs7Ozs7Ozs7Ozs7Ozs7QUFFN0IsSUFBTUMsZ0JBQWdCQyxvQkFBYSxDQUFDQyxXQUFXLElBQ3pDQyxpQkFBaUJDLHFCQUFjLENBQUNGLFdBQVc7QUFFMUMsU0FBU0osU0FBU08sUUFBUSxFQUFFQyxPQUFPO0lBQ3hDLElBQU1DLFVBQVVDLFVBQVUsQ0FBQ0gsU0FBUyxJQUFJO0lBRXhDLElBQUlFLFlBQVksTUFBTTtRQUNwQixJQUFNRSxZQUFZTixlQUFlTyxZQUFZLElBQ3ZDQyxTQUFTWCxjQUFjWSxRQUFRLENBQUNMLFVBQ2hDTSxPQUFPVixlQUFlVyxLQUFLLENBQUNILFFBQVFGLFlBQ3BDTSxlQUFlRixNQUNmRyxpQkFBaUJMLFFBQ2pCTSxvQkFBb0JDLHNCQUFzQmI7UUFFaERjLE9BQU9DLE1BQU0sQ0FBQ2QsU0FBUztZQUNyQlMsY0FBQUE7WUFDQUMsZ0JBQUFBO1lBQ0FDLG1CQUFBQTtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNDLHNCQUFzQmIsUUFBUTtJQUNyQyxJQUFNZ0IsWUFBWWhCLFNBQVNpQixPQUFPLENBQUMsUUFBUUMsdUJBQVk7SUFFdkQsT0FBT0Y7QUFDVDtBQUVBLElBQU1HLGFBQWEsWUFDYkMsZUFBZSxjQUNmQyxnQkFBZ0IsZUFDaEJDLGtCQUFrQixpQkFDbEJDLG9CQUFvQixtQkFDcEJDLG9CQUFvQixtQkFDcEJDLHVCQUF1QixzQkFDdkJDLDBCQUEwQix5QkFDMUJDLHFDQUFxQztBQUVwQyxJQUFNakMsa0JBQWtCLEFBQUMsdUJBR3JCMEIsT0FEQUcsbUJBQWtCLGVBQ0wsT0FBYkgsY0FBYTtBQUd4QixJQUFNUSxlQUFnQixzQkFJaEJDLGlCQUFpQixBQUFDLHVCQUVRLE9BQXJCSix1QkFFTEssa0JBQW1CLDRCQUluQkMsbUJBQW9CLFdBRXBCQyxxQkFBcUIsQUFBQyx1QkFFRCxPQUFoQlYsa0JBRUxXLHNCQUF1Qix1RUFTdkJDLHdCQUF3QixBQUFDLGtiQVdwQlAsT0FEQUQseUJBQXdCLGVBQ1csT0FBbkNDLG9DQUFtQyxzQkFLeENRLDBCQUEyQiwwQ0FLM0JDLG1DQUFvQztJQVd2QjtBQUFuQixJQUFNakMsY0FBYSxXQUVqQixpQkFGaUIsTUFFaEJnQixZQUFhUyxlQUNkLGlCQUhpQixNQUdoQlIsY0FBZVMsaUJBQ2hCLGlCQUppQixNQUloQlIsZUFBZ0JTLGtCQUNqQixpQkFMaUIsTUFLaEJSLGlCQUFrQlMsbUJBQ25CLGlCQU5pQixNQU1oQlIsbUJBQW9CUyxxQkFDckIsaUJBUGlCLE1BT2hCUixtQkFBb0JTLHNCQUNyQixpQkFSaUIsTUFRaEJSLHNCQUF1QlMsd0JBQ3hCLGlCQVRpQixNQVNoQlIseUJBQTBCUywwQkFDM0IsaUJBVmlCLE1BVWhCUixvQ0FBcUNTLG1DQVZyQiJ9