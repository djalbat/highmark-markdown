"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return importer;
    },
    defaultContent: function() {
        return defaultContent;
    }
});
var _index = require("../index");
var _constants = require("./constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var markdownLexer = _index.MarkdownLexer.fromNothing(), markdownParser = _index.MarkdownParser.fromNothing();
function importer(filePath, context) {
    var content = contentMap[filePath] || null;
    if (content !== null) {
        var startOfContent = true, startRule = markdownParser.getStartRule(), tokens = markdownLexer.tokenise(content), node = markdownParser.parse(tokens, startRule, startOfContent), importedNode = node, importedTokens = tokens, importedClassName = classNameFromFilePath(filePath);
        Object.assign(context, {
            importedNode: importedNode,
            importedTokens: importedTokens,
            importedClassName: importedClassName
        });
    }
}
function classNameFromFilePath(filePath) {
    var className = filePath.replace(/\.md/, _constants.EMPTY_STRING);
    return className;
}
var INDEX_PATH = "index.md", CONTENT_PATH = "content.md", CONTENTS_PATH = "contents.md", HALF_TITLE_PATH = "half-title.md", FRONT_MATTER_PATH = "front-matter.md", INTRODUCTION_PATH = "introduction.md", GETTING_STARTED_PATH = "getting-started.md", INSTALLING_THE_CLI_PATH = "installing-the-cli.md", GETTING_TO_GRIPS_WITH_THE_IDE_PATH = "getting-to-grips-with-the-ide.md";
var defaultContent = "@ignore\n\n@include ".concat(FRONT_MATTER_PATH, "\n@include ").concat(CONTENT_PATH, "\n@include ").concat(INDEX_PATH, "\n");
var indexContent = "## Index\n\n@index", contentContent = "@ignore\n\n@include ".concat(INTRODUCTION_PATH, "\n@include ").concat(GETTING_STARTED_PATH), contentsContent = "## Contents\n\n@contents", halfTitleContent = "# Occam", frontMatterContent = "@ignore\n\n@include ".concat(HALF_TITLE_PATH, "\n@include ").concat(CONTENTS_PATH), introductionContent = "# Introduction\n      \nConstructor.\n\n@footnotes\n\n@pageNumber\n", gettingStartedContent = "# Getting started\n      \nAnother short paragraph with a reference to a footnote[^occam].\n\n[^occam]: The word Occam is used somewhat nebulously here.\nIt is most often associated with Occam's IDE but in fact it encompasses a range of software and services.\nThis book explains these divers parts and there is a companion book, called The Foundations of Symbolic Reasoning, that covers the underlying theory.\n\n[^florence]: Occam was originally called Florence but the former seemed more apt.\n\n@footnotes\n\n@embed ".concat(INSTALLING_THE_CLI_PATH, "\n@embed ").concat(GETTING_TO_GRIPS_WITH_THE_IDE_PATH, "\n\n@pageNumber\n"), installingTheCLIContent = "## Installing the CLI\n", gettingToGripsWithTheIDEIContent = "## Getting to grips with the IDE\n            \n* An unordered list to test...\n* ...the indexing.\n      \n1. As well as an...\n2. ...ordered list.\n      \n";
var _obj;
var contentMap = (_obj = {}, _define_property(_obj, INDEX_PATH, indexContent), _define_property(_obj, CONTENT_PATH, contentContent), _define_property(_obj, CONTENTS_PATH, contentsContent), _define_property(_obj, HALF_TITLE_PATH, halfTitleContent), _define_property(_obj, FRONT_MATTER_PATH, frontMatterContent), _define_property(_obj, INTRODUCTION_PATH, introductionContent), _define_property(_obj, GETTING_STARTED_PATH, gettingStartedContent), _define_property(_obj, INSTALLING_THE_CLI_PATH, installingTheCLIContent), _define_property(_obj, GETTING_TO_GRIPS_WITH_THE_IDE_PATH, gettingToGripsWithTheIDEIContent), _obj);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2ltcG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBNYXJrZG93bkxleGVyLCBNYXJrZG93blBhcnNlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuY29uc3QgbWFya2Rvd25MZXhlciA9IE1hcmtkb3duTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duUGFyc2VyID0gTWFya2Rvd25QYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW1wb3J0ZXIoZmlsZVBhdGgsIGNvbnRleHQpIHtcbiAgY29uc3QgY29udGVudCA9IGNvbnRlbnRNYXBbZmlsZVBhdGhdIHx8IG51bGw7XG5cbiAgaWYgKGNvbnRlbnQgIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGFydE9mQ29udGVudCA9IHRydWUsXG4gICAgICAgICAgc3RhcnRSdWxlID0gbWFya2Rvd25QYXJzZXIuZ2V0U3RhcnRSdWxlKCksXG4gICAgICAgICAgdG9rZW5zID0gbWFya2Rvd25MZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgICBub2RlID0gbWFya2Rvd25QYXJzZXIucGFyc2UodG9rZW5zLCBzdGFydFJ1bGUsIHN0YXJ0T2ZDb250ZW50KSxcbiAgICAgICAgICBpbXBvcnRlZE5vZGUgPSBub2RlLCAgLy8vXG4gICAgICAgICAgaW1wb3J0ZWRUb2tlbnMgPSB0b2tlbnMsXG4gICAgICAgICAgaW1wb3J0ZWRDbGFzc05hbWUgPSBjbGFzc05hbWVGcm9tRmlsZVBhdGgoZmlsZVBhdGgpO1xuXG4gICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgICBpbXBvcnRlZE5vZGUsXG4gICAgICBpbXBvcnRlZFRva2VucyxcbiAgICAgIGltcG9ydGVkQ2xhc3NOYW1lXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xhc3NOYW1lRnJvbUZpbGVQYXRoKGZpbGVQYXRoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IGZpbGVQYXRoLnJlcGxhY2UoL1xcLm1kLywgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5jb25zdCBJTkRFWF9QQVRIID0gXCJpbmRleC5tZFwiLFxuICAgICAgQ09OVEVOVF9QQVRIID0gXCJjb250ZW50Lm1kXCIsXG4gICAgICBDT05URU5UU19QQVRIID0gXCJjb250ZW50cy5tZFwiLFxuICAgICAgSEFMRl9USVRMRV9QQVRIID0gXCJoYWxmLXRpdGxlLm1kXCIsXG4gICAgICBGUk9OVF9NQVRURVJfUEFUSCA9IFwiZnJvbnQtbWF0dGVyLm1kXCIsXG4gICAgICBJTlRST0RVQ1RJT05fUEFUSCA9IFwiaW50cm9kdWN0aW9uLm1kXCIsXG4gICAgICBHRVRUSU5HX1NUQVJURURfUEFUSCA9IFwiZ2V0dGluZy1zdGFydGVkLm1kXCIsXG4gICAgICBJTlNUQUxMSU5HX1RIRV9DTElfUEFUSCA9IFwiaW5zdGFsbGluZy10aGUtY2xpLm1kXCIsXG4gICAgICBHRVRUSU5HX1RPX0dSSVBTX1dJVEhfVEhFX0lERV9QQVRIID0gXCJnZXR0aW5nLXRvLWdyaXBzLXdpdGgtdGhlLWlkZS5tZFwiO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbnRlbnQgPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0ZST05UX01BVFRFUl9QQVRIfVxuQGluY2x1ZGUgJHtDT05URU5UX1BBVEh9XG5AaW5jbHVkZSAke0lOREVYX1BBVEh9XG5gO1xuXG5jb25zdCBpbmRleENvbnRlbnQgPSBgIyMgSW5kZXhcblxuQGluZGV4YCxcblxuICAgICAgY29udGVudENvbnRlbnQgPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0lOVFJPRFVDVElPTl9QQVRIfVxuQGluY2x1ZGUgJHtHRVRUSU5HX1NUQVJURURfUEFUSH1gLFxuXG4gICAgICBjb250ZW50c0NvbnRlbnQgPSBgIyMgQ29udGVudHNcblxuQGNvbnRlbnRzYCxcblxuICAgICAgaGFsZlRpdGxlQ29udGVudCA9IGAjIE9jY2FtYCxcblxuICAgICAgZnJvbnRNYXR0ZXJDb250ZW50ID0gYEBpZ25vcmVcblxuQGluY2x1ZGUgJHtIQUxGX1RJVExFX1BBVEh9XG5AaW5jbHVkZSAke0NPTlRFTlRTX1BBVEh9YCxcblxuICAgICAgaW50cm9kdWN0aW9uQ29udGVudCA9IGAjIEludHJvZHVjdGlvblxuICAgICAgXG5Db25zdHJ1Y3Rvci5cblxuQGZvb3Rub3Rlc1xuXG5AcGFnZU51bWJlclxuYCxcblxuICAgICAgZ2V0dGluZ1N0YXJ0ZWRDb250ZW50ID0gYCMgR2V0dGluZyBzdGFydGVkXG4gICAgICBcbkFub3RoZXIgc2hvcnQgcGFyYWdyYXBoIHdpdGggYSByZWZlcmVuY2UgdG8gYSBmb290bm90ZVteb2NjYW1dLlxuXG5bXm9jY2FtXTogVGhlIHdvcmQgT2NjYW0gaXMgdXNlZCBzb21ld2hhdCBuZWJ1bG91c2x5IGhlcmUuXG5JdCBpcyBtb3N0IG9mdGVuIGFzc29jaWF0ZWQgd2l0aCBPY2NhbSdzIElERSBidXQgaW4gZmFjdCBpdCBlbmNvbXBhc3NlcyBhIHJhbmdlIG9mIHNvZnR3YXJlIGFuZCBzZXJ2aWNlcy5cblRoaXMgYm9vayBleHBsYWlucyB0aGVzZSBkaXZlcnMgcGFydHMgYW5kIHRoZXJlIGlzIGEgY29tcGFuaW9uIGJvb2ssIGNhbGxlZCBUaGUgRm91bmRhdGlvbnMgb2YgU3ltYm9saWMgUmVhc29uaW5nLCB0aGF0IGNvdmVycyB0aGUgdW5kZXJseWluZyB0aGVvcnkuXG5cblteZmxvcmVuY2VdOiBPY2NhbSB3YXMgb3JpZ2luYWxseSBjYWxsZWQgRmxvcmVuY2UgYnV0IHRoZSBmb3JtZXIgc2VlbWVkIG1vcmUgYXB0LlxuXG5AZm9vdG5vdGVzXG5cbkBlbWJlZCAke0lOU1RBTExJTkdfVEhFX0NMSV9QQVRIfVxuQGVtYmVkICR7R0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSH1cblxuQHBhZ2VOdW1iZXJcbmAsXG5cbiAgICAgIGluc3RhbGxpbmdUaGVDTElDb250ZW50ID0gYCMjIEluc3RhbGxpbmcgdGhlIENMSVxuYCxcblxuICAgICAgZ2V0dGluZ1RvR3JpcHNXaXRoVGhlSURFSUNvbnRlbnQgPSBgIyMgR2V0dGluZyB0byBncmlwcyB3aXRoIHRoZSBJREVcbiAgICAgICAgICAgIFxuKiBBbiB1bm9yZGVyZWQgbGlzdCB0byB0ZXN0Li4uXG4qIC4uLnRoZSBpbmRleGluZy5cbiAgICAgIFxuMS4gQXMgd2VsbCBhcyBhbi4uLlxuMi4gLi4ub3JkZXJlZCBsaXN0LlxuICAgICAgXG5gO1xuXG5jb25zdCBjb250ZW50TWFwID0ge1xuXG4gIFtJTkRFWF9QQVRIXTogaW5kZXhDb250ZW50LFxuICBbQ09OVEVOVF9QQVRIXTogY29udGVudENvbnRlbnQsXG4gIFtDT05URU5UU19QQVRIXTogY29udGVudHNDb250ZW50LFxuICBbSEFMRl9USVRMRV9QQVRIXTogaGFsZlRpdGxlQ29udGVudCxcbiAgW0ZST05UX01BVFRFUl9QQVRIXTogZnJvbnRNYXR0ZXJDb250ZW50LFxuICBbSU5UUk9EVUNUSU9OX1BBVEhdOiBpbnRyb2R1Y3Rpb25Db250ZW50LFxuICBbR0VUVElOR19TVEFSVEVEX1BBVEhdOiBnZXR0aW5nU3RhcnRlZENvbnRlbnQsXG4gIFtJTlNUQUxMSU5HX1RIRV9DTElfUEFUSF06IGluc3RhbGxpbmdUaGVDTElDb250ZW50LFxuICBbR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSF06IGdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50XG5cbn07XG4iXSwibmFtZXMiOlsiaW1wb3J0ZXIiLCJkZWZhdWx0Q29udGVudCIsIm1hcmtkb3duTGV4ZXIiLCJNYXJrZG93bkxleGVyIiwiZnJvbU5vdGhpbmciLCJtYXJrZG93blBhcnNlciIsIk1hcmtkb3duUGFyc2VyIiwiZmlsZVBhdGgiLCJjb250ZXh0IiwiY29udGVudCIsImNvbnRlbnRNYXAiLCJzdGFydE9mQ29udGVudCIsInN0YXJ0UnVsZSIsImdldFN0YXJ0UnVsZSIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwiaW1wb3J0ZWROb2RlIiwiaW1wb3J0ZWRUb2tlbnMiLCJpbXBvcnRlZENsYXNzTmFtZSIsImNsYXNzTmFtZUZyb21GaWxlUGF0aCIsIk9iamVjdCIsImFzc2lnbiIsImNsYXNzTmFtZSIsInJlcGxhY2UiLCJFTVBUWV9TVFJJTkciLCJJTkRFWF9QQVRIIiwiQ09OVEVOVF9QQVRIIiwiQ09OVEVOVFNfUEFUSCIsIkhBTEZfVElUTEVfUEFUSCIsIkZST05UX01BVFRFUl9QQVRIIiwiSU5UUk9EVUNUSU9OX1BBVEgiLCJHRVRUSU5HX1NUQVJURURfUEFUSCIsIklOU1RBTExJTkdfVEhFX0NMSV9QQVRIIiwiR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSCIsImluZGV4Q29udGVudCIsImNvbnRlbnRDb250ZW50IiwiY29udGVudHNDb250ZW50IiwiaGFsZlRpdGxlQ29udGVudCIsImZyb250TWF0dGVyQ29udGVudCIsImludHJvZHVjdGlvbkNvbnRlbnQiLCJnZXR0aW5nU3RhcnRlZENvbnRlbnQiLCJpbnN0YWxsaW5nVGhlQ0xJQ29udGVudCIsImdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFTQSxPQWtCQztlQWxCdUJBOztJQW9DWEMsY0FBYztlQUFkQTs7O3FCQTNDaUM7eUJBRWpCOzs7Ozs7Ozs7Ozs7OztBQUU3QixJQUFNQyxnQkFBZ0JDLG9CQUFhLENBQUNDLFdBQVcsSUFDekNDLGlCQUFpQkMscUJBQWMsQ0FBQ0YsV0FBVztBQUVsQyxTQUFTSixTQUFTTyxRQUFRLEVBQUVDLE9BQU87SUFDaEQsSUFBTUMsVUFBVUMsVUFBVSxDQUFDSCxTQUFTLElBQUk7SUFFeEMsSUFBSUUsWUFBWSxNQUFNO1FBQ3BCLElBQU1FLGlCQUFpQixNQUNqQkMsWUFBWVAsZUFBZVEsWUFBWSxJQUN2Q0MsU0FBU1osY0FBY2EsUUFBUSxDQUFDTixVQUNoQ08sT0FBT1gsZUFBZVksS0FBSyxDQUFDSCxRQUFRRixXQUFXRCxpQkFDL0NPLGVBQWVGLE1BQ2ZHLGlCQUFpQkwsUUFDakJNLG9CQUFvQkMsc0JBQXNCZDtRQUVoRGUsT0FBT0MsTUFBTSxDQUFDZixTQUFTO1lBQ3JCVSxjQUFBQTtZQUNBQyxnQkFBQUE7WUFDQUMsbUJBQUFBO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsU0FBU0Msc0JBQXNCZCxRQUFRO0lBQ3JDLElBQU1pQixZQUFZakIsU0FBU2tCLE9BQU8sQ0FBQyxRQUFRQyx1QkFBWTtJQUV2RCxPQUFPRjtBQUNUO0FBRUEsSUFBTUcsYUFBYSxZQUNiQyxlQUFlLGNBQ2ZDLGdCQUFnQixlQUNoQkMsa0JBQWtCLGlCQUNsQkMsb0JBQW9CLG1CQUNwQkMsb0JBQW9CLG1CQUNwQkMsdUJBQXVCLHNCQUN2QkMsMEJBQTBCLHlCQUMxQkMscUNBQXFDO0FBRXBDLElBQU1sQyxpQkFBaUIsQUFBQyx1QkFHcEIyQixPQURBRyxtQkFBa0IsZUFFbEJKLE9BREFDLGNBQWEsZUFDRixPQUFYRCxZQUFXO0FBR3RCLElBQU1TLGVBQWdCLHNCQUloQkMsaUJBQWlCLEFBQUMsdUJBR2JKLE9BREFELG1CQUFrQixlQUNHLE9BQXJCQyx1QkFFTEssa0JBQW1CLDRCQUluQkMsbUJBQW9CLFdBRXBCQyxxQkFBcUIsQUFBQyx1QkFHakJYLE9BREFDLGlCQUFnQixlQUNGLE9BQWRELGdCQUVMWSxzQkFBdUIsdUVBU3ZCQyx3QkFBd0IsQUFBQywyZ0JBYXRCUCxPQURBRCx5QkFBd0IsYUFDVyxPQUFuQ0Msb0NBQW1DLHNCQUt0Q1EsMEJBQTJCLDJCQUczQkMsbUNBQW9DO0lBVXZCO0FBQW5CLElBQU1sQyxjQUFhLFdBRWpCLGlCQUZpQixNQUVoQmlCLFlBQWFTLGVBQ2QsaUJBSGlCLE1BR2hCUixjQUFlUyxpQkFDaEIsaUJBSmlCLE1BSWhCUixlQUFnQlMsa0JBQ2pCLGlCQUxpQixNQUtoQlIsaUJBQWtCUyxtQkFDbkIsaUJBTmlCLE1BTWhCUixtQkFBb0JTLHFCQUNyQixpQkFQaUIsTUFPaEJSLG1CQUFvQlMsc0JBQ3JCLGlCQVJpQixNQVFoQlIsc0JBQXVCUyx3QkFDeEIsaUJBVGlCLE1BU2hCUix5QkFBMEJTLDBCQUMzQixpQkFWaUIsTUFVaEJSLG9DQUFxQ1MsbUNBVnJCIn0=