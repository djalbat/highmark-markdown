"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    importer: function() {
        return importer;
    },
    initialMarkdown: function() {
        return initialMarkdown;
    }
});
var _index = require("../index");
var _constants = require("./constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var markdownLexer = _index.MarkdownLexer.fromNothing(), markdownParser = _index.MarkdownParser.fromNothing();
function importer(filePath, context) {
    var content = contentMap[filePath] || null;
    if (content !== null) {
        var startRule = markdownParser.getStartRule(), tokens = markdownLexer.tokenise(content), node = markdownParser.parse(tokens, startRule), importedNode = node, importedTokens = tokens, importedClassName = classNameFromFilePath(filePath);
        Object.assign(context, {
            importedNode: importedNode,
            importedTokens: importedTokens,
            importedClassName: importedClassName
        });
    }
}
function classNameFromFilePath(filePath) {
    var className = filePath.replace(/\.md/, _constants.EMPTY_STRING);
    return className;
}
var INDEX_PATH = "index.md", CONTENT_PATH = "content.md", CONTENTS_PATH = "contents.md", HALF_TITLE_PATH = "half-title.md", FRONT_MATTER_PATH = "front-matter.md", INTRODUCTION_PATH = "introduction.md", GETTING_STARTED_PATH = "getting-started.md", INSTALLING_THE_CLI_PATH = "installing-the-cli.md", GETTING_TO_GRIPS_WITH_THE_IDE_PATH = "getting-to-grips-with-the-ide.md";
var initialMarkdown = "@ignore \n\n@include ".concat(FRONT_MATTER_PATH, "\n");
var indexContent = "## Index\n\n@index", contentContent = "@ignore\n\n@include ".concat(INTRODUCTION_PATH, "\n@include ").concat(GETTING_STARTED_PATH), contentsContent = "## Contents\n\n@contents", halfTitleContent = "# Occam", frontMatterContent = "@ignore\n\n@include ".concat(HALF_TITLE_PATH, "\n@include ").concat(CONTENTS_PATH), introductionContent = "# Introduction\n      \nConstructor.\n\n@footnotes\n\n@pageNumber\n", gettingStartedContent = "# Getting started\n      \nAnother short paragraph with a reference to a footnote[^occam].\n\n[^occam]: The word Occam is used somewhat nebulously here.\nIt is most often associated with Occam's IDE but in fact it encompasses a range of software and services.\nThis book explains these divers parts and there is a companion book, called The Foundations of Symbolic Reasoning, that covers the underlying theory.\n\n@footnotes\n\n@embed ".concat(INSTALLING_THE_CLI_PATH, "\n@embed ").concat(GETTING_TO_GRIPS_WITH_THE_IDE_PATH, "\n\n@pageNumber\n"), installingTheCLIContent = "## Installing the CLI\n", gettingToGripsWithTheIDEIContent = "## Getting to grips with the IDE\n            \n* An unordered list to test...\n* ...the indexing.\n      \n1. As well as an...\n2. ...ordered list.\n      \n";
var _obj;
var contentMap = (_obj = {}, _define_property(_obj, INDEX_PATH, indexContent), _define_property(_obj, CONTENT_PATH, contentContent), _define_property(_obj, CONTENTS_PATH, contentsContent), _define_property(_obj, HALF_TITLE_PATH, halfTitleContent), _define_property(_obj, FRONT_MATTER_PATH, frontMatterContent), _define_property(_obj, INTRODUCTION_PATH, introductionContent), _define_property(_obj, GETTING_STARTED_PATH, gettingStartedContent), _define_property(_obj, INSTALLING_THE_CLI_PATH, installingTheCLIContent), _define_property(_obj, GETTING_TO_GRIPS_WITH_THE_IDE_PATH, gettingToGripsWithTheIDEIContent), _obj);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2ltcG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBNYXJrZG93bkxleGVyLCBNYXJrZG93blBhcnNlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuY29uc3QgbWFya2Rvd25MZXhlciA9IE1hcmtkb3duTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duUGFyc2VyID0gTWFya2Rvd25QYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGltcG9ydGVyKGZpbGVQYXRoLCBjb250ZXh0KSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBjb250ZW50TWFwW2ZpbGVQYXRoXSB8fCBudWxsO1xuXG4gIGlmIChjb250ZW50ICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3RhcnRSdWxlID0gbWFya2Rvd25QYXJzZXIuZ2V0U3RhcnRSdWxlKCksXG4gICAgICAgICAgdG9rZW5zID0gbWFya2Rvd25MZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgICBub2RlID0gbWFya2Rvd25QYXJzZXIucGFyc2UodG9rZW5zLCBzdGFydFJ1bGUpLFxuICAgICAgICAgIGltcG9ydGVkTm9kZSA9IG5vZGUsICAvLy9cbiAgICAgICAgICBpbXBvcnRlZFRva2VucyA9IHRva2VucyxcbiAgICAgICAgICBpbXBvcnRlZENsYXNzTmFtZSA9IGNsYXNzTmFtZUZyb21GaWxlUGF0aChmaWxlUGF0aCk7XG5cbiAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICAgIGltcG9ydGVkTm9kZSxcbiAgICAgIGltcG9ydGVkVG9rZW5zLFxuICAgICAgaW1wb3J0ZWRDbGFzc05hbWVcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGFzc05hbWVGcm9tRmlsZVBhdGgoZmlsZVBhdGgpIHtcbiAgY29uc3QgY2xhc3NOYW1lID0gZmlsZVBhdGgucmVwbGFjZSgvXFwubWQvLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBjbGFzc05hbWU7XG59XG5cbmNvbnN0IElOREVYX1BBVEggPSBcImluZGV4Lm1kXCIsXG4gICAgICBDT05URU5UX1BBVEggPSBcImNvbnRlbnQubWRcIixcbiAgICAgIENPTlRFTlRTX1BBVEggPSBcImNvbnRlbnRzLm1kXCIsXG4gICAgICBIQUxGX1RJVExFX1BBVEggPSBcImhhbGYtdGl0bGUubWRcIixcbiAgICAgIEZST05UX01BVFRFUl9QQVRIID0gXCJmcm9udC1tYXR0ZXIubWRcIixcbiAgICAgIElOVFJPRFVDVElPTl9QQVRIID0gXCJpbnRyb2R1Y3Rpb24ubWRcIixcbiAgICAgIEdFVFRJTkdfU1RBUlRFRF9QQVRIID0gXCJnZXR0aW5nLXN0YXJ0ZWQubWRcIixcbiAgICAgIElOU1RBTExJTkdfVEhFX0NMSV9QQVRIID0gXCJpbnN0YWxsaW5nLXRoZS1jbGkubWRcIixcbiAgICAgIEdFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEggPSBcImdldHRpbmctdG8tZ3JpcHMtd2l0aC10aGUtaWRlLm1kXCI7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsTWFya2Rvd24gPSBgQGlnbm9yZSBcblxuQGluY2x1ZGUgJHtGUk9OVF9NQVRURVJfUEFUSH1cbmA7XG5cbmNvbnN0IGluZGV4Q29udGVudCA9IGAjIyBJbmRleFxuXG5AaW5kZXhgLFxuXG4gICAgICBjb250ZW50Q29udGVudCA9IGBAaWdub3JlXG5cbkBpbmNsdWRlICR7SU5UUk9EVUNUSU9OX1BBVEh9XG5AaW5jbHVkZSAke0dFVFRJTkdfU1RBUlRFRF9QQVRIfWAsXG5cbiAgICAgIGNvbnRlbnRzQ29udGVudCA9IGAjIyBDb250ZW50c1xuXG5AY29udGVudHNgLFxuXG4gICAgICBoYWxmVGl0bGVDb250ZW50ID0gYCMgT2NjYW1gLFxuXG4gICAgICBmcm9udE1hdHRlckNvbnRlbnQgPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0hBTEZfVElUTEVfUEFUSH1cbkBpbmNsdWRlICR7Q09OVEVOVFNfUEFUSH1gLFxuXG4gICAgICBpbnRyb2R1Y3Rpb25Db250ZW50ID0gYCMgSW50cm9kdWN0aW9uXG4gICAgICBcbkNvbnN0cnVjdG9yLlxuXG5AZm9vdG5vdGVzXG5cbkBwYWdlTnVtYmVyXG5gLFxuXG4gICAgICBnZXR0aW5nU3RhcnRlZENvbnRlbnQgPSBgIyBHZXR0aW5nIHN0YXJ0ZWRcbiAgICAgIFxuQW5vdGhlciBzaG9ydCBwYXJhZ3JhcGggd2l0aCBhIHJlZmVyZW5jZSB0byBhIGZvb3Rub3RlW15vY2NhbV0uXG5cblteb2NjYW1dOiBUaGUgd29yZCBPY2NhbSBpcyB1c2VkIHNvbWV3aGF0IG5lYnVsb3VzbHkgaGVyZS5cbkl0IGlzIG1vc3Qgb2Z0ZW4gYXNzb2NpYXRlZCB3aXRoIE9jY2FtJ3MgSURFIGJ1dCBpbiBmYWN0IGl0IGVuY29tcGFzc2VzIGEgcmFuZ2Ugb2Ygc29mdHdhcmUgYW5kIHNlcnZpY2VzLlxuVGhpcyBib29rIGV4cGxhaW5zIHRoZXNlIGRpdmVycyBwYXJ0cyBhbmQgdGhlcmUgaXMgYSBjb21wYW5pb24gYm9vaywgY2FsbGVkIFRoZSBGb3VuZGF0aW9ucyBvZiBTeW1ib2xpYyBSZWFzb25pbmcsIHRoYXQgY292ZXJzIHRoZSB1bmRlcmx5aW5nIHRoZW9yeS5cblxuQGZvb3Rub3Rlc1xuXG5AZW1iZWQgJHtJTlNUQUxMSU5HX1RIRV9DTElfUEFUSH1cbkBlbWJlZCAke0dFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEh9XG5cbkBwYWdlTnVtYmVyXG5gLFxuXG4gICAgICBpbnN0YWxsaW5nVGhlQ0xJQ29udGVudCA9IGAjIyBJbnN0YWxsaW5nIHRoZSBDTElcbmAsXG5cbiAgICAgIGdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50ID0gYCMjIEdldHRpbmcgdG8gZ3JpcHMgd2l0aCB0aGUgSURFXG4gICAgICAgICAgICBcbiogQW4gdW5vcmRlcmVkIGxpc3QgdG8gdGVzdC4uLlxuKiAuLi50aGUgaW5kZXhpbmcuXG4gICAgICBcbjEuIEFzIHdlbGwgYXMgYW4uLi5cbjIuIC4uLm9yZGVyZWQgbGlzdC5cbiAgICAgIFxuYDtcblxuY29uc3QgY29udGVudE1hcCA9IHtcblxuICBbSU5ERVhfUEFUSF06IGluZGV4Q29udGVudCxcbiAgW0NPTlRFTlRfUEFUSF06IGNvbnRlbnRDb250ZW50LFxuICBbQ09OVEVOVFNfUEFUSF06IGNvbnRlbnRzQ29udGVudCxcbiAgW0hBTEZfVElUTEVfUEFUSF06IGhhbGZUaXRsZUNvbnRlbnQsXG4gIFtGUk9OVF9NQVRURVJfUEFUSF06IGZyb250TWF0dGVyQ29udGVudCxcbiAgW0lOVFJPRFVDVElPTl9QQVRIXTogaW50cm9kdWN0aW9uQ29udGVudCxcbiAgW0dFVFRJTkdfU1RBUlRFRF9QQVRIXTogZ2V0dGluZ1N0YXJ0ZWRDb250ZW50LFxuICBbSU5TVEFMTElOR19USEVfQ0xJX1BBVEhdOiBpbnN0YWxsaW5nVGhlQ0xJQ29udGVudCxcbiAgW0dFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEhdOiBnZXR0aW5nVG9Hcmlwc1dpdGhUaGVJREVJQ29udGVudFxuXG59O1xuIl0sIm5hbWVzIjpbImltcG9ydGVyIiwiaW5pdGlhbE1hcmtkb3duIiwibWFya2Rvd25MZXhlciIsIk1hcmtkb3duTGV4ZXIiLCJmcm9tTm90aGluZyIsIm1hcmtkb3duUGFyc2VyIiwiTWFya2Rvd25QYXJzZXIiLCJmaWxlUGF0aCIsImNvbnRleHQiLCJjb250ZW50IiwiY29udGVudE1hcCIsInN0YXJ0UnVsZSIsImdldFN0YXJ0UnVsZSIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwiaW1wb3J0ZWROb2RlIiwiaW1wb3J0ZWRUb2tlbnMiLCJpbXBvcnRlZENsYXNzTmFtZSIsImNsYXNzTmFtZUZyb21GaWxlUGF0aCIsIk9iamVjdCIsImFzc2lnbiIsImNsYXNzTmFtZSIsInJlcGxhY2UiLCJFTVBUWV9TVFJJTkciLCJJTkRFWF9QQVRIIiwiQ09OVEVOVF9QQVRIIiwiQ09OVEVOVFNfUEFUSCIsIkhBTEZfVElUTEVfUEFUSCIsIkZST05UX01BVFRFUl9QQVRIIiwiSU5UUk9EVUNUSU9OX1BBVEgiLCJHRVRUSU5HX1NUQVJURURfUEFUSCIsIklOU1RBTExJTkdfVEhFX0NMSV9QQVRIIiwiR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSCIsImluZGV4Q29udGVudCIsImNvbnRlbnRDb250ZW50IiwiY29udGVudHNDb250ZW50IiwiaGFsZlRpdGxlQ29udGVudCIsImZyb250TWF0dGVyQ29udGVudCIsImludHJvZHVjdGlvbkNvbnRlbnQiLCJnZXR0aW5nU3RhcnRlZENvbnRlbnQiLCJpbnN0YWxsaW5nVGhlQ0xJQ29udGVudCIsImdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFTZ0JBLFFBQVE7ZUFBUkE7O0lBbUNIQyxlQUFlO2VBQWZBOzs7cUJBMUNpQzt5QkFFakI7Ozs7Ozs7Ozs7Ozs7O0FBRTdCLElBQU1DLGdCQUFnQkMsb0JBQWEsQ0FBQ0MsV0FBVyxJQUN6Q0MsaUJBQWlCQyxxQkFBYyxDQUFDRixXQUFXO0FBRTFDLFNBQVNKLFNBQVNPLFFBQVEsRUFBRUMsT0FBTztJQUN4QyxJQUFNQyxVQUFVQyxVQUFVLENBQUNILFNBQVMsSUFBSTtJQUV4QyxJQUFJRSxZQUFZLE1BQU07UUFDcEIsSUFBTUUsWUFBWU4sZUFBZU8sWUFBWSxJQUN2Q0MsU0FBU1gsY0FBY1ksUUFBUSxDQUFDTCxVQUNoQ00sT0FBT1YsZUFBZVcsS0FBSyxDQUFDSCxRQUFRRixZQUNwQ00sZUFBZUYsTUFDZkcsaUJBQWlCTCxRQUNqQk0sb0JBQW9CQyxzQkFBc0JiO1FBRWhEYyxPQUFPQyxNQUFNLENBQUNkLFNBQVM7WUFDckJTLGNBQUFBO1lBQ0FDLGdCQUFBQTtZQUNBQyxtQkFBQUE7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxTQUFTQyxzQkFBc0JiLFFBQVE7SUFDckMsSUFBTWdCLFlBQVloQixTQUFTaUIsT0FBTyxDQUFDLFFBQVFDLHVCQUFZO0lBRXZELE9BQU9GO0FBQ1Q7QUFFQSxJQUFNRyxhQUFhLFlBQ2JDLGVBQWUsY0FDZkMsZ0JBQWdCLGVBQ2hCQyxrQkFBa0IsaUJBQ2xCQyxvQkFBb0IsbUJBQ3BCQyxvQkFBb0IsbUJBQ3BCQyx1QkFBdUIsc0JBQ3ZCQywwQkFBMEIseUJBQzFCQyxxQ0FBcUM7QUFFcEMsSUFBTWpDLGtCQUFrQixBQUFDLHdCQUVILE9BQWxCNkIsbUJBQWtCO0FBRzdCLElBQU1LLGVBQWdCLHNCQUloQkMsaUJBQWlCLEFBQUMsdUJBR2JKLE9BREFELG1CQUFrQixlQUNHLE9BQXJCQyx1QkFFTEssa0JBQW1CLDRCQUluQkMsbUJBQW9CLFdBRXBCQyxxQkFBcUIsQUFBQyx1QkFHakJYLE9BREFDLGlCQUFnQixlQUNGLE9BQWRELGdCQUVMWSxzQkFBdUIsdUVBU3ZCQyx3QkFBd0IsQUFBQyxzYkFXdEJQLE9BREFELHlCQUF3QixhQUNXLE9BQW5DQyxvQ0FBbUMsc0JBS3RDUSwwQkFBMkIsMkJBRzNCQyxtQ0FBb0M7SUFVdkI7QUFBbkIsSUFBTWpDLGNBQWEsV0FFakIsaUJBRmlCLE1BRWhCZ0IsWUFBYVMsZUFDZCxpQkFIaUIsTUFHaEJSLGNBQWVTLGlCQUNoQixpQkFKaUIsTUFJaEJSLGVBQWdCUyxrQkFDakIsaUJBTGlCLE1BS2hCUixpQkFBa0JTLG1CQUNuQixpQkFOaUIsTUFNaEJSLG1CQUFvQlMscUJBQ3JCLGlCQVBpQixNQU9oQlIsbUJBQW9CUyxzQkFDckIsaUJBUmlCLE1BUWhCUixzQkFBdUJTLHdCQUN4QixpQkFUaUIsTUFTaEJSLHlCQUEwQlMsMEJBQzNCLGlCQVZpQixNQVVoQlIsb0NBQXFDUyxtQ0FWckIifQ==