"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    _defaultContent: function() {
        return _defaultContent;
    },
    default: function() {
        return importer;
    },
    defaultContent: function() {
        return defaultContent;
    }
});
var _index = require("../index");
var _constants = require("./constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var markdownLexer = _index.MarkdownLexer.fromNothing(), markdownParser = _index.MarkdownParser.fromNothing();
function importer(filePath, context) {
    var content = contentMap[filePath] || null;
    if (content !== null) {
        var startOfContent = true, startRule = markdownParser.getStartRule(), tokens = markdownLexer.tokenise(content), node = markdownParser.parse(tokens, startRule, startOfContent), importedNode = node, importedTokens = tokens, importedClassName = classNameFromFilePath(filePath);
        Object.assign(context, {
            importedNode: importedNode,
            importedTokens: importedTokens,
            importedClassName: importedClassName
        });
    }
}
function classNameFromFilePath(filePath) {
    var className = filePath.replace(/\.md/, _constants.EMPTY_STRING);
    return className;
}
var CONTENT_PATH = "content.md", CONTENTS_PATH = "contents.md", HALF_TITLE_PATH = "half-title.md", FRONT_MATTER_PATH = "front-matter.md", INTRODUCTION_PATH = "introduction.md", GETTING_STARTED_PATH = "getting-started.md", INSTALLING_THE_CLI_PATH = "installing-the-cli.md", GETTING_TO_GRIPS_WITH_THE_IDE_PATH = "getting-to-grips-with-the-ide.md";
var _defaultContent = "@ignore\n\n@include ".concat(FRONT_MATTER_PATH, "\n@include ").concat(CONTENT_PATH);
var defaultContent = "[^occam]: Occam footnote.\n";
var contentContent = "@ignore\n\n@include ".concat(INTRODUCTION_PATH, "\n@include ").concat(GETTING_STARTED_PATH), contentsContent = "## Contents\n\n@contents", halfTitleContent = "# Occam", frontMatterContent = "@ignore\n\n@include ".concat(HALF_TITLE_PATH, "\n@include ").concat(CONTENTS_PATH), introductionContent = "# Introduction\n      \nA short paragraph.", gettingStartedContent = "# Getting started\n      \nAnother short paragraph.\n      \n@embed ".concat(INSTALLING_THE_CLI_PATH, "\n@embed ").concat(GETTING_TO_GRIPS_WITH_THE_IDE_PATH, "\n"), installingTheCLIContent = "## Installing the CLI", gettingToGripsWithTheIDEIContent = "## Getting to grips with the IDE";
var _obj;
var contentMap = (_obj = {}, _define_property(_obj, CONTENT_PATH, contentContent), _define_property(_obj, CONTENTS_PATH, contentsContent), _define_property(_obj, HALF_TITLE_PATH, halfTitleContent), _define_property(_obj, FRONT_MATTER_PATH, frontMatterContent), _define_property(_obj, INTRODUCTION_PATH, introductionContent), _define_property(_obj, GETTING_STARTED_PATH, gettingStartedContent), _define_property(_obj, INSTALLING_THE_CLI_PATH, installingTheCLIContent), _define_property(_obj, GETTING_TO_GRIPS_WITH_THE_IDE_PATH, gettingToGripsWithTheIDEIContent), _obj);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2ltcG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBNYXJrZG93bkxleGVyLCBNYXJrZG93blBhcnNlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuY29uc3QgbWFya2Rvd25MZXhlciA9IE1hcmtkb3duTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duUGFyc2VyID0gTWFya2Rvd25QYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW1wb3J0ZXIoZmlsZVBhdGgsIGNvbnRleHQpIHtcbiAgY29uc3QgY29udGVudCA9IGNvbnRlbnRNYXBbZmlsZVBhdGhdIHx8IG51bGw7XG5cbiAgaWYgKGNvbnRlbnQgIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGFydE9mQ29udGVudCA9IHRydWUsXG4gICAgICAgICAgc3RhcnRSdWxlID0gbWFya2Rvd25QYXJzZXIuZ2V0U3RhcnRSdWxlKCksXG4gICAgICAgICAgdG9rZW5zID0gbWFya2Rvd25MZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgICBub2RlID0gbWFya2Rvd25QYXJzZXIucGFyc2UodG9rZW5zLCBzdGFydFJ1bGUsIHN0YXJ0T2ZDb250ZW50KSxcbiAgICAgICAgICBpbXBvcnRlZE5vZGUgPSBub2RlLCAgLy8vXG4gICAgICAgICAgaW1wb3J0ZWRUb2tlbnMgPSB0b2tlbnMsXG4gICAgICAgICAgaW1wb3J0ZWRDbGFzc05hbWUgPSBjbGFzc05hbWVGcm9tRmlsZVBhdGgoZmlsZVBhdGgpO1xuXG4gICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgICBpbXBvcnRlZE5vZGUsXG4gICAgICBpbXBvcnRlZFRva2VucyxcbiAgICAgIGltcG9ydGVkQ2xhc3NOYW1lXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xhc3NOYW1lRnJvbUZpbGVQYXRoKGZpbGVQYXRoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IGZpbGVQYXRoLnJlcGxhY2UoL1xcLm1kLywgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5jb25zdCBDT05URU5UX1BBVEggPSBcImNvbnRlbnQubWRcIixcbiAgICAgIENPTlRFTlRTX1BBVEggPSBcImNvbnRlbnRzLm1kXCIsXG4gICAgICBIQUxGX1RJVExFX1BBVEggPSBcImhhbGYtdGl0bGUubWRcIixcbiAgICAgIEZST05UX01BVFRFUl9QQVRIID0gXCJmcm9udC1tYXR0ZXIubWRcIixcbiAgICAgIElOVFJPRFVDVElPTl9QQVRIID0gXCJpbnRyb2R1Y3Rpb24ubWRcIixcbiAgICAgIEdFVFRJTkdfU1RBUlRFRF9QQVRIID0gXCJnZXR0aW5nLXN0YXJ0ZWQubWRcIixcbiAgICAgIElOU1RBTExJTkdfVEhFX0NMSV9QQVRIID0gXCJpbnN0YWxsaW5nLXRoZS1jbGkubWRcIixcbiAgICAgIEdFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEggPSBcImdldHRpbmctdG8tZ3JpcHMtd2l0aC10aGUtaWRlLm1kXCI7XG5cbmV4cG9ydCBjb25zdCBfZGVmYXVsdENvbnRlbnQgPSBgQGlnbm9yZVxuXG5AaW5jbHVkZSAke0ZST05UX01BVFRFUl9QQVRIfVxuQGluY2x1ZGUgJHtDT05URU5UX1BBVEh9YDtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb250ZW50ID0gYFteb2NjYW1dOiBPY2NhbSBmb290bm90ZS5cbmA7XG5cbmNvbnN0IGNvbnRlbnRDb250ZW50ID0gYEBpZ25vcmVcblxuQGluY2x1ZGUgJHtJTlRST0RVQ1RJT05fUEFUSH1cbkBpbmNsdWRlICR7R0VUVElOR19TVEFSVEVEX1BBVEh9YCxcblxuICAgICAgY29udGVudHNDb250ZW50ID0gYCMjIENvbnRlbnRzXG5cbkBjb250ZW50c2AsXG5cbiAgICAgIGhhbGZUaXRsZUNvbnRlbnQgPSBgIyBPY2NhbWAsXG5cbiAgICAgIGZyb250TWF0dGVyQ29udGVudCA9IGBAaWdub3JlXG5cbkBpbmNsdWRlICR7SEFMRl9USVRMRV9QQVRIfVxuQGluY2x1ZGUgJHtDT05URU5UU19QQVRIfWAsXG5cbiAgICAgIGludHJvZHVjdGlvbkNvbnRlbnQgPSBgIyBJbnRyb2R1Y3Rpb25cbiAgICAgIFxuQSBzaG9ydCBwYXJhZ3JhcGguYCxcblxuICAgICAgZ2V0dGluZ1N0YXJ0ZWRDb250ZW50ID0gYCMgR2V0dGluZyBzdGFydGVkXG4gICAgICBcbkFub3RoZXIgc2hvcnQgcGFyYWdyYXBoLlxuICAgICAgXG5AZW1iZWQgJHtJTlNUQUxMSU5HX1RIRV9DTElfUEFUSH1cbkBlbWJlZCAke0dFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEh9XG5gLFxuXG4gICAgICBpbnN0YWxsaW5nVGhlQ0xJQ29udGVudCA9IGAjIyBJbnN0YWxsaW5nIHRoZSBDTElgLFxuXG4gICAgICBnZXR0aW5nVG9Hcmlwc1dpdGhUaGVJREVJQ29udGVudCA9IGAjIyBHZXR0aW5nIHRvIGdyaXBzIHdpdGggdGhlIElERWA7XG5cbmNvbnN0IGNvbnRlbnRNYXAgPSB7XG5cbiAgW0NPTlRFTlRfUEFUSF06IGNvbnRlbnRDb250ZW50LFxuICBbQ09OVEVOVFNfUEFUSF06IGNvbnRlbnRzQ29udGVudCxcbiAgW0hBTEZfVElUTEVfUEFUSF06IGhhbGZUaXRsZUNvbnRlbnQsXG4gIFtGUk9OVF9NQVRURVJfUEFUSF06IGZyb250TWF0dGVyQ29udGVudCxcbiAgW0lOVFJPRFVDVElPTl9QQVRIXTogaW50cm9kdWN0aW9uQ29udGVudCxcbiAgW0dFVFRJTkdfU1RBUlRFRF9QQVRIXTogZ2V0dGluZ1N0YXJ0ZWRDb250ZW50LFxuICBbSU5TVEFMTElOR19USEVfQ0xJX1BBVEhdOiBpbnN0YWxsaW5nVGhlQ0xJQ29udGVudCxcbiAgW0dFVFRJTkdfVE9fR1JJUFNfV0lUSF9USEVfSURFX1BBVEhdOiBnZXR0aW5nVG9Hcmlwc1dpdGhUaGVJREVJQ29udGVudFxuXG59O1xuIl0sIm5hbWVzIjpbIl9kZWZhdWx0Q29udGVudCIsImltcG9ydGVyIiwiZGVmYXVsdENvbnRlbnQiLCJtYXJrZG93bkxleGVyIiwiTWFya2Rvd25MZXhlciIsImZyb21Ob3RoaW5nIiwibWFya2Rvd25QYXJzZXIiLCJNYXJrZG93blBhcnNlciIsImZpbGVQYXRoIiwiY29udGV4dCIsImNvbnRlbnQiLCJjb250ZW50TWFwIiwic3RhcnRPZkNvbnRlbnQiLCJzdGFydFJ1bGUiLCJnZXRTdGFydFJ1bGUiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsImltcG9ydGVkTm9kZSIsImltcG9ydGVkVG9rZW5zIiwiaW1wb3J0ZWRDbGFzc05hbWUiLCJjbGFzc05hbWVGcm9tRmlsZVBhdGgiLCJPYmplY3QiLCJhc3NpZ24iLCJjbGFzc05hbWUiLCJyZXBsYWNlIiwiRU1QVFlfU1RSSU5HIiwiQ09OVEVOVF9QQVRIIiwiQ09OVEVOVFNfUEFUSCIsIkhBTEZfVElUTEVfUEFUSCIsIkZST05UX01BVFRFUl9QQVRIIiwiSU5UUk9EVUNUSU9OX1BBVEgiLCJHRVRUSU5HX1NUQVJURURfUEFUSCIsIklOU1RBTExJTkdfVEhFX0NMSV9QQVRIIiwiR0VUVElOR19UT19HUklQU19XSVRIX1RIRV9JREVfUEFUSCIsImNvbnRlbnRDb250ZW50IiwiY29udGVudHNDb250ZW50IiwiaGFsZlRpdGxlQ29udGVudCIsImZyb250TWF0dGVyQ29udGVudCIsImludHJvZHVjdGlvbkNvbnRlbnQiLCJnZXR0aW5nU3RhcnRlZENvbnRlbnQiLCJpbnN0YWxsaW5nVGhlQ0xJQ29udGVudCIsImdldHRpbmdUb0dyaXBzV2l0aFRoZUlERUlDb250ZW50Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBNENhQSxlQUFlO2VBQWZBOztJQW5DYixPQWtCQztlQWxCdUJDOztJQXdDWEMsY0FBYztlQUFkQTs7O3FCQS9DaUM7eUJBRWpCOzs7Ozs7Ozs7Ozs7OztBQUU3QixJQUFNQyxnQkFBZ0JDLG9CQUFhLENBQUNDLFdBQVcsSUFDekNDLGlCQUFpQkMscUJBQWMsQ0FBQ0YsV0FBVztBQUVsQyxTQUFTSixTQUFTTyxRQUFRLEVBQUVDLE9BQU87SUFDaEQsSUFBTUMsVUFBVUMsVUFBVSxDQUFDSCxTQUFTLElBQUk7SUFFeEMsSUFBSUUsWUFBWSxNQUFNO1FBQ3BCLElBQU1FLGlCQUFpQixNQUNqQkMsWUFBWVAsZUFBZVEsWUFBWSxJQUN2Q0MsU0FBU1osY0FBY2EsUUFBUSxDQUFDTixVQUNoQ08sT0FBT1gsZUFBZVksS0FBSyxDQUFDSCxRQUFRRixXQUFXRCxpQkFDL0NPLGVBQWVGLE1BQ2ZHLGlCQUFpQkwsUUFDakJNLG9CQUFvQkMsc0JBQXNCZDtRQUVoRGUsT0FBT0MsTUFBTSxDQUFDZixTQUFTO1lBQ3JCVSxjQUFBQTtZQUNBQyxnQkFBQUE7WUFDQUMsbUJBQUFBO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsU0FBU0Msc0JBQXNCZCxRQUFRO0lBQ3JDLElBQU1pQixZQUFZakIsU0FBU2tCLE9BQU8sQ0FBQyxRQUFRQyx1QkFBWTtJQUV2RCxPQUFPRjtBQUNUO0FBRUEsSUFBTUcsZUFBZSxjQUNmQyxnQkFBZ0IsZUFDaEJDLGtCQUFrQixpQkFDbEJDLG9CQUFvQixtQkFDcEJDLG9CQUFvQixtQkFDcEJDLHVCQUF1QixzQkFDdkJDLDBCQUEwQix5QkFDMUJDLHFDQUFxQztBQUVwQyxJQUFNbkMsa0JBQWtCLEFBQUMsdUJBR3JCNEIsT0FEQUcsbUJBQWtCLGVBQ0wsT0FBYkg7QUFFSixJQUFNMUIsaUJBQWtCO0FBRy9CLElBQU1rQyxpQkFBaUIsQUFBQyx1QkFHYkgsT0FEQUQsbUJBQWtCLGVBQ0csT0FBckJDLHVCQUVMSSxrQkFBbUIsNEJBSW5CQyxtQkFBb0IsV0FFcEJDLHFCQUFxQixBQUFDLHVCQUdqQlYsT0FEQUMsaUJBQWdCLGVBQ0YsT0FBZEQsZ0JBRUxXLHNCQUF1Qiw4Q0FJdkJDLHdCQUF3QixBQUFDLHVFQUt0Qk4sT0FEQUQseUJBQXdCLGFBQ1csT0FBbkNDLG9DQUFtQyxPQUd0Q08sMEJBQTJCLHlCQUUzQkMsbUNBQW9DO0lBRXZCO0FBQW5CLElBQU1oQyxjQUFhLFdBRWpCLGlCQUZpQixNQUVoQmlCLGNBQWVRLGlCQUNoQixpQkFIaUIsTUFHaEJQLGVBQWdCUSxrQkFDakIsaUJBSmlCLE1BSWhCUCxpQkFBa0JRLG1CQUNuQixpQkFMaUIsTUFLaEJQLG1CQUFvQlEscUJBQ3JCLGlCQU5pQixNQU1oQlAsbUJBQW9CUSxzQkFDckIsaUJBUGlCLE1BT2hCUCxzQkFBdUJRLHdCQUN4QixpQkFSaUIsTUFRaEJQLHlCQUEwQlEsMEJBQzNCLGlCQVRpQixNQVNoQlAsb0NBQXFDUSxtQ0FUckIifQ==